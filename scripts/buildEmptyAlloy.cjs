/*
Copyright 2024 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

// This script builds a functional stub alloy.js when using preinstalled library type.
// It provides proxy implementations that work with self-hosted alloy instances.

const path = require("path");
const fs = require("fs");
const { Command, Option, InvalidOptionArgumentError } = require("commander");
const babel = require("@babel/core");

const program = new Command();

program
  .name("buildEmptyAlloy")
  .description(
    "Tool for generating an empty/proxy alloy build for preinstalled library type.",
  );

program.addOption(
  new Option(
    "-o, --outputDir <dir>",
    "the output directory for the generated build",
  )
    .default(process.cwd())
    .argParser((value) => {
      if (!fs.existsSync(path.join(process.cwd(), value))) {
        throw new InvalidOptionArgumentError(
          `Output directory "${value}" is not a valid directory path.`,
        );
      }
      return value;
    }),
);

program.action(({ outputDir }) => {
  console.log("=== EMPTY ALLOY BUILD DEBUG ===");
  console.log("Building empty alloy stub for preinstalled library type.");
  console.log("Environment variables:");
  console.log("  ALLOY_IS_MANAGED:", process.env.ALLOY_IS_MANAGED);
  console.log("  NODE_ENV:", process.env.NODE_ENV);
  console.log("  Output directory:", outputDir);
  console.log("==============================");

  // Create alloy.js stub with our lightweight preinstalled implementations
  const proxyContent = `
/*
 * =================================================================
 * PREINSTALLED MODE ALLOY.JS - LIGHTWEIGHT STUB
 * Generated by buildEmptyAlloy.cjs at ${new Date().toISOString()}
 * Environment: ALLOY_IS_MANAGED=${process.env.ALLOY_IS_MANAGED}
 * This file should be ~4KB and contain only proxy implementations
 * =================================================================
 */

// Force preinstalled mode by creating a stub with our preinstalled implementations
let createCustomInstance, components, createEventMergeId, deepAssign;

console.log('AEP Web SDK Extension: Using preinstalled alloy.js instance (stub mode)');

createCustomInstance = (name) => {
  if (typeof window[name] === 'function') {
    return window[name];
  }
  console.warn(\`Alloy instance "\${name}" not found on window. Please ensure it is loaded before the Launch library.\`);
  return () => Promise.resolve({});
};

// Minimal components for extension compatibility
components = {};

// Lightweight utility function implementations for preinstalled mode
createEventMergeId = () => {
  // Generate a UUID-like string compatible with alloy's format
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
};

deepAssign = (target, ...sources) => {
  // Minimal deep assign implementation compatible with alloy's usage
  if (!target || typeof target !== 'object') return target;
  
  sources.forEach(source => {
    if (source && typeof source === 'object') {
      Object.keys(source).forEach(key => {
        if (source[key] && typeof source[key] === 'object' && 
            !Array.isArray(source[key]) && source[key].constructor === Object) {
          // Deep merge for plain objects
          target[key] = deepAssign(target[key] || {}, source[key]);
        } else {
          // Direct assignment for primitives, arrays, and non-plain objects
          target[key] = source[key];
        }
      });
    }
  });
  return target;
};

// Export the implementations
if (typeof module !== 'undefined' && module.exports) {
  // CommonJS exports
  module.exports = { createCustomInstance, components, createEventMergeId, deepAssign };
} else {
  // ES module exports (for our extension build system)
  if (typeof exports !== 'undefined') {
    exports.createCustomInstance = createCustomInstance;
    exports.components = components;
    exports.createEventMergeId = createEventMergeId;
    exports.deepAssign = deepAssign;
  }
}
`;

  const outputFile = path.join(outputDir, "alloy.js");

  // Transform the proxy content with Babel
  const output = babel.transform(proxyContent, {
    presets: [["@babel/preset-env"]],
  }).code;

  fs.writeFileSync(outputFile, output);
  console.log(`Created functional proxy alloy file at ${outputFile}`);
});

program.parse(); 