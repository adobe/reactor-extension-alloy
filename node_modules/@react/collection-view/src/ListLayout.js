'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DragTarget = require('./DragTarget');

var _DragTarget2 = _interopRequireDefault(_DragTarget);

var _IndexPath = require('./IndexPath');

var _IndexPath2 = _interopRequireDefault(_IndexPath);

var _Layout2 = require('./Layout');

var _Layout3 = _interopRequireDefault(_Layout2);

var _LayoutInfo = require('./LayoutInfo');

var _LayoutInfo2 = _interopRequireDefault(_LayoutInfo);

var _Rect = require('./Rect');

var _Rect2 = _interopRequireDefault(_Rect);

var _Size = require('./Size');

var _Size2 = _interopRequireDefault(_Size);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ListLayout class is an implementation of a collection view {@link Layout}
 * it is used for creating lists and lists with indented sub-lists
 *
 * To configure a ListLayout, you can use the properties to define the
 * layouts and/or use the method for defining indentation.
 * The {@link ListLayoutDelegate} extends the existing collection view
 * delegate with an additional method to do this (it uses the same delegate object as
 * the collection view itself).
 */
var ListLayout = function (_Layout) {
  _inherits(ListLayout, _Layout);

  /**
   * Creates a new ListLayout with options. See the list of properties below for a description
   * of the options that can be provided.
   */
  function ListLayout() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ListLayout);

    /**
     * rowHeight defined the height of a row in px.
     * Default to 48px
     * @type {number}
     */
    var _this = _possibleConstructorReturn(this, (ListLayout.__proto__ || Object.getPrototypeOf(ListLayout)).call(this));

    _this.rowHeight = options.rowHeight || 48;

    _this.layoutInfos = [];
    return _this;
  }

  _createClass(ListLayout, [{
    key: 'getLayoutInfo',
    value: function getLayoutInfo(type, section, index) {
      return this.layoutInfos[section][index];
    }
  }, {
    key: 'getVisibleLayoutInfos',
    value: function getVisibleLayoutInfos(rect) {
      var res = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.layoutInfos[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var section = _step.value;
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = section[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var layoutInfo = _step2.value;

              if (layoutInfo.rect.intersects(rect)) {
                res.push(layoutInfo);
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return res;
    }
  }, {
    key: 'validate',
    value: function validate() {
      this.layoutInfos = [];

      var numSections = this.collectionView.getNumberOfSections();
      var y = 0;

      for (var section = 0; section < numSections; section++) {
        this.layoutInfos[section] = [];

        var len = this.collectionView.getSectionLength(section);
        for (var index = 0; index < len; index++) {
          var layoutInfo = new _LayoutInfo2.default('item', section, index);
          var x = 0;
          if (typeof this.collectionView.delegate.indentationForItem === 'function') {
            x = this.collectionView.delegate.indentationForItem(section, index) || 0;
          }

          layoutInfo.rect = new _Rect2.default(x, y, this.collectionView.size.width - x, this.rowHeight);
          this.layoutInfos[section][index] = layoutInfo;

          y += this.rowHeight;
        }
      }

      this.contentHeight = y;
    }
  }, {
    key: 'getContentSize',
    value: function getContentSize() {
      return new _Size2.default(this.collectionView.size.width, this.contentHeight);
    }
  }, {
    key: 'indexPathAbove',
    value: function indexPathAbove(indexPath) {
      return this.collectionView.incrementIndexPath(indexPath, -1);
    }
  }, {
    key: 'indexPathBelow',
    value: function indexPathBelow(indexPath) {
      return this.collectionView.incrementIndexPath(indexPath, 1);
    }
  }, {
    key: 'getDragTarget',
    value: function getDragTarget(point) {
      var visible = this.getVisibleLayoutInfos(new _Rect2.default(point.x, point.y, 1, 1));
      if (visible.length > 0) {
        visible = visible.sort(function (a, b) {
          return b.zIndex - a.zIndex;
        });
        return new _DragTarget2.default('item', new _IndexPath2.default(visible[0].section, visible[0].index));
      }
    }
  }, {
    key: 'getDropTarget',
    value: function getDropTarget(point) {
      var indexPath = this.collectionView.indexPathAtPoint(point);
      if (indexPath) {
        return new _DragTarget2.default('item', indexPath, _DragTarget2.default.DROP_ON);
      }
    }
  }, {
    key: 'getInitialLayoutInfo',
    value: function getInitialLayoutInfo(type, section, index) {
      var initial = _get(ListLayout.prototype.__proto__ || Object.getPrototypeOf(ListLayout.prototype), 'getInitialLayoutInfo', this).call(this, type, section, index);

      initial.opacity = 0;
      initial.transform = 'scale3d(0.8, 0.8, 0.8)';

      return initial;
    }
  }, {
    key: 'getFinalLayoutInfo',
    value: function getFinalLayoutInfo(type, section, index) {
      var final = _get(ListLayout.prototype.__proto__ || Object.getPrototypeOf(ListLayout.prototype), 'getFinalLayoutInfo', this).call(this, type, section, index);

      final.opacity = 0;
      final.transform = 'scale3d(0.8, 0.8, 0.8)';

      return final;
    }
  }]);

  return ListLayout;
}(_Layout3.default);

exports.default = ListLayout;