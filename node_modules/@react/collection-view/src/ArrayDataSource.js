'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataSource2 = require('./DataSource.js');

var _DataSource3 = _interopRequireDefault(_DataSource2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * This is a simple concrete implementation of a {@link DataSource}
 * that returns content from a 2d array.
 */
var ArrayDataSource = function (_DataSource) {
  _inherits(ArrayDataSource, _DataSource);

  /**
   * Creates an ArrayDataSource
   * @param {Array<Array>} sections an array of sections
   */
  function ArrayDataSource() {
    var sections = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    _classCallCheck(this, ArrayDataSource);

    var _this = _possibleConstructorReturn(this, (ArrayDataSource.__proto__ || Object.getPrototypeOf(ArrayDataSource)).call(this));

    _this.sections = sections;
    return _this;
  }

  _createClass(ArrayDataSource, [{
    key: 'getNumberOfSections',
    value: function getNumberOfSections() {
      return this.sections.length;
    }

    /**
     * Returns an array of items in the given section.
     * Mostly for use by subclasses. Other methods in this
     * class use this method to get items in a section.
     * @param {number} section the section to retrieve
     * @return {Array}
     */

  }, {
    key: 'getItemsInSection',
    value: function getItemsInSection(section) {
      return this.sections[section];
    }
  }, {
    key: 'getSectionLength',
    value: function getSectionLength(section) {
      return this.getItemsInSection(section).length;
    }
  }, {
    key: 'getItem',
    value: function getItem(section, index) {
      return this.getItemsInSection(section)[index];
    }
  }, {
    key: 'startTransaction',
    value: function startTransaction() {
      this.emit('startTransaction');
    }
  }, {
    key: 'endTransaction',
    value: function endTransaction(animated) {
      this.emit('endTransaction', animated);
    }
  }, {
    key: 'insertItem',
    value: function insertItem(indexPath, item, animated) {
      this.getItemsInSection(indexPath.section).splice(indexPath.index, 0, item);
      this.emit('insertItem', indexPath, animated);
    }
  }, {
    key: 'insertSection',
    value: function insertSection(section, items, animated) {
      this.sections.splice(section, 0, items);
      this.emit('insertSection', section, animated);
    }
  }, {
    key: 'removeItem',
    value: function removeItem(indexPath, animated) {
      this.getItemsInSection(indexPath.section).splice(indexPath.index, 1);
      this.emit('removeItem', indexPath, animated);
    }
  }, {
    key: 'removeSection',
    value: function removeSection(section, animated) {
      this.sections.splice(section, 1);
      this.emit('removeSection', section, animated);
    }
  }, {
    key: 'moveItem',
    value: function moveItem(from, to, animated) {
      var item = this.getItemsInSection(from.section).splice(from.index, 1)[0];
      this.getItemsInSection(to.section).splice(to.index, 0, item);
      this.emit('moveItem', from, to, animated);
    }
  }, {
    key: 'moveSection',
    value: function moveSection(from, to, animated) {
      var section = this.sections.splice(from, 1)[0];
      this.sections.splice(to, 0, section);
      this.emit('moveSection', from, to, animated);
    }
  }, {
    key: 'replaceItem',
    value: function replaceItem(indexPath, item, animated) {
      this.getItemsInSection(indexPath.section)[indexPath.index] = item;
      this.emit('reloadItem', indexPath, animated);
    }
  }, {
    key: 'replaceSection',
    value: function replaceSection(section, items, animated) {
      this.sections[section] = items;
      this.emit('reloadSection', section, animated);
    }
  }]);

  return ArrayDataSource;
}(_DataSource3.default);

exports.default = ArrayDataSource;