'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Describes a view to be dragged or dropped.
 */
var DragTarget = function () {

  /**
   * @param {string} type the type of view being dragged or dropped
   * @param {IndexPath} indexPath the IndexPath of the view being dragged or dropped
   * @param {string} [dropPosition=DROP_BETWEEN] The position of the drop. Either DROP_BETWEEN or DROP_ON.
   */
  function DragTarget(type, indexPath) {
    var dropPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DragTarget.DROP_BETWEEN;

    _classCallCheck(this, DragTarget);

    /**
     * The type of view being dragged or dropped
     * @type {string}
     */
    this.type = type;

    /**
     * The IndexPath of the view being dragged or dropped
     * @type {IndexPath}
     */
    this.indexPath = indexPath;

    /**
     * The position of the drop. Either DROP_BETWEEN or DROP_ON. DROP_BETWEEN by default.
     * @type {string}
     */
    this.dropPosition = dropPosition;
  }

  /**
   * Returns whether this DragTarget is equal to another one
   * @param {DragTarget} other the target to compare
   * @return {boolean}
   */


  _createClass(DragTarget, [{
    key: 'equals',
    value: function equals(other) {
      return other instanceof DragTarget && other.type === this.type && other.dropPosition === this.dropPosition && other.indexPath.equals(this.indexPath);
    }

    /**
     * Returns a copy of this drag target.
     * @return {DragTarget}
     */

  }, {
    key: 'copy',
    value: function copy() {
      return new DragTarget(this.type, this.indexPath.copy(), this.dropPosition);
    }
  }]);

  return DragTarget;
}();

DragTarget.DROP_BETWEEN = 'DROP_BETWEEN';
DragTarget.DROP_ON = 'DROP_ON';
exports.default = DragTarget;