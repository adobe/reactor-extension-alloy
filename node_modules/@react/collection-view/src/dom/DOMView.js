'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Rect = require('../Rect');

var _Rect2 = _interopRequireDefault(_Rect);

var _Size = require('../Size');

var _Size2 = _interopRequireDefault(_Size);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DOMView = function () {
  function DOMView(view) {
    _classCallCheck(this, DOMView);

    this.view = view;
  }

  _createClass(DOMView, [{
    key: 'getRenderContext',
    value: function getRenderContext() {
      if (!this.dom) {
        this.dom = document.createElement('div');
      }

      return this.dom;
    }
  }, {
    key: 'render',
    value: function render(backend) {
      if (!this.backend) {
        for (var attr in this.view.attrs) {
          this.dom.setAttribute(attr, this.view.attrs[attr]);
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.view.events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = _slicedToArray(_step.value, 2),
                event = _step$value[0],
                handlers = _step$value[1];

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = handlers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var handler = _step2.value;

                this.dom.addEventListener(event.toLowerCase(), handler);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        this.children = new Set();
        this.backend = backend;
      }

      this.flushUpdates();
      return this.dom;
    }
  }, {
    key: 'flushUpdates',
    value: function flushUpdates(fn) {
      if (this.view.dirty) {
        Object.assign(this.dom.style, this.view.style);
        this.dom.className = this.view.getClassName();

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = this.view.children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var child = _step3.value;

            if (!this.children.has(child)) {
              this.dom.appendChild(child.renderBackendView ? child.renderBackendView(this.backend) : child);
            } else if (child.renderBackendView) {
              child.renderBackendView(this.backend);
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = this.children[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _child = _step4.value;

            if (!this.view.children.has(_child)) {
              this.dom.removeChild(_child.backendView ? _child.backendView.dom : _child);
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        this.children = new Set(this.view.children);
        this.view.dirty = false;
      }

      if (fn) {
        fn();
      }
    }
  }, {
    key: 'forceStyleUpdate',
    value: function forceStyleUpdate() {
      window.getComputedStyle(this.getDOMNode()).opacity;
    }
  }, {
    key: 'getRect',
    value: function getRect() {
      var rect = this.getDOMNode().getBoundingClientRect();
      return new _Rect2.default(rect.left, rect.top, rect.width, rect.height);
    }
  }, {
    key: 'getSize',
    value: function getSize() {
      var node = this.getDOMNode().firstChild; // TODO
      var style = window.getComputedStyle(node);
      var xMargins = parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10) || 0;
      var yMargins = parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10) || 0;
      return new _Size2.default(node.offsetWidth + xMargins, node.offsetHeight + yMargins);
    }
  }, {
    key: 'getDOMNode',
    value: function getDOMNode() {
      return this.dom;
    }
  }, {
    key: 'triggerEvent',
    value: function triggerEvent(event) {
      var evt = document.createEvent('Event');
      evt.initEvent(event, false, false);
      this.getDOMNode().dispatchEvent(evt);
    }
  }]);

  return DOMView;
}();

exports.default = DOMView;