'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _View2 = require('./View');

var _View3 = _interopRequireDefault(_View2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var KNOB_PADDING = 2;
var MIN_KNOB_HEIGHT = 20;
var MIN_OVERSCROLL_HEIGHT = 8;
var IS_MOBILE = 'ontouchstart' in global;
var KNOB_THICKNESS = IS_MOBILE ? 3 : 8;
var KNOB_COLOR = IS_MOBILE ? 'rgba(0, 0, 0, 0.3)' : 'rgba(0, 0, 0, 0.5)';

var Scroller = function (_View) {
  _inherits(Scroller, _View);

  function Scroller(scrollView, orientation) {
    _classCallCheck(this, Scroller);

    var _this = _possibleConstructorReturn(this, (Scroller.__proto__ || Object.getPrototypeOf(Scroller)).call(this));

    _this.scrollView = scrollView;

    _this.knobWidth = KNOB_THICKNESS;
    _this.knobHeight = 0;
    _this.trackHeight = 0;
    _this.value = 0;
    _this.hidden = false;
    _this.isVertical = orientation !== 'horizontal';

    _this.css({
      position: 'absolute',
      width: _this.knobWidth + 'px',
      height: _this.knobWidth + 'px',
      backgroundColor: KNOB_COLOR,
      borderRadius: KNOB_THICKNESS + 'px',
      top: 0,
      left: 0,
      opacity: 0,
      transition: 'opacity 200ms'
    });

    // set WAI-ARIA role="presentation" so that the scrollbar has no role
    _this.setAttribute('role', 'presentation');

    _this.onEvent('mouseDown', _this.mouseDown.bind(_this));
    _this.onEvent('mouseOver', _this.mouseOver.bind(_this));
    _this.onEvent('mouseOut', _this.mouseOut.bind(_this));

    _this._mouseDown = false;
    _this._mouseOver = false;
    _this._scrolling = false;
    _this._dragOffset = 0;
    _this._valueAtDragStart = 0;

    _this.mouseMove = _this.mouseMove.bind(_this);
    _this.mouseUp = _this.mouseUp.bind(_this);
    return _this;
  }

  _createClass(Scroller, [{
    key: 'updateScrollViewSize',
    value: function updateScrollViewSize() {
      var hidden = this.isVertical ? this.scrollView.contentSize.height <= this.scrollView.size.height : this.scrollView.contentSize.width <= this.scrollView.size.width;
      if (hidden !== this.hidden) {
        this.css({ visibility: hidden ? 'hidden' : 'visible' });
        this.hidden = hidden;
      }

      if (!hidden) {
        this.updateKnob();
      }
    }
  }, {
    key: 'updateKnob',
    value: function updateKnob() {
      var scrollViewSize = this.isVertical ? this.scrollView.size.height : this.scrollView.size.width;
      var contentSize = this.isVertical ? this.scrollView.contentSize.height : this.scrollView.contentSize.width;

      var proportion = scrollViewSize / contentSize;
      var knobHeight = Math.max(MIN_KNOB_HEIGHT, proportion * scrollViewSize);
      var trackHeight = scrollViewSize - knobHeight - KNOB_PADDING * 2;

      var x = this.isVertical ? this.scrollView.size.width - this.knobWidth - KNOB_PADDING : KNOB_PADDING + trackHeight * this.value;
      var y = this.isVertical ? KNOB_PADDING + trackHeight * this.value : this.scrollView.size.height - this.knobWidth - KNOB_PADDING;

      var minVal = KNOB_PADDING;
      var maxVal = scrollViewSize - knobHeight - KNOB_PADDING;
      var val = this.isVertical ? y : x;

      if (val < minVal) {
        knobHeight = Math.max(MIN_OVERSCROLL_HEIGHT, knobHeight + (val + minVal));
        val = minVal;
      } else if (val > maxVal) {
        knobHeight = Math.max(MIN_OVERSCROLL_HEIGHT, knobHeight - (val - maxVal));
        val = scrollViewSize - knobHeight - KNOB_PADDING;
      }

      if (knobHeight !== this.knobHeight) {
        this.knobHeight = knobHeight;
        this.trackHeight = scrollViewSize - knobHeight - KNOB_PADDING * 2;

        if (this.isVertical) {
          this.css({ height: this.knobHeight + 'px' });
        } else {
          this.css({ width: this.knobHeight + 'px' });
        }
      }

      var _ref = this.isVertical ? [x, val] : [val, y];

      var _ref2 = _slicedToArray(_ref, 2);

      x = _ref2[0];
      y = _ref2[1];

      var transform = 'translate3d(' + x + 'px, ' + y + 'px, 0)';
      this.css({
        WebkitTransformorm: transform,
        transform: transform
      });
    }
  }, {
    key: 'setValue',
    value: function setValue(value) {
      this.value = value;
      this.updateKnob();
    }
  }, {
    key: 'getDragOffset',
    value: function getDragOffset(e) {
      return this.isVertical ? e.clientY - this.scrollView.getRect().y : e.clientX - this.scrollView.getRect().x;
    }
  }, {
    key: 'mouseDown',
    value: function mouseDown(e) {
      e.preventDefault();
      e.stopPropagation();

      this._mouseDown = true;
      this._dragOffset = this.getDragOffset(e);
      this._valueAtDragStart = this.value;

      document.addEventListener('mousemove', this.mouseMove, false);
      document.addEventListener('mouseup', this.mouseUp, false);
    }
  }, {
    key: 'mouseMove',
    value: function mouseMove(e) {
      e.preventDefault();

      var offset = this.getDragOffset(e);
      var delta = offset - this._dragOffset;

      this.setValue(this._valueAtDragStart + delta / this.trackHeight);
      var contentOffset = this.scrollView.contentOffset.copy();
      if (this.isVertical) {
        contentOffset.y = this.value * (this.scrollView.contentSize.height - this.scrollView.size.height);
      } else {
        contentOffset.x = this.value * (this.scrollView.contentSize.width - this.scrollView.size.width);
      }
      this.scrollView.setContentOffset(contentOffset);
    }
  }, {
    key: 'mouseUp',
    value: function mouseUp(e) {
      var _this2 = this;

      e.preventDefault();

      this._mouseDown = false;

      document.removeEventListener('mousemove', this.mouseMove, false);
      document.removeEventListener('mouseup', this.mouseUp, false);

      setTimeout(function () {
        _this2.hide();
      }, 1000);
    }
  }, {
    key: 'mouseOver',
    value: function mouseOver() {
      this._mouseOver = true;
    }
  }, {
    key: 'mouseOut',
    value: function mouseOut() {
      var _this3 = this;

      this._mouseOver = false;

      setTimeout(function () {
        _this3.hide();
      }, 1000);
    }
  }, {
    key: 'show',
    value: function show() {
      this.css({ opacity: 1 });
    }
  }, {
    key: 'hide',
    value: function hide() {
      if (!this._mouseOver && !this._mouseDown && !this._scrolling) {
        this.css({ opacity: 0 });
      }
    }
  }, {
    key: 'scrollStarted',
    value: function scrollStarted() {
      if (!this._scrolling) {
        this._scrolling = true;
        this.show();
      }
    }
  }, {
    key: 'scrollEnded',
    value: function scrollEnded() {
      if (this._scrolling) {
        this._scrolling = false;
        this.hide();
      }
    }
  }, {
    key: 'flash',
    value: function flash() {
      var _this4 = this;

      if (this._scrolling || this._mouseDown || this._mouseOver) {
        return;
      }

      this.show();
      setTimeout(function () {
        _this4.hide();
      }, 1300);
    }
  }]);

  return Scroller;
}(_View3.default);

exports.default = Scroller;