'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DragTarget = require('./DragTarget');

var _DragTarget2 = _interopRequireDefault(_DragTarget);

var _IndexPath = require('./IndexPath');

var _IndexPath2 = _interopRequireDefault(_IndexPath);

var _Layout2 = require('./Layout');

var _Layout3 = _interopRequireDefault(_Layout2);

var _LayoutInfo = require('./LayoutInfo');

var _LayoutInfo2 = _interopRequireDefault(_LayoutInfo);

var _Rect = require('./Rect');

var _Rect2 = _interopRequireDefault(_Rect);

var _Size = require('./Size');

var _Size2 = _interopRequireDefault(_Size);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * This layout displays equal-sized items in a grid.
 * It works with data in a single section.
 */
var GridLayout = function (_Layout) {
  _inherits(GridLayout, _Layout);

  function GridLayout() {
    _classCallCheck(this, GridLayout);

    var _this = _possibleConstructorReturn(this, (GridLayout.__proto__ || Object.getPrototypeOf(GridLayout)).call(this));

    _this.minItemSize = new _Size2.default(200, 200);
    _this.maxItemSize = new _Size2.default(300, 300);
    _this.minSpace = new _Size2.default(20, 20);
    _this.maxColumns = Infinity;

    _this.itemSize = null;
    _this.numColumns = 0;
    _this.numRows = 0;
    return _this;
  }

  _createClass(GridLayout, [{
    key: 'getLayoutInfo',
    value: function getLayoutInfo(type, section, index) {
      // Make a space for the dragged item
      var dropTarget = this.collectionView._dropTarget;
      var idx = index;
      if (dropTarget && section === dropTarget.indexPath.section && index >= dropTarget.indexPath.index) {
        idx++;
      }

      var row = Math.floor(idx / this.numColumns);
      var column = idx % this.numColumns;
      var x = this.horizontalSpacing + column * (this.itemSize.width + this.horizontalSpacing);
      var y = this.minSpace.height + row * (this.itemSize.height + this.minSpace.height);

      var layoutInfo = new _LayoutInfo2.default(type, section, index);
      layoutInfo.rect = new _Rect2.default(x, y, this.itemSize.width, this.itemSize.height);
      layoutInfo.estimatedSize = false;

      return layoutInfo;
    }
  }, {
    key: 'getIndexAtPoint',
    value: function getIndexAtPoint(x, y) {
      var itemHeight = this.itemSize.height + this.minSpace.height;
      var itemWidth = this.itemSize.width + this.horizontalSpacing;
      return Math.max(0, Math.min(this.collectionView.getSectionLength(0) - 1, Math.floor(y / itemHeight) * this.numColumns + Math.floor((x - this.horizontalSpacing) / itemWidth)));
    }
  }, {
    key: 'getVisibleLayoutInfos',
    value: function getVisibleLayoutInfos(rect) {
      var numItems = this.collectionView.getSectionLength(0) - 1;
      if (numItems < 0) {
        return [];
      }

      var firstVisibleItem = this.getIndexAtPoint(rect.x, rect.y);
      var lastVisibleItem = this.getIndexAtPoint(rect.maxX, rect.maxY);

      if (this.collectionView._insertionIndex) {
        lastVisibleItem++;
      }

      var res = [];
      for (var index = firstVisibleItem; index <= lastVisibleItem; index++) {
        var layoutInfo = this.getLayoutInfo('item', 0, index);
        if (rect.intersects(layoutInfo.rect)) {
          res.push(layoutInfo);
        }
      }

      return res;
    }
  }, {
    key: 'validate',
    value: function validate() {
      // Compute the number of rows and columns needed to display the content
      var columns = Math.floor(this.collectionView.size.width / (this.minItemSize.width + this.minSpace.width));
      this.numColumns = Math.max(1, Math.min(this.maxColumns, columns));
      this.numRows = Math.ceil(this.collectionView.getSectionLength(0) / this.numColumns);

      // Compute the available width (minus the space between items)
      var width = this.collectionView.size.width - this.minSpace.width * this.numColumns;

      // Compute the item width based on the space available
      var itemWidth = Math.floor(width / this.numColumns);
      itemWidth = Math.max(this.minItemSize.width, Math.min(this.maxItemSize.width, itemWidth));

      // Compute the item height, which is proportional to the item width
      var t = (itemWidth - this.minItemSize.width) / (this.maxItemSize.width - this.minItemSize.width);
      var itemHeight = this.minItemSize.height + (this.maxItemSize.height - this.minItemSize.height) * t;
      itemHeight = Math.max(this.minItemSize.height, Math.min(this.maxItemSize.height, itemHeight));

      this.itemSize = new _Size2.default(itemWidth, itemHeight);

      // Compute the horizontal spacing and content height
      this.horizontalSpacing = Math.floor((this.collectionView.size.width - this.numColumns * this.itemSize.width) / (this.numColumns + 1));
      this.contentHeight = this.minSpace.height + this.numRows * (this.itemSize.height + this.minSpace.height);
    }
  }, {
    key: 'getDropTarget',
    value: function getDropTarget(point) {
      var index = this.getIndexAtPoint(point.x, point.y);
      return new _DragTarget2.default('item', new _IndexPath2.default(0, index));
    }
  }, {
    key: 'getInitialLayoutInfo',
    value: function getInitialLayoutInfo(type, section, index) {
      var initial = _get(GridLayout.prototype.__proto__ || Object.getPrototypeOf(GridLayout.prototype), 'getInitialLayoutInfo', this).call(this, type, section, index);

      initial.opacity = 0;
      initial.transform = 'scale3d(0.8, 0.8, 0.8)';

      return initial;
    }
  }, {
    key: 'getFinalLayoutInfo',
    value: function getFinalLayoutInfo(type, section, index) {
      var final = _get(GridLayout.prototype.__proto__ || Object.getPrototypeOf(GridLayout.prototype), 'getFinalLayoutInfo', this).call(this, type, section, index);

      final.opacity = 0;
      final.transform = 'scale3d(0.8, 0.8, 0.8)';

      return final;
    }
  }, {
    key: 'getContentSize',
    value: function getContentSize() {
      return new _Size2.default(this.collectionView.size.width, this.contentHeight);
    }
  }, {
    key: 'indexPathAbove',
    value: function indexPathAbove(indexPath) {
      return this.collectionView.incrementIndexPath(indexPath, -this.numColumns);
    }
  }, {
    key: 'indexPathBelow',
    value: function indexPathBelow(indexPath) {
      return this.collectionView.incrementIndexPath(indexPath, this.numColumns);
    }
  }, {
    key: 'indexPathLeftOf',
    value: function indexPathLeftOf(indexPath) {
      return this.collectionView.incrementIndexPath(indexPath, -1);
    }
  }, {
    key: 'indexPathRightOf',
    value: function indexPathRightOf(indexPath) {
      return this.collectionView.incrementIndexPath(indexPath, 1);
    }
  }]);

  return GridLayout;
}(_Layout3.default);

exports.default = GridLayout;