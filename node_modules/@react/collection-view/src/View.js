'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var KEY = 0;

var View = function (_EventEmitter) {
  _inherits(View, _EventEmitter);

  function View() {
    _classCallCheck(this, View);

    var _this = _possibleConstructorReturn(this, (View.__proto__ || Object.getPrototypeOf(View)).call(this));

    _this.style = {};
    _this.attrs = {};
    _this.events = new Map();
    _this.classes = new Set();
    _this.children = new Set();
    _this.key = KEY++;
    _this.dirty = true;
    _this.backendView = null;
    return _this;
  }

  _createClass(View, [{
    key: 'onEvent',
    value: function onEvent(event, fn) {
      if (!this.events.has(event)) {
        this.events.set(event, new Set());
      }

      this.events.get(event).add(fn);
    }
  }, {
    key: 'offEvent',
    value: function offEvent(event, fn) {
      if (this.events.has(event)) {
        var handlers = this.events.get(event);
        handlers.delete(fn);
        if (handlers.size === 0) {
          this.events.delete(event);
        }
      }
    }
  }, {
    key: 'setAttribute',
    value: function setAttribute(attribute, value) {
      if (this.attrs[attribute] !== value) {
        this.attrs = Object.assign({}, this.attrs, _defineProperty({}, attribute, value));
        this.flushUpdates();
      }
    }
  }, {
    key: 'removeAttribute',
    value: function removeAttribute(attribute) {
      if (this.attrs[attribute] != null) {
        this.attrs = Object.assign({}, this.attrs);
        delete this.attrs[attribute];
        this.flushUpdates();
      }
    }
  }, {
    key: 'css',
    value: function css() {
      var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.style = Object.assign({}, this.style, style);
      this.flushUpdates();
    }
  }, {
    key: 'addChild',
    value: function addChild(view) {
      this.dirty = true;
      this.children.add(view);
    }
  }, {
    key: 'removeChild',
    value: function removeChild(view) {
      this.dirty = true;
      this.children.delete(view);
    }
  }, {
    key: 'replaceChildren',
    value: function replaceChildren(view) {
      this.dirty = true;
      this.children.clear();
      this.children.add(view);
    }
  }, {
    key: 'addClass',
    value: function addClass() {
      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = className.split(' ')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var name = _step.value;

          this.classes.add(name);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.flushUpdates();
    }
  }, {
    key: 'removeClass',
    value: function removeClass() {
      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = className.split(' ')[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var name = _step2.value;

          this.classes.delete(name);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this.flushUpdates();
    }
  }, {
    key: 'getClassName',
    value: function getClassName() {
      return Array.from(this.classes).join(' ');
    }
  }, {
    key: 'renderBackendView',
    value: function renderBackendView(backend) {
      if (!this.backendView) {
        this.backendView = backend.createView(this);
      }

      this._updateChildren();
      return this.backendView.render(backend);
    }
  }, {
    key: 'renderChildren',
    value: function renderChildren(context) {
      // Do nothing by default
    }
  }, {
    key: '_updateChildren',
    value: function _updateChildren() {
      if (this.backendView && this.dirty) {
        this.renderChildren(this.backendView.getRenderContext());
      }
    }
  }, {
    key: 'flushUpdates',
    value: function flushUpdates(fn) {
      this.dirty = true;

      if (this.backendView) {
        this._updateChildren();
        this.backendView.flushUpdates(fn);
      } else if (fn) {
        // The view is not mounted anywhere yet, but we should
        // still call the callback. Mostly for testing.
        setTimeout(fn, 0);
      }
    }
  }, {
    key: 'forceStyleUpdate',
    value: function forceStyleUpdate() {
      if (this.backendView) {
        this.backendView.forceStyleUpdate();
      }
    }
  }, {
    key: 'getRect',
    value: function getRect() {
      return this.backendView.getRect();
    }
  }, {
    key: 'getSize',
    value: function getSize() {
      return this.backendView.getSize();
    }
  }, {
    key: 'getDOMNode',
    value: function getDOMNode() {
      return this.backendView.getDOMNode();
    }
  }, {
    key: 'triggerEvent',
    value: function triggerEvent(event) {
      if (this.backendView) {
        this.backendView.triggerEvent(event);
      }
    }

    /**
     * Sets focus to backendView DOM element if it is focusable.
     */

  }, {
    key: 'focus',
    value: function focus() {
      var node = this.getDOMNode();

      if (node && typeof node.focus === 'function') {
        node.focus();
      }
    }
  }]);

  return View;
}(_events.EventEmitter);

exports.default = View;