'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DragTarget = require('./DragTarget');

var _DragTarget2 = _interopRequireDefault(_DragTarget);

var _IndexPath = require('./IndexPath');

var _IndexPath2 = _interopRequireDefault(_IndexPath);

var _Layout2 = require('./Layout');

var _Layout3 = _interopRequireDefault(_Layout2);

var _LayoutInfo = require('./LayoutInfo');

var _LayoutInfo2 = _interopRequireDefault(_LayoutInfo);

var _Rect = require('./Rect');

var _Rect2 = _interopRequireDefault(_Rect);

var _Size = require('./Size');

var _Size2 = _interopRequireDefault(_Size);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MARGIN = 20;
var SECTION_SPACING = 20;
var SECTION_HEADER_HEIGHT = 50;
var DRAG_SPACING = 100;
var ACTIVE_USER_WIDTH = 140;
var SMALL_ACTIVE_USER_WIDTH = 36;
var MIN_SECTION_WIDTH = 260;
var FOOTER_HEIGHT = 45;
var ELEMENT_MARGIN = 6;

var StackLayout = function (_Layout) {
  _inherits(StackLayout, _Layout);

  function StackLayout() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, StackLayout);

    var _this = _possibleConstructorReturn(this, (StackLayout.__proto__ || Object.getPrototypeOf(StackLayout)).call(this));

    _this.layoutInfo = [];
    _this.headers = [];
    _this.footers = [];
    _this.activeUsers = [];
    _this.showActiveSessions = options.showActiveSessions || false;
    _this.showHeaders = options.showHeaders !== false;
    _this.showFooters = options.showFooters || false;
    _this.elementSpacing = options.elementSpacing || 0;
    _this.dragSpacing = options.dragSpacing != null ? options.dragSpacing : DRAG_SPACING;
    return _this;
  }

  _createClass(StackLayout, [{
    key: 'getLayoutInfo',
    value: function getLayoutInfo(type, section, index) {
      if (type === 'item') {
        return this.layoutInfo[section] && this.layoutInfo[section][index];
      }

      if (type === 'activeUsers') {
        return this.activeUsers[section] && this.activeUsers[section][index];
      }

      if (type === 'header') {
        return this.headers[section];
      }

      if (type === 'footer') {
        return this.footers[section];
      }
    }
  }, {
    key: 'validate',
    value: function validate(invalidationContext) {
      var oldLayoutInfo = this.layoutInfo;

      this.layoutInfo = [];
      this.headers = [];
      this.footers = [];
      this.activeUsers = [];

      var delegate = this.collectionView.delegate;
      var offset = this.showHeaders ? MARGIN : 0;

      var dropTarget = this.collectionView._dropTarget;

      // TODO: faster algorithm using invalidIndices...
      var numSections = this.collectionView.getNumberOfSections();
      for (var sectionIndex = 0; sectionIndex < numSections; sectionIndex++) {
        var sectionLength = this.collectionView.getSectionLength(sectionIndex);

        if (!this.layoutInfo[sectionIndex]) {
          this.layoutInfo[sectionIndex] = [];
        }

        if (this.showActiveSessions && !this.activeUsers[sectionIndex]) {
          this.activeUsers[sectionIndex] = [];
        }

        if (sectionIndex > 0) {
          offset += SECTION_SPACING;
        }

        if (dropTarget && dropTarget.type === 'section' && dropTarget.indexPath.section === sectionIndex) {
          offset += this.dragSpacing;
        }

        var header = null;
        var sectionStart = offset;
        var lmargin = this.showHeaders ? MARGIN : 0;
        var rmargin = 0;
        if (this.showActiveSessions) {
          rmargin = ACTIVE_USER_WIDTH;
        } else if (this.showHeaders) {
          rmargin = MARGIN;
        }
        var postWidth = this.collectionView.size.width - lmargin - rmargin;
        if (this.showHeaders && postWidth < MIN_SECTION_WIDTH) {
          if (this.showActiveSessions) {
            rmargin = SMALL_ACTIVE_USER_WIDTH;
          }

          postWidth = Math.max(MIN_SECTION_WIDTH, this.collectionView.size.width - lmargin - rmargin);
        }

        // Post background view
        if (this.showHeaders) {
          header = new _LayoutInfo2.default('header', sectionIndex);
          header.rect = new _Rect2.default(MARGIN, offset, postWidth, SECTION_HEADER_HEIGHT);
          header.zIndex = -1;
          this.headers[sectionIndex] = header;

          offset += SECTION_HEADER_HEIGHT;
        }

        var elementMargin = this.showHeaders ? ELEMENT_MARGIN : 0;

        for (var index = 0; index < sectionLength; index++) {
          if (dropTarget && dropTarget.type === 'item' && dropTarget.indexPath.section === sectionIndex && dropTarget.indexPath.index === index) {
            offset += this.dragSpacing;
          }

          if (index > 0) {
            offset += this.elementSpacing;
          }

          // Use the last (non-estimated) height if possible
          var old = oldLayoutInfo[sectionIndex] && oldLayoutInfo[sectionIndex][index];
          var height = old ? old.rect.height : delegate.estimateSize(this.collectionView.getItem(sectionIndex, index)).height;

          // Create the layout info for the content view
          var layoutInfo = new _LayoutInfo2.default('item', sectionIndex, index);
          layoutInfo.rect = new _Rect2.default(lmargin + elementMargin, offset, postWidth - elementMargin * 2, height);
          layoutInfo.estimatedSize = invalidationContext.sizeChanged || (old ? old.estimatedSize : true);
          this.layoutInfo[sectionIndex][index] = layoutInfo;

          // Create an extra view to show active sessions for an element if needed
          if (this.showActiveSessions) {
            var activeUsers = activeUsers = new _LayoutInfo2.default('activeUsers', sectionIndex, index);
            activeUsers.rect = new _Rect2.default(lmargin + postWidth, layoutInfo.rect.y, rmargin, layoutInfo.rect.height);
            this.activeUsers[sectionIndex][index] = activeUsers;
          }

          if (layoutInfo.estimatedSize && !invalidationContext.contentChanged) {
            this.updateItemSize(new _IndexPath2.default(sectionIndex, index));
          }

          offset += layoutInfo.rect.height;
        }

        // Add space at the bottom of the section if the index is past the end
        if (dropTarget && dropTarget.type === 'item' && dropTarget.indexPath.section === sectionIndex && dropTarget.indexPath.index === sectionLength) {
          offset += this.dragSpacing;
        }

        if (this.showHeaders) {
          offset += MARGIN;
        }

        if (this.showFooters) {
          var footer = new _LayoutInfo2.default('footer', sectionIndex);
          footer.rect = new _Rect2.default(MARGIN, offset, postWidth, FOOTER_HEIGHT);
          footer.zIndex = 2;
          this.footers[sectionIndex] = footer;

          offset += FOOTER_HEIGHT;
        }

        if (header) {
          header.rect.height = offset - sectionStart;
        }
      }

      this.contentHeight = offset + (this.showHeaders ? MARGIN : 0);
    }
  }, {
    key: 'getVisibleLayoutInfos',
    value: function getVisibleLayoutInfos(rect) {
      var res = [];

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.headers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var header = _step.value;

          if (header.rect.intersects(rect)) {
            res.push(header);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.footers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var footer = _step2.value;

          if (footer.rect.intersects(rect)) {
            res.push(footer);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this.layoutInfo[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _section = _step3.value;
          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;

          try {
            for (var _iterator6 = _section[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var _layoutInfo = _step6.value;

              if (_layoutInfo.rect.intersects(rect)) {
                res.push(_layoutInfo);
              }
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6.return) {
                _iterator6.return();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      if (this.showActiveSessions) {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = this.activeUsers[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var section = _step4.value;
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
              for (var _iterator5 = section[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                var layoutInfo = _step5.value;

                if (layoutInfo.rect.intersects(rect)) {
                  res.push(layoutInfo);
                }
              }
            } catch (err) {
              _didIteratorError5 = true;
              _iteratorError5 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion5 && _iterator5.return) {
                  _iterator5.return();
                }
              } finally {
                if (_didIteratorError5) {
                  throw _iteratorError5;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }

      return res;
    }
  }, {
    key: 'updateItemSize',
    value: function updateItemSize(indexPath) {
      var section = indexPath.section,
          index = indexPath.index;

      var view = this.collectionView.getItemView(section, index);
      if (!view) {
        return false;
      }

      var layoutInfo = this.layoutInfo[section][index];
      var size = view.getSize();

      if (size.height !== layoutInfo.rect.height) {
        layoutInfo.rect.height = size.height;
        layoutInfo.estimatedSize = view.estimatedSize || false;

        if (this.showActiveSessions) {
          this.activeUsers[section][index].rect.height = size.height;
        }

        return true;
      }

      return false;
    }
  }, {
    key: 'findGap',
    value: function findGap(point, layoutInfos) {
      if (!layoutInfos.length) {
        return 0;
      }

      var low = 0;
      var high = layoutInfos.length - 1;

      if (point.y < layoutInfos[0].rect.y) {
        return 0;
      }

      if (point.y > layoutInfos[high].rect.maxY) {
        return layoutInfos.length;
      }

      while (low < high) {
        var mid = low + high >> 1;
        var header = layoutInfos[mid];
        var next = layoutInfos[mid + 1];

        if (point.y < header.rect.maxY) {
          high = mid;
        } else if (point.y > next.rect.y) {
          low = mid + 1;
        } else {
          return mid + 1;
        }
      }

      return null;
    }
  }, {
    key: 'sectionGapAtPoint',
    value: function sectionGapAtPoint(point) {
      if (this.showHeaders) {
        return this.findGap(point, this.headers);
      }
    }
  }, {
    key: 'gapAtPoint',
    value: function gapAtPoint(point) {
      var rmargin = this.showActiveSessions ? ACTIVE_USER_WIDTH : MARGIN;
      if (point.x < MARGIN || point.x > this.collectionView.size.width - rmargin) {
        return null;
      }

      var visible = this.getVisibleLayoutInfos(new _Rect2.default(point.x, point.y, 1, 1));
      if (visible.length === 0) {
        var section = this.sectionGapAtPoint(point);
        if (section != null) {
          return new _IndexPath2.default(section);
        }
      }

      if (visible.length === 1 && visible[0].type === 'header') {
        if (point.y < visible[0].rect.y + 30) {
          return null;
        }

        var _section2 = visible[0].section;
        var index = this.findGap(point, this.layoutInfo[_section2]);
        if (index != null) {
          return new _IndexPath2.default(_section2, index);
        }
      }

      return null;
    }
  }, {
    key: 'getDragTarget',
    value: function getDragTarget(point) {
      var visible = this.getVisibleLayoutInfos(new _Rect2.default(point.x, point.y, 1, 1));
      if (visible.length === 0) {
        return null;
      }

      visible.sort(function (a, b) {
        return b.zIndex - a.zIndex;
      });

      var indexPath = new _IndexPath2.default(visible[0].section, visible[0].index);
      var type = visible[0].type === 'item' ? 'item' : 'section';
      return new _DragTarget2.default(type, indexPath);
    }
  }, {
    key: 'getDropTarget',
    value: function getDropTarget(point) {
      var sectionDrag = this.collectionView._dragTarget && this.collectionView._dragTarget.type === 'section';
      if (sectionDrag) {
        var visible = this.getVisibleLayoutInfos(new _Rect2.default(point.x, point.y, 1, 1));
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
          for (var _iterator7 = visible[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var _layoutInfo2 = _step7.value;

            if (_layoutInfo2.type === 'header') {
              return new _DragTarget2.default('section', new _IndexPath2.default(_layoutInfo2.section, 0));
            }
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7.return) {
              _iterator7.return();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }
      }

      var gap = this.sectionGapAtPoint(point);
      if (gap != null) {
        return new _DragTarget2.default('section', new _IndexPath2.default(gap, 0));
      }

      if (sectionDrag) {
        return this._dropTarget;
      }

      var indexPath = this.collectionView.indexPathAtPoint(point);
      if (!indexPath) {
        // If we're not showing headers, there should be only 1 section.
        // Find a gap between items in that section.
        if (!this.showHeaders && this.layoutInfo.length > 0) {
          var _gap = this.findGap(point, this.layoutInfo[0]);
          if (_gap != null) {
            return new _DragTarget2.default('item', new _IndexPath2.default(0, _gap));
          }
        }

        return this._dropTarget;
      }

      // Increment index path if past the center
      var layoutInfo = this.getLayoutInfo('item', indexPath.section, indexPath.index);
      var rowY = point.y - layoutInfo.rect.y;
      if (rowY > layoutInfo.rect.height / 2) {
        indexPath.index++;
      }

      this._dropTarget = new _DragTarget2.default('item', indexPath);
      return this._dropTarget;
    }
  }, {
    key: 'itemInserted',
    value: function itemInserted(indexPath) {
      this.layoutInfo[indexPath.section].splice(indexPath.index, 0, null);
    }
  }, {
    key: 'itemRemoved',
    value: function itemRemoved(indexPath) {
      this.layoutInfo[indexPath.section].splice(indexPath.index, 1);
    }
  }, {
    key: 'itemMoved',
    value: function itemMoved(from, to) {
      var layoutInfo = this.layoutInfo[from.section].splice(from.index, 1)[0];
      this.layoutInfo[to.section].splice(to.index, 0, layoutInfo);
    }
  }, {
    key: 'itemReplaced',
    value: function itemReplaced(indexPath) {
      this.layoutInfo[indexPath.section][indexPath.index] = null;
    }
  }, {
    key: 'sectionInserted',
    value: function sectionInserted(section) {
      this.layoutInfo.splice(section, 0, []);
    }
  }, {
    key: 'sectionRemoved',
    value: function sectionRemoved(section) {
      this.layoutInfo.splice(section, 1);
    }
  }, {
    key: 'sectionMoved',
    value: function sectionMoved(fromSection, toSection) {
      var section = this.layoutInfo.splice(fromSection, 1)[0];
      this.layoutInfo.splice(toSection, 0, section);
    }
  }, {
    key: 'sectionReplaced',
    value: function sectionReplaced(section) {
      this.layoutInfo[section] = [];
    }
  }, {
    key: 'getInitialLayoutInfo',
    value: function getInitialLayoutInfo(type, section, index) {
      var initial = _get(StackLayout.prototype.__proto__ || Object.getPrototypeOf(StackLayout.prototype), 'getInitialLayoutInfo', this).call(this, type, section, index);

      initial.opacity = 0;
      initial.transform = 'scale3d(0.8, 0.8, 0.8)';

      return initial;
    }
  }, {
    key: 'getContentSize',
    value: function getContentSize() {
      return new _Size2.default(this.collectionView.size.width, this.contentHeight);
    }
  }, {
    key: 'getFinalLayoutInfo',
    value: function getFinalLayoutInfo(type, section, index) {
      var final = _get(StackLayout.prototype.__proto__ || Object.getPrototypeOf(StackLayout.prototype), 'getFinalLayoutInfo', this).call(this, type, section, index);

      final.opacity = 0;
      final.transform = 'scale3d(0.8, 0.8, 0.8)';

      return final;
    }
  }, {
    key: 'indexPathAbove',
    value: function indexPathAbove(indexPath) {
      return this.collectionView.incrementIndexPath(indexPath, -1);
    }
  }, {
    key: 'indexPathBelow',
    value: function indexPathBelow(indexPath) {
      return this.collectionView.incrementIndexPath(indexPath, 1);
    }
  }]);

  return StackLayout;
}(_Layout3.default);

exports.default = StackLayout;