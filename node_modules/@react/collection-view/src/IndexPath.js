"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * An IndexPath stores a path to an item in a two level nested array.
 */
var IndexPath = function () {
  /**
   * Creates a new IndexPath
   * @param {number} section an index in the outer array
   * @param {number} index an index in the inner array
   */
  function IndexPath(section, index) {
    _classCallCheck(this, IndexPath);

    /**
     * An index in the outer array
     * @type {number}
     */
    this.section = section;

    /**
     * An index in the inner array
     * @type {number}
     */
    this.index = index;
  }

  /**
   * Returns whether another IndexPath is equal to this one
   * @param {IndexPath} other the IndexPath to compare
   * @return {boolean}
   */


  _createClass(IndexPath, [{
    key: "equals",
    value: function equals(other) {
      if (other === this) {
        return true;
      }

      if (!(other instanceof IndexPath)) {
        return false;
      }

      return other.section === this.section && other.index === this.index;
    }

    /**
     * Returns whether this IndexPath is greater than another one
     * @param {IndexPath} other the IndexPath to compare
     * @return {boolean}
     */

  }, {
    key: "isGreaterThan",
    value: function isGreaterThan(other) {
      return this.section > other.section || this.section === other.section && this.index > other.index;
    }

    /**
     * Returns whether this IndexPath is less than another one
     * @param {IndexPath} other the IndexPath to compare
     * @return {boolean}
     */

  }, {
    key: "isLessThan",
    value: function isLessThan(other) {
      return this.section < other.section || this.section === other.section && this.index < other.index;
    }

    /**
     * Returns this IndexPath, or the provided one, whichever is smaller
     * @param {IndexPath} other the IndexPath to compare
     * @return {IndexPath} the smaller IndexPath
     */

  }, {
    key: "min",
    value: function min(other) {
      if (this.isLessThan(other)) {
        return this;
      }

      return other;
    }

    /**
     * Returns this IndexPath, or the provided one, whichever is larger
     * @param {IndexPath} other the IndexPath to compare
     * @return {IndexPath} the larger IndexPath
     */

  }, {
    key: "max",
    value: function max(other) {
      if (this.isGreaterThan(other)) {
        return this;
      }

      return other;
    }

    /**
     * Returns a copy of this IndexPath
     * @return {IndexPath}
     */

  }, {
    key: "copy",
    value: function copy() {
      return new IndexPath(this.section, this.index);
    }
  }]);

  return IndexPath;
}();

exports.default = IndexPath;