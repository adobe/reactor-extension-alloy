"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keyDiff = keyDiff;
exports.difference = difference;
exports.concatIterators = concatIterators;
exports.invert = invert;
exports.compareView = compareView;

var _marked = /*#__PURE__*/regeneratorRuntime.mark(concatIterators);

/**
 * Returns a Set containing the keys in Map a that are not in b.
 * @private
 */
function keyDiff(a, b) {
  var res = new Set();

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = a.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;

      if (!b.has(key)) {
        res.add(key);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return res;
}

/**
 * Returns the key difference between two maps. Returns a set of
 * keys to add to and remove from a to make it equal to b.
 * @private
 */
function difference(a, b) {
  var toRemove = keyDiff(a, b);
  var toAdd = keyDiff(b, a);
  return { toRemove: toRemove, toAdd: toAdd };
}

/**
 * Returns an iterator that yields the items in all of the given iterators.
 * @private
 */
function concatIterators() {
  for (var _len = arguments.length, iterators = Array(_len), _key = 0; _key < _len; _key++) {
    iterators[_key] = arguments[_key];
  }

  var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, iterator;

  return regeneratorRuntime.wrap(function concatIterators$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _iteratorNormalCompletion2 = true;
          _didIteratorError2 = false;
          _iteratorError2 = undefined;
          _context.prev = 3;
          _iterator2 = iterators[Symbol.iterator]();

        case 5:
          if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
            _context.next = 11;
            break;
          }

          iterator = _step2.value;
          return _context.delegateYield(iterator, "t0", 8);

        case 8:
          _iteratorNormalCompletion2 = true;
          _context.next = 5;
          break;

        case 11:
          _context.next = 17;
          break;

        case 13:
          _context.prev = 13;
          _context.t1 = _context["catch"](3);
          _didIteratorError2 = true;
          _iteratorError2 = _context.t1;

        case 17:
          _context.prev = 17;
          _context.prev = 18;

          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }

        case 20:
          _context.prev = 20;

          if (!_didIteratorError2) {
            _context.next = 23;
            break;
          }

          throw _iteratorError2;

        case 23:
          return _context.finish(20);

        case 24:
          return _context.finish(17);

        case 25:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this, [[3, 13, 17, 25], [18,, 20, 24]]);
}

/**
 * Inverts the keys and values of an object.
 * @private
 */
function invert(object) {
  var res = {};
  for (var key in object) {
    res[object[key]] = key;
  }

  return res;
}

/**
 * Array sort views based on section and item index.
 * @private
 */
function compareView(a, b) {
  return a.layoutInfo.section - b.layoutInfo.section || a.layoutInfo.index - b.layoutInfo.index;
}