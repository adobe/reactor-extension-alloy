"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Instances of this lightweight class are created by {@link Layout} subclasses
 * to represent each view in the {@link CollectionView}. LayoutInfo objects describe 
 * various properties of a view, such as its position and size, and style information.
 * The collection view uses this information when creating actual views to display.
 */
var LayoutInfo = function () {
  /**
   * @param {string} type - A string representing the view type. Should be `'item'` for item views. 
                            Other types are used by supplementary views.
   * @param {number} section - The section index this view is inside. Can be `null` for global views,
                               such as global headers or footers.
   * @param {number} index - The index of this view within the section. Can be `null` for global views 
                             or section-level views such as section headers or footers.
   */
  function LayoutInfo(type, section, index) {
    _classCallCheck(this, LayoutInfo);

    /**
     * A string representing the view type. Should be `'item'` for item views.
     * Other types are used by supplementary views.
     * @type {string}
     */
    this.type = type;

    /**
     * The section index this view is inside. Can be `null` for global views,
     * such as global headers or footers.
     * @type {number}
     */
    this.section = section;

    /**
     * The index of this view within the section. Can be `null` for global views
     * or section-level views such as section headers or footers.
     * @type {number}
     */
    this.index = index;

    /**
     * The rectangle describing the size and position of this view.
     * @type {Rect}
     */
    this.rect = null;

    /**
     * Whether the size is estimated. `false` by default.
     */
    this.estimatedSize = false;

    /**
     * The view's opacity. 1 by default.
     */
    this.opacity = 1;

    /**
     * A CSS transform string to apply to the view. `null` by default.
     * @type {string}
     */
    this.transform = null;

    /**
     * The z-index of the view. 0 by default.
     */
    this.zIndex = 0;
  }

  /**
   * Returns a copy of the LayoutInfo.
   * @return {LayoutInfo}
   */


  _createClass(LayoutInfo, [{
    key: "copy",
    value: function copy() {
      var res = new LayoutInfo(this.type, this.section, this.index);
      res.rect = this.rect.copy();
      res.estimatedSize = this.estimatedSize;
      res.opacity = this.opacity;
      res.transform = this.transform;
      return res;
    }
  }]);

  return LayoutInfo;
}();

exports.default = LayoutInfo;