'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DOMView2 = require('../src/dom/DOMView');

var _DOMView3 = _interopRequireDefault(_DOMView2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PASSIVE_EVENTS = {
  wheel: true,
  mousewheel: true
};

var ReactView = function (_DOMView) {
  _inherits(ReactView, _DOMView);

  function ReactView(view) {
    _classCallCheck(this, ReactView);

    var _this = _possibleConstructorReturn(this, (ReactView.__proto__ || Object.getPrototypeOf(ReactView)).call(this, view));

    _this.component = null;
    return _this;
  }

  _createClass(ReactView, [{
    key: 'getRenderContext',
    value: function getRenderContext() {
      return this;
    }
  }, {
    key: 'getEventHandlers',
    value: function getEventHandlers() {
      var events = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        var _loop = function _loop() {
          var _step$value = _slicedToArray(_step.value, 2),
              event = _step$value[0],
              handlers = _step$value[1];

          // Workaround for wheel events being passive by default in Chrome 73. See: https://developers.google.com/web/updates/2019/02/scrolling-intervention
          if (PASSIVE_EVENTS[event]) {
            return 'continue';
          }

          var key = 'on' + event[0].toUpperCase() + event.slice(1);
          events[key] = function (event) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = handlers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var handler = _step2.value;

                handler(event);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          };
        };

        for (var _iterator = this.view.events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _ret = _loop();

          if (_ret === 'continue') continue;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return events;
    }
  }, {
    key: 'flushUpdates',
    value: function flushUpdates(fn) {
      if (this.component) {
        this.component.forceUpdate(fn);
      }
    }
  }, {
    key: 'render',
    value: function render(backend) {
      return _react2.default.createElement(View, { reactView: this, backend: backend });
    }
  }, {
    key: 'getDOMNode',
    value: function getDOMNode() {
      if (this.component) {
        return _reactDom2.default.findDOMNode(this.component);
      }

      var container = document.createElement('div');
      _reactDom2.default.render(this.render(), container);
      var res = container.firstChild;
      _reactDom2.default.unmountComponentAtNode(container);
      return res;
    }
  }]);

  return ReactView;
}(_DOMView3.default);

exports.default = ReactView;

var View = function (_React$Component) {
  _inherits(View, _React$Component);

  function View() {
    _classCallCheck(this, View);

    return _possibleConstructorReturn(this, (View.__proto__ || Object.getPrototypeOf(View)).apply(this, arguments));
  }

  _createClass(View, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(props) {
      return props.reactView.view.dirty;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var reactView = this.props.reactView;
      var view = reactView.view;

      var res = _react2.default.createElement(
        'div',
        _extends({}, view.attrs, reactView.getEventHandlers(), { style: view.style, className: view.getClassName() }),
        Array.from(view.children).map(function (child, index) {
          return _react2.default.cloneElement(child.renderBackendView ? child.renderBackendView(_this3.props.backend) : child, { key: child.key || index });
        })
      );

      view.dirty = false;
      return res;
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.props.reactView.component = this;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var reactView = this.props.reactView;
      var view = reactView.view;
      for (var event in PASSIVE_EVENTS) {
        var _handlers = view.events.get(event) || [];
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = _handlers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var handler = _step3.value;

            view.getDOMNode().addEventListener(event, handler);
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var reactView = this.props.reactView;
      var view = reactView.view;
      for (var event in PASSIVE_EVENTS) {
        var _handlers2 = view.events.get(event) || [];
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = _handlers2[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var handler = _step4.value;

            view.getDOMNode().removeEventListener(event, handler);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }
      reactView.component = null;
    }
  }]);

  return View;
}(_react2.default.Component);