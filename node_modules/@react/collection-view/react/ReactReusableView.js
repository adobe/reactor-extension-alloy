'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _src = require('../src');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactReusableView = function (_ReusableView) {
  _inherits(ReactReusableView, _ReusableView);

  function ReactReusableView(type) {
    _classCallCheck(this, ReactReusableView);

    var _this = _possibleConstructorReturn(this, (ReactReusableView.__proto__ || Object.getPrototypeOf(ReactReusableView)).call(this));

    _this.type = type;
    _this.states = {};
    _this.addClass(type);
    return _this;
  }

  _createClass(ReactReusableView, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var element = void 0;

      if (this.layoutInfo.type === 'item') {
        element = this.collectionView.delegate.renderItemView(this.type, this.content);
      } else {
        element = this.collectionView.delegate.renderSupplementaryView(this.layoutInfo.type, this.layoutInfo.section, this.layoutInfo.index);
      }

      var props = {};
      if (typeof element.type !== 'string') {
        props = Object.assign({
          onLoad: this.onLoad.bind(this, this.content),
          onResize: this.onLoad.bind(this, this.content),
          collectionView: this.collectionView,
          layoutInfo: this.layoutInfo,
          reusableView: this,
          ref: function ref(component) {
            return _this2.component = component;
          }
        }, this.states);
      }

      element = _react2.default.cloneElement(element, props);
      this.replaceChildren(element);
    }
  }, {
    key: 'onLoad',
    value: function onLoad(content) {
      if (this.content === content && this.collectionView) {
        var indexPath = this.collectionView.indexPathForView(this);
        if (indexPath) {
          this.collectionView.updateItemSize(indexPath);
        }
      }
    }
  }, {
    key: 'applyLayoutInfo',
    value: function applyLayoutInfo(layoutInfo) {
      if (this.component && typeof this.component.componentWillLayout === 'function') {
        this.component.componentWillLayout(layoutInfo);
      }

      _get(ReactReusableView.prototype.__proto__ || Object.getPrototypeOf(ReactReusableView.prototype), 'applyLayoutInfo', this).call(this, layoutInfo);
    }
  }, {
    key: 'addState',
    value: function addState(state) {
      if (!this.states[state]) {
        this.states[state] = true;
        this.contentChanged = true;
      }

      _get(ReactReusableView.prototype.__proto__ || Object.getPrototypeOf(ReactReusableView.prototype), 'addState', this).call(this, state);
    }
  }, {
    key: 'removeState',
    value: function removeState(state) {
      if (this.states[state]) {
        delete this.states[state];
        this.contentChanged = true;
      }

      _get(ReactReusableView.prototype.__proto__ || Object.getPrototypeOf(ReactReusableView.prototype), 'removeState', this).call(this, state);
    }

    /**
     * Sets focus to rendered component element of reusable view.
     */

  }, {
    key: 'focus',
    value: function focus() {
      if (this.component && typeof this.component.focus === 'function') {
        this.component.focus();
      } else {
        _get(ReactReusableView.prototype.__proto__ || Object.getPrototypeOf(ReactReusableView.prototype), 'focus', this).call(this);
      }
    }
  }]);

  return ReactReusableView;
}(_src.ReusableView);

exports.default = ReactReusableView;