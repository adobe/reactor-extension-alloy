"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _events = require("../../utils/events");

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _FocusManager = _interopRequireDefault(require("../../utils/FocusManager"));

var _focusRing = _interopRequireDefault(require("../../utils/focusRing"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Tag = _interopRequireDefault(require("./Tag"));

var _class, _class2, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/tags/index.css");

  require("../../spectrum-css/tags/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/tags/index-lg.css");
} else {
  require("../../spectrum-css/tags/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/tags/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/tags/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/tags/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/tags/multiStops/darkest.css");

/**
 * A TagList displays a list of Tags
 */
var TAGLIST_SELECTOR = '[role=row]:not([aria-disabled])';
var TAGLIST_SELECTED_SELECTOR = TAGLIST_SELECTOR + '[aria-selected=true]';

var TagList = (0, _convertUnsafeMethod["default"])(_class = (0, _focusRing["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TagList, _React$Component);

  function TagList() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TagList);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TagList)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      selectedIndex: null,
      focused: false
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (e) {
      _this.setState({
        focused: true
      });

      if (_this.props.onFocus) {
        _this.props.onFocus(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleBlur", function (e) {
      _this.setState({
        focused: false
      });

      if (_this.props.onBlur) {
        _this.props.onBlur(e);
      }
    });

    return _this;
  }

  _createClass(TagList, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if ('selectedIndex' in nextProps) {
        this.setState({
          selectedIndex: nextProps.selectedIndex
        });
      }
    }
  }, {
    key: "onClickItem",
    value: function onClickItem(selectedIndex, e) {
      this.setSelectedIndex(selectedIndex, e);
    }
  }, {
    key: "setSelectedIndex",
    value: function setSelectedIndex(selectedIndex, e) {
      var lastSelectedIndex = this.state.selectedIndex; // If selectedIndex is defined on props then this is a controlled component and we shouldn't
      // change our own state.

      if (!('selectedIndex' in this.props)) {
        this.setState({
          selectedIndex: selectedIndex
        });
      }

      if (lastSelectedIndex !== selectedIndex && this.props.onChange) {
        this.props.onChange(selectedIndex, e);
      }
    }
  }, {
    key: "baseChildProps",
    value: function baseChildProps(index) {
      var child = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        props: {}
      };
      var _this$props = this.props,
          readOnly = _this$props.readOnly,
          onClose = _this$props.onClose,
          disabled = _this$props.disabled,
          manageTabIndex = _this$props.manageTabIndex;
      var _this$state = this.state,
          selectedIndex = _this$state.selectedIndex,
          focused = _this$state.focused;
      var tabIndex = selectedIndex === index || !focused && (selectedIndex === null || manageTabIndex === false) ? 0 : -1;
      return {
        key: index,
        selected: !disabled && focused && selectedIndex === index,
        tabIndex: !disabled ? tabIndex : null,
        closable: !readOnly,
        disabled: disabled,
        onClick: (0, _events.chain)(this.getChildOnClick(index), child.props.onClick),
        onFocus: (0, _events.chain)(this.getChildOnFocus(index), child.props.onFocus),
        onClose: onClose,
        role: 'gridcell'
      };
    }
  }, {
    key: "getChildOnClick",
    value: function getChildOnClick(index) {
      if (this.props.disabled) {
        return null;
      }

      var tagListOnClick = this.onClickItem.bind(this, index);
      return function (e) {
        tagListOnClick(e);
      };
    }
  }, {
    key: "getChildOnFocus",
    value: function getChildOnFocus(index) {
      var _this2 = this;

      if (this.props.disabled) {
        return null;
      }

      return function (e) {
        _this2.setSelectedIndex(index, e);

        _this2.handleFocus;
      };
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var _this3 = this;

      if (this.props.values) {
        return this.renderValues();
      }

      return _react["default"].Children.map(this.props.children, function (child, index) {
        return _react["default"].cloneElement(child, _this3.baseChildProps(index, child));
      });
    }
  }, {
    key: "renderValues",
    value: function renderValues() {
      var _this4 = this;

      var values = this.props.values;
      return values.map(function (value, index) {
        return _react["default"].createElement(_Tag["default"], _extends({
          value: value
        }, _this4.baseChildProps(index)), value);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          name = _this$props2.name,
          readOnly = _this$props2.readOnly,
          disabled = _this$props2.disabled,
          invalid = _this$props2.invalid,
          manageTabIndex = _this$props2.manageTabIndex,
          otherProps = _objectWithoutProperties(_this$props2, ["className", "name", "readOnly", "disabled", "invalid", "manageTabIndex"]);

      var focused = this.state.focused;
      var renderedChildren = this.renderChildren();
      return _react["default"].createElement(_FocusManager["default"], {
        itemSelector: TAGLIST_SELECTOR,
        selectedItemSelector: TAGLIST_SELECTED_SELECTOR,
        orientation: "horizontal",
        manageTabIndex: focused || manageTabIndex
      }, _react["default"].createElement("div", _extends({}, (0, _filterDOMProps["default"])(otherProps), {
        className: (0, _classnames["default"])('spectrum-Tags', {
          'is-disabled': disabled
        }, className),
        name: name,
        readOnly: readOnly,
        disabled: disabled,
        role: !renderedChildren || !renderedChildren.length ? 'group' : 'grid',
        "aria-atomic": "false",
        "aria-relevant": "additions",
        "aria-live": focused ? 'polite' : 'off',
        "aria-disabled": disabled,
        "aria-invalid": invalid,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur
      }), renderedChildren));
    }
  }]);

  return TagList;
}(_react["default"].Component), _defineProperty(_class2, "displayName", 'TagList'), _defineProperty(_class2, "propTypes", {
  /** Custom CSS class to add to the tag list */
  className: _propTypes["default"].string,

  /** Whether to disable the tag list */
  disabled: _propTypes["default"].bool,

  /** Name of tag list **/
  name: _propTypes["default"].string,

  /** Function called when focus is taken away from the tag list */
  onBlur: _propTypes["default"].func,

  /** Function called when a tag  in the tag list is closed */
  onClose: _propTypes["default"].func,

  /** Function called when focus is put on the tag list */
  onFocus: _propTypes["default"].func,

  /** Whether the tag list can only be read */
  readOnly: _propTypes["default"].bool,

  /** Initial tags in the tag list */
  values: _propTypes["default"].arrayOf(_propTypes["default"].string),

  /** Whether TagList should use roving tabIndex so that only one item can receive focus at a time. */
  manageTabIndex: _propTypes["default"].bool
}), _defineProperty(_class2, "defaultProps", {
  readOnly: false,
  disabled: false,
  manageTabIndex: true
}), _temp)) || _class) || _class;

exports["default"] = TagList;