"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Avatar;

var _classnames = _interopRequireDefault(require("classnames"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/avatar/index.css");

  require("../../spectrum-css/avatar/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/avatar/index-lg.css");
} else {
  require("../../spectrum-css/avatar/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/avatar/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/avatar/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/avatar/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/avatar/multiStops/darkest.css");

function Avatar(_ref) {
  var src = _ref.src,
      alt = _ref.alt,
      disabled = _ref.disabled,
      className = _ref.className,
      otherProps = _objectWithoutProperties(_ref, ["src", "alt", "disabled", "className"]);

  className = (0, _classnames["default"])('spectrum-Avatar', {
    'is-disabled': disabled
  }, className);
  return _react["default"].createElement("img", _extends({}, (0, _filterDOMProps["default"])(otherProps), {
    src: src,
    alt: alt,
    className: className
  }));
}

Avatar.propTypes = {
  /**
   * url of image to load, same that any html <img> tag would accept
   */
  src: _propTypes["default"].string,

  /**
   * alt text to display for screen readers or if the image doesn't load
   */
  alt: _propTypes["default"].string,

  /**
   * Greys out the avatar
   */
  disabled: _propTypes["default"].bool,

  /**
   * String of custom class names to add to the top level dom element of Avatar
   */
  className: _propTypes["default"].string
};
Avatar.defaultProps = {
  alt: ''
};