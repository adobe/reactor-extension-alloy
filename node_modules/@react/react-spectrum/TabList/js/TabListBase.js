"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _FocusManager = _interopRequireDefault(require("../../utils/FocusManager"));

var _focusRing = _interopRequireDefault(require("../../utils/focusRing"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _class, _temp;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TAB_ITEM_SELECTOR = '[role=tab]:not([aria-disabled])';
var TAB_ITEM_SELECTED_SELECTOR = TAB_ITEM_SELECTOR + '[aria-selected=true]';
var NAVIGATION_KEYS = ['PageUp', 'PageDown', 'Home', 'End', 'ArrowUp', 'Up', 'ArrowDown', 'Down', 'ArrowLeft', 'Left', 'ArrowRight', 'Right'];
/**
 * selectedIndex: The index of the StepList that should be selected. When selectedIndex is
 * specified, the component is in a controlled state and a Step can only be selected by changing the
 * selectedIndex prop value. By default, the first Step will be selected.
 *
 * defaultSelectedIndex: The same as selectedIndex except that the component is in an uncontrolled
 * state.
 *
 * onChange: A function that will be called when an Step is selected or deselected.
 * It will be passed the updated selected index.
 *
 * childMappingFunction: allows you to map additional properties for each tab child
 * @private
 */

var TabListBase = (0, _convertUnsafeMethod["default"])(_class = (0, _focusRing["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp =
/*#__PURE__*/
function (_Component) {
  _inherits(TabListBase, _Component);

  function TabListBase() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TabListBase);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TabListBase)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      selectedIndex: TabListBase.getDefaultSelectedIndex(_this.props)
    });

    return _this;
  }

  _createClass(TabListBase, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if ('selectedIndex' in nextProps) {
        this.setState({
          selectedIndex: nextProps.selectedIndex
        });
      }
    }
  }, {
    key: "onClickItem",
    value: function onClickItem(selectedIndex, e) {
      this.setSelectedIndex(selectedIndex, e);
    }
  }, {
    key: "onFocus",
    value: function onFocus(selectedIndex, e) {
      if (this.props.keyboardActivation === 'automatic' && this.isNavigationKeyDown && !this.isMouseDown) {
        this.setSelectedIndex(selectedIndex, e);
      }
    }
  }, {
    key: "onMouseDown",
    value: function onMouseDown(e) {
      this.isMouseDown = true;
      window.addEventListener('mouseup', this.onMouseUp); // ensure Tab receives keyboard focus in Safari

      e.currentTarget.focus();
    }
  }, {
    key: "onMouseUp",
    value: function onMouseUp() {
      this.isMouseDown = false;
      window.removeEventListener('mouseup', this.onMouseUp);
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(selectedIndex, e) {
      switch (e.key) {
        case 'Enter':
        case ' ':
          e.preventDefault();
          this.onClickItem(selectedIndex, e);
          break;

        default:
          this.isNavigationKeyDown = NAVIGATION_KEYS.indexOf(e.key) !== -1;
      }
    }
  }, {
    key: "onKeyUp",
    value: function onKeyUp() {
      this.isNavigationKeyDown = false;
    }
  }, {
    key: "setSelectedIndex",
    value: function setSelectedIndex(selectedIndex, e) {
      var lastSelectedIndex = this.state.selectedIndex; // If selectedIndex is defined on props then this is a controlled component and we shouldn't
      // change our own state.

      if (!('selectedIndex' in this.props)) {
        this.setState({
          selectedIndex: selectedIndex
        });
      }

      if (lastSelectedIndex !== selectedIndex) {
        this.props.onChange(selectedIndex, e);
      }
    }
  }, {
    key: "getChildProps",
    value: function getChildProps(child, index) {
      var selectedIndex = this.state.selectedIndex;
      var selected = +selectedIndex === index;
      var disabled = this.props.disabled ? true : child.props.disabled;
      return _objectSpread({}, this.getMappedChildProps(child, index), {
        selected: selected,
        disabled: disabled,
        tabIndex: selected ? 0 : -1,
        onClick: this.getChildOnClick(child, index),
        onFocus: this.getChildOnFocus(child, index),
        onMouseDown: this.getChildOnMouseDown(child, index),
        onKeyDown: this.getChildOnKeyDown(child, index),
        onKeyUp: this.getChildOnKeyUp(child, index)
      });
    }
  }, {
    key: "getMappedChildProps",
    value: function getMappedChildProps(child, index) {
      var childMappingFunction = this.props.childMappingFunction;

      if (!childMappingFunction) {
        return {};
      }

      return childMappingFunction(this, child, index);
    }
  }, {
    key: "getChildOnClick",
    value: function getChildOnClick(child, index) {
      if (this.props.disabled) {
        return null;
      }

      var tabListOnClick = this.onClickItem.bind(this, index);
      return function (e) {
        if (child.props.onClick) {
          child.props.onClick(index, e);
        }

        tabListOnClick(e);
      };
    }
  }, {
    key: "getChildOnFocus",
    value: function getChildOnFocus(child, index) {
      var _this2 = this;

      if (this.props.disabled) {
        return null;
      }

      return function (e) {
        if (child.props.onFocus) {
          child.props.onFocus(index, e);
        }

        _this2.onFocus(index, e);
      };
    }
  }, {
    key: "getChildOnMouseDown",
    value: function getChildOnMouseDown(child, index) {
      var _this3 = this;

      if (this.props.disabled) {
        return null;
      }

      return function (e) {
        if (child.props.onMouseDown) {
          child.props.onMouseDown(e, index);
        }

        _this3.onMouseDown(e);
      };
    }
  }, {
    key: "getChildOnKeyDown",
    value: function getChildOnKeyDown(child, index) {
      var _this4 = this;

      if (this.props.disabled) {
        return null;
      }

      return function (e) {
        if (child.props.onKeyDown) {
          child.props.onKeyDown(e, index);
        }

        _this4.onKeyDown(index, e);
      };
    }
  }, {
    key: "getChildOnKeyUp",
    value: function getChildOnKeyUp(child, index) {
      var _this5 = this;

      if (this.props.disabled) {
        return null;
      }

      return function (e) {
        if (child.props.onKeyUp) {
          child.props.onKeyUp(e, index);
        }

        _this5.onKeyUp(index, e);
      };
    }
  }, {
    key: "getItems",
    value: function getItems() {
      var _this6 = this;

      var children = this.props.children;
      return _react["default"].Children.toArray(children).map(function (child, index) {
        return child ? _react["default"].cloneElement(child, _this6.getChildProps(child, index)) : null;
      });
    }
  }, {
    key: "cleanProps",
    value: function cleanProps() {
      // todo filterdomprops?
      var otherProps = _extends({}, this.props);

      delete otherProps.autoFocus;
      delete otherProps.defaultSelectedIndex;
      delete otherProps.selectedIndex; // We don't need/want to add onChange to the div because we call it manually when we hear that
      // a tab has been clicked. If we were to add the handler to the div, it would be
      // called every time any input inside a tab is changed.

      delete otherProps.onChange;
      delete otherProps.disabled;
      delete otherProps.childMappingFunction;
      delete otherProps.keyboardActivation; // div element should have aria-orientation rather than orientation

      otherProps['aria-orientation'] = otherProps.orientation;
      delete otherProps.orientation;
      return otherProps;
    }
  }, {
    key: "render",
    value: function render() {
      return _react["default"].createElement(_FocusManager["default"], {
        autoFocus: this.props.autoFocus,
        disabled: this.props.disabled,
        itemSelector: TAB_ITEM_SELECTOR,
        selectedItemSelector: TAB_ITEM_SELECTED_SELECTOR,
        orientation: this.props.orientation === 'vertical' ? 'both' : 'horizontal'
      }, _react["default"].createElement("div", _extends({}, this.cleanProps(), {
        role: "tablist"
      }), this.getItems()));
    }
  }], [{
    key: "getDefaultSelectedIndex",
    value: function getDefaultSelectedIndex(props) {
      if (props.selectedIndex != null) {
        return props.selectedIndex;
      }

      if (props.defaultSelectedIndex != null) {
        return props.defaultSelectedIndex;
      }

      var firstSelected = _react["default"].Children.toArray(props.children).findIndex(function (c) {
        return c && c.props.selected;
      });

      if (firstSelected !== -1) {
        return firstSelected;
      }

      return 0;
    }
  }]);

  return TabListBase;
}(_react.Component), _temp)) || _class) || _class) || _class;

exports["default"] = TabListBase;
TabListBase.propTypes = {
  autoFocus: _propTypes["default"].bool,
  defaultSelectedIndex: _propTypes["default"].number,
  disabled: _propTypes["default"].bool,
  orientation: _propTypes["default"].oneOf(['horizontal', 'vertical']),
  keyboardActivation: _propTypes["default"].oneOf(['automatic', 'manual']),
  onChange: function onChange() {}
};
TabListBase.defaultProps = {
  autoFocus: false,
  defaultSelectedIndex: 0,
  disabled: false,
  orientation: 'horizontal',
  keyboardActivation: 'automatic',
  onChange: function onChange() {}
};
TabListBase.displayName = 'TabListBase';