"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _Select = _interopRequireDefault(require("../../Select"));

var _TabLine = _interopRequireDefault(require("./TabLine"));

require("../style/index.css");

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TabListDropdown = (0, _autobindDecorator["default"])(_class = (_temp =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TabListDropdown, _React$Component);

  function TabListDropdown() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TabListDropdown);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TabListDropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      selectNode: undefined,
      selectedIndex: undefined
    });

    return _this;
  }

  _createClass(TabListDropdown, [{
    key: "setSelectRef",
    value: function setSelectRef(s) {
      this.selectRef = s;
    } // It's useful to have the TabListDropdown be a separate component because the tabline needs a dom node
    // to do its calculations, we can guarantee that in componentDidMount whereas if we move this up
    // a component, it's conditionally rendered and we would need to use componentDidUpdate instead
    // with conditional logic.
    // By storing through setState, we can cause a render.

  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        selectNode: _reactDom["default"].findDOMNode(this.selectRef)
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      // this is purely so that the Tabline re-renders whenever the selection changes
      // quiet Selects change width depending on what has been selected
      // we don't want an infinite loop, so if the index matches, don't set it
      if (prevProps.selectedIndex !== this.props.selectedIndex) {
        // eslint-disable-next-line react/no-did-update-set-state
        this.setState({
          selectedIndex: this.props.selectedIndex
        });
      }
    }
  }, {
    key: "onChange",
    value: function onChange(selectedIndex) {
      this.props.onChange(Number(selectedIndex));
    }
  }, {
    key: "childrenToOptions",
    value: function childrenToOptions() {
      var options = _react["default"].Children.toArray(this.props.children).map(function (child, i) {
        var option = {};
        option.label = child.props.label || child.props.children; // value maps to the tab index, but has to be a string to be a valid select value

        option.value = i.toString();

        if (child.props.disabled) {
          option.disabled = true;
        }

        if (child.props.icon !== undefined) {
          option.icon = child.props.icon;
        }

        return option;
      });

      return options;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          selectedIndex = _this$props.selectedIndex,
          ariaLabelledby = _this$props['aria-labelledby'],
          ariaLabel = _this$props['aria-label'];
      return _react["default"].createElement("div", {
        className: (0, _classnames["default"])('spectrum-Tabs', 'spectrum-Tabs--horizontal', 'react-spectrum-Tabs--dropdown', className)
      }, _react["default"].createElement(_Select["default"], {
        quiet: true,
        flexible: true,
        ref: this.setSelectRef,
        options: this.childrenToOptions(),
        value: selectedIndex.toString(),
        onChange: this.onChange,
        "aria-labelledby": ariaLabelledby,
        "aria-label": ariaLabel
      }), this.state.selectNode && _react["default"].createElement(_TabLine["default"], {
        orientation: "horizontal",
        selectedTab: this.state.selectNode,
        selectedIndex: this.state.selectedIndex
      }));
    }
  }]);

  return TabListDropdown;
}(_react["default"].Component), _temp)) || _class;

exports["default"] = TabListDropdown;