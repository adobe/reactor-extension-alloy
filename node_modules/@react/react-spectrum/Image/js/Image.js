"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _ImageCache = _interopRequireDefault(require("./ImageCache"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

require("../style/index.css");

var _class, _class2, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DEFAULT_STATE = {
  src: '',
  loaded: false,
  isPlaceholder: false
};

var Image = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Image, _React$Component);

  function Image() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Image);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Image)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", DEFAULT_STATE);

    return _this;
  }

  _createClass(Image, [{
    key: "reset",
    value: function reset() {
      this.setState(DEFAULT_STATE);
    }
  }, {
    key: "loadImage",
    value: function loadImage(src, placeholder) {
      var _this2 = this;

      if (!this.props.cache && !this.props.headers) {
        this.setState({
          src: src,
          loaded: false,
          isPlaceholder: false
        });
        return;
      }

      this._src = src;

      var fromCache = _ImageCache["default"].has(src);

      if (_ImageCache["default"].has(placeholder) && !fromCache) {
        this.setState({
          src: _ImageCache["default"].getCached(placeholder),
          loaded: false,
          isPlaceholder: true
        });
      }

      this._loadCallback = function (err, url) {
        // Ignore result if the image src changed while
        // loading, or the component was unmounted.
        if (_this2._src !== src || !_this2.mounted) {
          return;
        } // Handle loading errors


        if (err) {
          return _this2.onError(err);
        } // Update the state. Mark as already loaded if it was from the cache.


        _this2.setState({
          src: url,
          loaded: fromCache,
          isPlaceholder: _this2.state.isPlaceholder && !fromCache
        });
      };

      _ImageCache["default"].get(src, {
        headers: this.props.headers || {}
      }, this._loadCallback);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
      this.loadImage(this.props.src, this.props.placeholder);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _ImageCache["default"].abort(this.props.src, this._loadCallback);

      this.mounted = false;
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      if (props.src !== this.props.src) {
        _ImageCache["default"].abort(this.props.src, this._loadCallback);

        this.reset();
        this.loadImage(props.src, props.placeholder);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.onLoad();
    }
  }, {
    key: "isImageLoaded",
    value: function isImageLoaded() {
      var image = this.imgRef;

      if (!image || !image.complete) {
        return false;
      }

      if (typeof image.naturalWidth !== 'undefined' && image.naturalWidth === 0) {
        return false;
      }

      return true;
    }
  }, {
    key: "onLoad",
    value: function onLoad() {
      var _this3 = this;

      if (this.isImageLoaded()) {
        requestAnimationFrame(function () {
          // Image could have been unmounted or changed between frames, so double check it is still there.
          if (_this3.isImageLoaded()) {
            if (_this3.props.onLoad) {
              _this3.props.onLoad(_this3.imgRef);
            }

            if (!_this3.state.loaded) {
              _this3.setState({
                loaded: true,
                isPlaceholder: false
              });
            }
          }
        });
      }
    }
  }, {
    key: "onError",
    value: function onError(err) {
      if (this.props.onError) {
        this.props.onError(err);
      }

      if (this.state.src) {
        this.reset();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var _this$props = this.props,
          alt = _this$props.alt,
          className = _this$props.className,
          decorative = _this$props.decorative,
          otherProps = _objectWithoutProperties(_this$props, ["alt", "className", "decorative"]);

      var _this$state = this.state,
          loaded = _this$state.loaded,
          isPlaceholder = _this$state.isPlaceholder,
          src = _this$state.src;

      if (decorative) {
        alt = '';
      }

      if (alt == null) {
        console.warn('Neither the `alt` prop or `decorative` were provided to an image. ' + 'Add `alt` text for screen readers, or enable the `decorative` prop to indicate that the image ' + 'is decorative or redundant with displayed text and should not be annouced by screen readers.');
      }

      return _react["default"].createElement("img", _extends({}, (0, _filterDOMProps["default"])(otherProps), {
        className: (0, _classnames["default"])(className, 'react-spectrum-Image', {
          'is-loaded': loaded,
          'is-placeholder': isPlaceholder
        }),
        src: src,
        onLoad: this.onLoad,
        onError: this.onError,
        ref: function ref(r) {
          return _this4.imgRef = r;
        },
        alt: alt
      }));
    }
  }]);

  return Image;
}(_react["default"].Component), _defineProperty(_class2, "propTypes", {
  /** The image url **/
  src: _propTypes["default"].string.isRequired,

  /** Placeholder image to display while the fullsize one is loading, if cached. */
  placeholder: _propTypes["default"].string,

  /** HTTP headers to add to the request for the asset image */
  headers: _propTypes["default"].object,

  /** Whether to use the image cache for the image */
  cache: _propTypes["default"].bool,

  /** Alternate content for screen readers */
  alt: _propTypes["default"].string,

  /** Whether the image is being used for decoration and should not be announced by screen readers */
  decorative: _propTypes["default"].bool,

  /** Load callback triggered when images load */
  onLoad: _propTypes["default"].func
}), _defineProperty(_class2, "defaultProps", {
  cache: false
}), _temp)) || _class) || _class;

exports["default"] = Image;