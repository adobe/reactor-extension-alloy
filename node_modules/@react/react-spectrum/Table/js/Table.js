"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Table;

var _classnames = _interopRequireDefault(require("classnames"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/table/index.css");

  require("../../spectrum-css/table/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/table/index-lg.css");
} else {
  require("../../spectrum-css/table/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/table/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/table/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/table/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/table/multiStops/darkest.css");

/**
 * A table
 */
function Table(_ref) {
  var quiet = _ref.quiet,
      className = _ref.className,
      children = _ref.children,
      otherProps = _objectWithoutProperties(_ref, ["quiet", "className", "children"]);

  return _react["default"].createElement("table", _extends({
    className: (0, _classnames["default"])('spectrum-Table', {
      'spectrum-Table--quiet': quiet
    }, className)
  }, (0, _filterDOMProps["default"])(otherProps)), children);
}

Table.displayName = 'Table';
Table.propTypes = {
  /** Items to display in the Table. Use Tbody, TD, TH, THead, TR, or other elements permitted in a table. */
  children: _propTypes["default"].node,

  /** Whether or not the table should be rendered using a quiet variant. */
  quiet: _propTypes["default"].bool
};