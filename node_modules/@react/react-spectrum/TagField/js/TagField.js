"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _Autocomplete = _interopRequireDefault(require("../../Autocomplete"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _focusRing = require("../../utils/focusRing");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _TagList = require("../../TagList");

var _Textfield = _interopRequireDefault(require("../../Textfield"));

require("../style/index.css");

var _class, _class2, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TagField = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TagField, _React$Component);

  function TagField() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TagField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TagField)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      value: '',
      tags: _this.props.value || [],
      showMenu: false,
      isFocusVisible: false
    });

    return _this;
  }

  _createClass(TagField, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      var _this2 = this;

      if (props.value && props.value !== this.state.value) {
        var deleting = props.value.length < this.state.tags.length;

        var hadFocus = this.taglist && _reactDom["default"].findDOMNode(this).contains(document.activeElement);

        this.setState({
          tags: props.value
        }, function () {
          return hadFocus && _this2.focus(deleting);
        });
      }
    }
  }, {
    key: "onTextfieldChange",
    value: function onTextfieldChange(value) {
      this.setState({
        value: value
      });
    }
  }, {
    key: "onSelect",
    value: function onSelect(value) {
      var coercedValue = value.label || value;

      var areDuplicates = function areDuplicates(a, b) {
        return a === b || a.label && b.label && a.label === b.label;
      };

      if (!coercedValue || !this.props.allowDuplicates && this.state.tags.some(function (t) {
        return areDuplicates(t, value);
      })) {
        return;
      } // Menu should always hide when item is selected.


      this.setState({
        value: '',
        showMenu: false
      });
      var tags = [].concat(_toConsumableArray(this.state.tags), [value]);
      this.onChange(tags);
    }
  }, {
    key: "onRemove",
    value: function onRemove(value) {
      var tags = this.state.tags.filter(function (t) {
        return t.label !== value && t !== value;
      });
      this.onChange(tags);
    }
  }, {
    key: "onFocus",
    value: function onFocus() {
      this.setState({
        isFocusVisible: this.textfield && _reactDom["default"].findDOMNode(this.textfield).classList.contains(_focusRing.FOCUS_RING_CLASSNAME)
      });
    }
  }, {
    key: "onBlur",
    value: function onBlur() {
      this.setState({
        isFocusVisible: false
      });
    }
  }, {
    key: "focus",
    value: function focus(deleting) {
      if (this.taglist) {
        var dom = _reactDom["default"].findDOMNode(this.taglist);

        if (!dom.contains(document.activeElement)) {
          var nodes = dom.querySelectorAll('[role=row]');

          if (nodes.length && deleting) {
            nodes[nodes.length - 1].focus();
          } else {
            this.textfield.focus();
          }
        }
      }
    }
  }, {
    key: "onChange",
    value: function onChange(tags) {
      var _this3 = this;

      if (this.props.value == null) {
        var deleting = tags.length < this.state.tags.length;
        this.setState({
          tags: tags
        }, function () {
          return _this3.focus(deleting);
        });
      }

      if (this.props.onChange) {
        this.props.onChange(tags.map(function (tag) {
          return tag.label || tag;
        }));
      }
    }
  }, {
    key: "onMenuToggle",
    value: function onMenuToggle(showMenu) {
      // menu should not be shown when there is no value
      if (showMenu && this.state.value === '') {
        showMenu = false;
      }

      this.setState({
        showMenu: showMenu
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var _this$props = this.props,
          getCompletions = _this$props.getCompletions,
          allowCreate = _this$props.allowCreate,
          disabled = _this$props.disabled,
          invalid = _this$props.invalid,
          quiet = _this$props.quiet,
          className = _this$props.className,
          placeholder = _this$props.placeholder,
          renderTag = _this$props.renderTag,
          renderItem = _this$props.renderItem,
          props = _objectWithoutProperties(_this$props, ["getCompletions", "allowCreate", "disabled", "invalid", "quiet", "className", "placeholder", "renderTag", "renderItem"]);

      var _this$state = this.state,
          value = _this$state.value,
          tags = _this$state.tags,
          showMenu = _this$state.showMenu,
          isFocusVisible = _this$state.isFocusVisible;
      delete props.onChange;
      return _react["default"].createElement(_Autocomplete["default"], {
        className: (0, _classnames["default"])('react-spectrum-TagField', 'spectrum-Textfield', _defineProperty({
          'spectrum-Textfield--quiet': quiet,
          'react-spectrum-TagField--quiet': quiet,
          'is-disabled': disabled,
          'is-invalid': invalid
        }, _focusRing.FOCUS_RING_CLASSNAME, isFocusVisible), className),
        getCompletions: getCompletions,
        allowCreate: allowCreate,
        onSelect: this.onSelect,
        value: value,
        showMenu: showMenu,
        onChange: this.onTextfieldChange,
        onMenuToggle: this.onMenuToggle,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        renderItem: renderItem
      }, _react["default"].createElement(_TagList.TagList, {
        manageTabIndex: false,
        ref: function ref(tl) {
          return _this4.taglist = tl;
        },
        disabled: disabled,
        onClose: this.onRemove,
        values: !renderTag && tags.map(function (tag) {
          return tag.label || tag;
        }) || undefined,
        "aria-labelledby": props['aria-labelledby'],
        "aria-label": props['aria-label']
      }, renderTag && tags.map(function (tag, index) {
        return renderTag(tag, index);
      })), _react["default"].createElement(_Textfield["default"], _extends({
        ref: function ref(tf) {
          return _this4.textfield = tf;
        },
        className: "react-spectrum-TagField-input",
        autocompleteInput: true,
        disabled: disabled,
        placeholder: tags.length === 0 ? placeholder : ''
      }, props)));
    }
  }]);

  return TagField;
}(_react["default"].Component), _defineProperty(_class2, "propTypes", {
  /** Allow tag creation in tag field */
  allowCreate: _propTypes["default"].bool,

  /** Allow duplicate tags in tag field */
  allowDuplicates: _propTypes["default"].bool,

  /** Class to add to the tag field */
  className: _propTypes["default"].string,

  /** Placeholder text to display if there are no tags nor text entered */
  placeholder: _propTypes["default"].string,

  /** Whether the tag field is disabled */
  disabled: _propTypes["default"].bool,

  /** Function to retrieve autocomplete options */
  getCompletions: _propTypes["default"].func,

  /** Whether to disable the invalid icon and styling */
  invalid: _propTypes["default"].bool,

  /** Whether to use the quiet styling for the tag field */
  quiet: _propTypes["default"].bool,

  /** List of tags to display */
  value: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object])),

  /**
   * A function called when a tag is added or removed.
   * It is passed an array of strings containing the new tag list.
   */
  onChange: _propTypes["default"].func,

  /**
   * A function that returns a wrapper component to render a list item label.
   * Useful in providing custom html to the rendered label.
   * Passed to the underlying Autocomplete component.
   */
  renderItem: _propTypes["default"].func,

  /**
   * A function that takes a tag object and returns a custom Tag component
   * If this prop is not specified, tags will render with default behavior
   */
  renderTag: _propTypes["default"].func
}), _defineProperty(_class2, "defaultProps", {
  allowCreate: true,
  allowDuplicates: false,
  getCompletions: function getCompletions() {
    return [];
  }
}), _temp)) || _class) || _class;

exports["default"] = TagField;