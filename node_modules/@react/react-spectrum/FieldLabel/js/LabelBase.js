"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = LabelBase;

var _Asterisk = _interopRequireDefault(require("../../Icon/Asterisk"));

var _classnames = _interopRequireDefault(require("classnames"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _intl = require("../../utils/intl");

var _react = _interopRequireDefault(require("react"));

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var intlMessages = {
  "cs-CZ": _interopRequireDefault(require("./../intl/cs-CZ.json"))["default"],
  "da-DK": _interopRequireDefault(require("./../intl/da-DK.json"))["default"],
  "de-DE": _interopRequireDefault(require("./../intl/de-DE.json"))["default"],
  "en-US": _interopRequireDefault(require("./../intl/en-US.json"))["default"],
  "es-ES": _interopRequireDefault(require("./../intl/es-ES.json"))["default"],
  "fi-FI": _interopRequireDefault(require("./../intl/fi-FI.json"))["default"],
  "fr-FR": _interopRequireDefault(require("./../intl/fr-FR.json"))["default"],
  "hu-HU": _interopRequireDefault(require("./../intl/hu-HU.json"))["default"],
  "it-IT": _interopRequireDefault(require("./../intl/it-IT.json"))["default"],
  "ja-JP": _interopRequireDefault(require("./../intl/ja-JP.json"))["default"],
  "ko-KR": _interopRequireDefault(require("./../intl/ko-KR.json"))["default"],
  "nb-NO": _interopRequireDefault(require("./../intl/nb-NO.json"))["default"],
  "nl-NL": _interopRequireDefault(require("./../intl/nl-NL.json"))["default"],
  "pl-PL": _interopRequireDefault(require("./../intl/pl-PL.json"))["default"],
  "pt-BR": _interopRequireDefault(require("./../intl/pt-BR.json"))["default"],
  "ru-RU": _interopRequireDefault(require("./../intl/ru-RU.json"))["default"],
  "sv-SE": _interopRequireDefault(require("./../intl/sv-SE.json"))["default"],
  "tr-TR": _interopRequireDefault(require("./../intl/tr-TR.json"))["default"],
  "uk-UA": _interopRequireDefault(require("./../intl/uk-UA.json"))["default"],
  "zh-CN": _interopRequireDefault(require("./../intl/zh-CN.json"))["default"],
  "zh-TW": _interopRequireDefault(require("./../intl/zh-TW.json"))["default"]
};
var formatMessage = (0, _intl.messageFormatter)(intlMessages);

function LabelBase(_ref) {
  var label = _ref.label,
      children = _ref.children,
      className = _ref.className,
      labelClassName = _ref.labelClassName,
      wrapperClassName = _ref.wrapperClassName,
      labelFor = _ref.labelFor,
      componentName = _ref.componentName,
      necessity = _ref.necessity,
      necessityIndicator = _ref.necessityIndicator,
      otherProps = _objectWithoutProperties(_ref, ["label", "children", "className", "labelClassName", "wrapperClassName", "labelFor", "componentName", "necessity", "necessityIndicator"]);

  var necessityMap = {
    required: "".concat(label, " ").concat(formatMessage('(required)')),
    optional: "".concat(label, " ").concat(formatMessage('(optional)'))
  };
  var icon = null;

  if (necessityIndicator === 'icon' && necessity === 'required') {
    icon = _react["default"].createElement(_Asterisk["default"], {
      role: "presentation",
      className: "spectrum-UIIcon-Asterisk spectrum-fieldLabel-requiredIcon",
      size: "S",
      alt: formatMessage('(required)')
    });
  } // There are 3 cases:
  // 1. No children - only render the <label>, no wrapping div. `labelFor` required.
  // 2. 1 child - render wrapping <div>. Automatically generate child `id` and label `for` attributes.
  // 3. > 1 children - render wrapping <div>. `labelFor` required, along with `id` on child.


  var childArray = _react["default"].Children.toArray(children);

  var id;
  var labelId = otherProps.id || (0, _createId["default"])();
  delete otherProps.id;

  if (childArray.length === 1) {
    // Use the existing id prop, or generate one.
    id = childArray[0].props.id || (0, _createId["default"])();
    var ariaLabelledby = childArray[0].props['aria-labelledby'] || (label ? labelId : null);
    childArray[0] = _react["default"].cloneElement(childArray[0], {
      id: id,
      'aria-labelledby': ariaLabelledby
    });
  }

  if (id && !labelFor) {
    labelFor = id;
  }

  if (!labelFor) {
    console.warn("Missing labelFor attribute on ".concat(componentName, " with label \"").concat(label, "\""));
  }

  var fieldLabelClassName = (0, _classnames["default"])(labelClassName, childArray.length === 0 ? className : null);
  var fieldLabel = label ? _react["default"].createElement("label", _extends({
    className: fieldLabelClassName,
    id: labelId,
    htmlFor: labelFor
  }, (0, _filterDOMProps["default"])(otherProps)), necessity && necessityIndicator === 'label' ? necessityMap[necessity] : label, icon && ' ', icon && icon) : _react["default"].createElement("div", _extends({
    className: fieldLabelClassName
  }, (0, _filterDOMProps["default"])(otherProps)));

  if (childArray.length > 0) {
    if (wrapperClassName) {
      childArray = _react["default"].createElement("div", {
        className: wrapperClassName
      }, childArray);
    }

    return _react["default"].createElement("div", {
      className: className
    }, fieldLabel, childArray);
  }

  return fieldLabel;
}

LabelBase.defaultProps = {
  necessityIndicator: 'icon'
};