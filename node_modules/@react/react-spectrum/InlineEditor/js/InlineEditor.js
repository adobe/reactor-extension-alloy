"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _Textfield = _interopRequireDefault(require("../../Textfield"));

require("../style/index.css");

var _class, _class2, _temp;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InlineEditor = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  _inherits(InlineEditor, _Component);

  function InlineEditor(props) {
    var _this;

    _classCallCheck(this, InlineEditor);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(InlineEditor).call(this, props));
    _this.state = {
      editing: !!_this.props.autoFocus,
      value: _this.props.value || _this.props.defaultValue || '',
      invalid: false
    };
    return _this;
  }

  _createClass(InlineEditor, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      if (props.value != null && props.value !== this.props.value) {
        this.setState({
          value: props.value
        });
      }
    }
  }, {
    key: "onChange",
    value: function onChange(value) {
      this.setState({
        value: value
      });
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(e) {
      if (e.key === 'Enter') {
        this.endEditing(true);
      } else if (e.key === 'Escape') {
        this.endEditing(false);
      }
    }
  }, {
    key: "startEditing",
    value: function startEditing() {
      this.setState({
        editing: true,
        startValue: this.state.value,
        invalid: false
      });
    }
  }, {
    key: "endEditing",
    value: function () {
      var _endEditing = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var shouldSave,
            contEditing,
            value,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                shouldSave = _args.length > 0 && _args[0] !== undefined ? _args[0] : true;
                contEditing = false;
                value = shouldSave ? this.state.value : this.state.startValue;

                if (!(shouldSave && this.props.onChange)) {
                  _context.next = 10;
                  break;
                }

                _context.next = 6;
                return this.props.onChange(value);

              case 6:
                _context.t0 = _context.sent;
                contEditing = _context.t0 === false;
                _context.next = 11;
                break;

              case 10:
                if (!shouldSave && this.props.onCancel) {
                  this.props.onCancel();
                }

              case 11:
                this.setState({
                  editing: contEditing,
                  value: this.props.value == null ? value : this.props.value,
                  invalid: contEditing
                });

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function endEditing() {
        return _endEditing.apply(this, arguments);
      }

      return endEditing;
    }()
  }, {
    key: "focusTextfield",
    value: function focusTextfield(textfield) {
      if (textfield) {
        var input = _reactDom["default"].findDOMNode(textfield);

        input.focus();
        input.select();
      }
    }
  }, {
    key: "renderLabel",
    value: function renderLabel() {
      var _this$props = this.props,
          className = _this$props.className,
          disabled = _this$props.disabled;
      return _react["default"].createElement("span", {
        className: (0, _classnames["default"])('react-spectrum-InlineEditor', 'react-spectrum-InlineEditor-label', className),
        onDoubleClick: !disabled ? this.startEditing : undefined
      }, this.state.value);
    }
  }, {
    key: "renderEditor",
    value: function renderEditor() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          props = _objectWithoutProperties(_this$props2, ["className"]);

      return _react["default"].createElement(_Textfield["default"], _extends({}, props, {
        ref: this.focusTextfield,
        className: (0, _classnames["default"])('react-spectrum-InlineEditor', 'react-spectrum-InlineEditor-input', className),
        value: this.state.value,
        onChange: this.onChange,
        onKeyDown: this.onKeyDown,
        onBlur: this.endEditing,
        invalid: this.state.invalid
      }));
    }
  }, {
    key: "render",
    value: function render() {
      return this.state.editing ? this.renderEditor() : this.renderLabel();
    }
  }]);

  return InlineEditor;
}(_react.Component), _defineProperty(_class2, "propTypes", {
  /**
   * Value component is initally set to
   */
  defaultValue: _propTypes["default"].string,

  /**
   * puts it into a controlled state
   */
  value: _propTypes["default"].string,

  /**
   * Prevents the value from being editiable, only renders value as label
   */
  disabled: _propTypes["default"].bool
}), _temp)) || _class) || _class;

exports["default"] = InlineEditor;