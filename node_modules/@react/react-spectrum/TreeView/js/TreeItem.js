"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _ChevronRightMedium = _interopRequireDefault(require("../../Icon/core/ChevronRightMedium"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _focusRing = _interopRequireDefault(require("../../utils/focusRing"));

var _react = _interopRequireDefault(require("react"));

var _VisuallyHidden = _interopRequireDefault(require("../../VisuallyHidden"));

var _class;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var TreeItem = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (0, _focusRing["default"])(_class =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TreeItem, _React$Component);

  function TreeItem(props) {
    var _this;

    _classCallCheck(this, TreeItem);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TreeItem).call(this, props));
    _this.itemId = (0, _createId["default"])();
    return _this;
  }
  /**
   * Sets focus to the TreeItem DOM element.
   */


  _createClass(TreeItem, [{
    key: "focus",
    value: function focus() {
      if (this.treeitem) {
        this.treeitem.focus();
      }
    }
  }, {
    key: "getOwnedChildIds",
    value: function getOwnedChildIds() {
      var _this$props = this.props,
          content = _this$props.content,
          collectionView = _this$props.collectionView,
          _this$props$treeId = _this$props.treeId,
          treeId = _this$props$treeId === void 0 ? this.itemId : _this$props$treeId;
      var hasChildren = content.hasChildren,
          children = content.children,
          isExpanded = content.isExpanded,
          _content$level = content.level,
          level = _content$level === void 0 ? 0 : _content$level;
      var ownedChildIds = null;

      if (hasChildren && isExpanded && children && children.length > 0) {
        // Filter visible views to only items that are children of this item, and generate ids
        ownedChildIds = collectionView.visibleViews.filter(function (view) {
          return view.content.parent === content;
        }).sort(function (a, b) {
          return a.content.index - b.content.index;
        }).map(function (view) {
          return "".concat(treeId, "-").concat(level + 1, "-").concat(view.content.index);
        }).join(' ');
      }

      return !ownedChildIds || !ownedChildIds.length ? null : ownedChildIds;
    }
  }, {
    key: "onToggle",
    value: function onToggle(e) {
      var _this2 = this;

      var _this$props2 = this.props,
          content = _this$props2.content,
          onToggle = _this$props2.onToggle;

      if (onToggle) {
        onToggle(content.item, e);
      }

      requestAnimationFrame(function () {
        return _this2.focus();
      });
    }
  }, {
    key: "stopPropagationAndPreventDefault",
    value: function stopPropagationAndPreventDefault(e) {
      e.stopPropagation();
      e.preventDefault();
    }
  }, {
    key: "setTreeItemRef",
    value: function setTreeItemRef(t) {
      this.treeitem = t;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          content = _this$props3.content,
          renderItem = _this$props3.renderItem,
          allowsSelection = _this$props3.allowsSelection,
          selected = _this$props3.selected,
          focused = _this$props3.focused,
          collectionView = _this$props3.collectionView,
          _this$props3$treeId = _this$props3.treeId,
          treeId = _this$props3$treeId === void 0 ? this.itemId : _this$props3$treeId,
          isDropTarget = _this$props3['drop-target'],
          onKeyDown = _this$props3.onKeyDown;
      var item = content.item,
          hasChildren = content.hasChildren,
          isToggleable = content.isToggleable,
          isExpanded = content.isExpanded,
          parent = content.parent,
          _content$level2 = content.level,
          level = _content$level2 === void 0 ? 0 : _content$level2;
      var itemClassName = (0, _classnames["default"])('spectrum-TreeView-item', {
        'is-open': isExpanded
      });
      var linkClassName = (0, _classnames["default"])('spectrum-TreeView-itemLink', {
        'is-selected': allowsSelection && selected,
        'is-focused': focused,
        'is-drop-target': isDropTarget
      });
      var tabIndex = null;

      if (collectionView) {
        tabIndex = focused || !collectionView.focusedIndexPath ? 0 : -1;
      }

      var setSize = parent.children ? parent.children.length : 0;
      var posInSet = content.index;
      var id = "".concat(treeId, "-").concat(level, "-").concat(posInSet);
      var ownedChildIds = this.getOwnedChildIds();
      return _react["default"].createElement("div", {
        className: itemClassName,
        role: "presentation"
      }, _react["default"].createElement("div", {
        className: linkClassName,
        ref: this.setTreeItemRef,
        id: id,
        role: "treeitem",
        tabIndex: tabIndex,
        "aria-selected": (allowsSelection ? selected : focused) || false,
        "aria-expanded": hasChildren ? isExpanded : null,
        "aria-level": level + 1,
        "aria-setsize": setSize,
        "aria-posinset": posInSet + 1,
        "aria-owns": ownedChildIds ? "".concat(id, "-group") : null,
        onClick: !allowsSelection ? this.onToggle : null,
        onMouseDown: !allowsSelection ? this.stopPropagationAndPreventDefault : null,
        onKeyDown: onKeyDown
      }, isToggleable && hasChildren && _react["default"].createElement(_ChevronRightMedium["default"], {
        className: "spectrum-TreeView-indicator",
        size: null,
        onClick: allowsSelection ? this.onToggle : null,
        onMouseDown: this.stopPropagationAndPreventDefault
      }), renderItem(item, content), ownedChildIds && _react["default"].createElement(_VisuallyHidden["default"], {
        role: "group",
        id: "".concat(id, "-group"),
        "aria-labelledby": id,
        "aria-owns": ownedChildIds
      })));
    }
  }]);

  return TreeItem;
}(_react["default"].Component)) || _class) || _class) || _class;

exports["default"] = TreeItem;