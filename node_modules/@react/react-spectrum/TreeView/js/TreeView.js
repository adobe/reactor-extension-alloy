"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _collectionView = require("@react/collection-view");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Provider = _interopRequireDefault(require("../../Provider"));

var _proxyObject = _interopRequireDefault(require("../../utils/proxyObject"));

var _react = _interopRequireDefault(require("react"));

var _TreeItem = _interopRequireDefault(require("./TreeItem"));

require("../style/index.css");

var _TreeViewDataSource = _interopRequireDefault(require("./TreeViewDataSource"));

var _TreeViewDelegate = _interopRequireDefault(require("./TreeViewDelegate"));

var _class, _class2, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/treeview/index.css");

  require("../../spectrum-css/treeview/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/treeview/index-lg.css");
} else {
  require("../../spectrum-css/treeview/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/treeview/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/treeview/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/treeview/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/treeview/multiStops/darkest.css");

var TreeView =
/**
 * TreeView renders a collapseable heirarchical tree
 */
(0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TreeView, _React$Component);

  // These come from the parent Provider. Used to set the correct props
  // to the provider that wraps the drag view.
  function TreeView(props) {
    var _this;

    _classCallCheck(this, TreeView);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TreeView).call(this, props));
    _this.layout = new _collectionView.ListLayout({
      rowHeight: 44
    });
    _this.treeId = (0, _createId["default"])();

    var dataSource = _this.getDataSource(props);

    var delegate = _this.getDelegate(props, dataSource);

    _this.state = {
      dataSource: dataSource,
      delegate: delegate
    };
    return _this;
  }

  _createClass(TreeView, [{
    key: "getDataSource",
    value: function getDataSource(props) {
      var _this2 = this;

      // If the data source provided is a TreeViewDataSource (old API), use it directly,
      // otherwise wrap it.
      var dataSource = props.dataSource instanceof _TreeViewDataSource["default"] ? props.dataSource : new _TreeViewDataSource["default"](props.dataSource); // Update selected items once loaded

      if (props.selectedItems) {
        dataSource.once('load', function () {
          return _this2.forceUpdate();
        });
      }

      return dataSource;
    }
  }, {
    key: "getDelegate",
    value: function getDelegate(props, dataSource) {
      // Combine the data source and delegate objects.
      // Providing methods on the data source has superseded providing an explicit delegate,
      // but the old way is supported for backward compatibility.
      var combinedDelegate = Object.assign({}, (0, _proxyObject["default"])(props.dataSource), (0, _proxyObject["default"])(props.delegate)); // Create a delegate proxy object, which ensures that the delegate methods are 
      // called with item objects rather than IndexPaths, which don't make sense in a tree.

      var delegate = new _TreeViewDelegate["default"](dataSource, combinedDelegate); // Finally, combine the delegate with the TreeView itself, which is needed
      // for UI rendering purposes.

      return Object.assign({}, (0, _proxyObject["default"])(delegate), (0, _proxyObject["default"])(this));
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      if (props.dataSource !== this.props.dataSource) {
        this.state.dataSource.teardown();
        var dataSource = this.getDataSource(props);
        var delegate = this.getDelegate(props, dataSource);
        this.setState({
          dataSource: dataSource,
          delegate: delegate
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.state.dataSource.teardown();
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          selectedItems = _this$props.selectedItems,
          className = _this$props.className,
          _this$props$id = _this$props.id,
          id = _this$props$id === void 0 ? this.treeId : _this$props$id,
          allowsSelection = _this$props.allowsSelection,
          allowsEmptySelection = _this$props.allowsEmptySelection,
          allowsMultipleSelection = _this$props.allowsMultipleSelection;
      var dataSource = this.state.dataSource;
      var selectedIndexPaths;

      if (selectedItems) {
        selectedIndexPaths = selectedItems.map(function (item) {
          return dataSource.indexPathForItem(item);
        }).filter(Boolean);
      }

      return _react["default"].createElement(_collectionView.EditableCollectionView, _extends({}, this.props, {
        ref: function ref(c) {
          return _this3.collection = c;
        },
        className: (0, _classnames["default"])('spectrum-TreeView', className),
        layout: this.layout,
        delegate: this.state.delegate,
        dataSource: dataSource,
        transitionDuration: 300,
        canSelectItems: this.props.allowsSelection,
        selectedIndexPaths: selectedIndexPaths,
        onSelectionChanged: this.onSelectionChange,
        onKeyDown: this.onKeyDown,
        role: "tree",
        id: id,
        "aria-multiselectable": allowsSelection && allowsMultipleSelection,
        selectionMode: allowsSelection && (allowsMultipleSelection || allowsEmptySelection) ? 'toggle' : 'replace',
        keyboardMode: "focus"
      }));
    }
  }, {
    key: "renderItemView",
    value: function renderItemView(type, content) {
      return _react["default"].createElement(_TreeItem["default"], {
        treeId: this.props.id || this.treeId,
        content: content,
        renderItem: this.props.renderItem,
        allowsSelection: this.props.allowsSelection,
        onToggle: this.toggleItem.bind(this, content.item)
      });
    }
  }, {
    key: "renderDragView",
    value: function renderDragView(target) {
      var dragView;
      var style = {
        background: 'transparent'
      }; // Use custom drag renderer if provided,
      // otherwise just get the existing item view.

      if (this.props.renderDragView) {
        dragView = this.props.renderDragView(target, this.collection.selectedIndexPaths);
      } else {
        // Get the item wrapper view from collection-view. The first child is the actual item component.
        var view = this.collection.getItemView(target.indexPath);
        dragView = _toConsumableArray(view.children)[0];
        style.width = view.layoutInfo.rect.width;
        style.height = view.layoutInfo.rect.height;
      } // Wrap in a spectrum provider so spectrum components are themed correctly.


      return _react["default"].createElement(_Provider["default"], _extends({}, this.context, {
        style: style
      }), dragView);
    }
  }, {
    key: "indentationForItem",
    value: function indentationForItem(section, index) {
      if (!this.collection) {
        return 0;
      }

      var content = this.collection.getItem(section, index);
      return 28 * content.level;
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(e) {
      var dataSource = this.state.dataSource;
      var focusedItem = this.focusedItem;
      var treeItem;
      var indexPath;

      if (focusedItem) {
        treeItem = dataSource._getItem(focusedItem);

        switch (e.key) {
          case 'ArrowRight':
            if (treeItem && treeItem.hasChildren) {
              if (treeItem.isExpanded) {
                var nextItem = treeItem.children && treeItem.children[0];
                indexPath = nextItem ? dataSource.indexPathForItem(nextItem.item) : null;
              } else {
                e.preventDefault();
                this.expandItem(focusedItem);
              }
            }

            break;

          case 'ArrowLeft':
            if (treeItem) {
              if (treeItem.isExpanded) {
                e.preventDefault();
                this.collapseItem(focusedItem);
              } else if (treeItem.parent) {
                indexPath = dataSource.indexPathForItem(treeItem.parent.item);
              }
            }

            break;

          case 'Home':
            indexPath = new _collectionView.IndexPath(0, 0);
            break;

          case 'End':
            indexPath = new _collectionView.IndexPath(0, dataSource.sections[0].length - 1);
            break;
        }

        if (indexPath) {
          e.preventDefault();
          this.collection.scrollToItem(indexPath);
          this.collection.focusItem(indexPath);
        }
      }

      if (this.props.onKeyDown) {
        this.props.onKeyDown(e);
      }
    }
    /**
     * Expands or collapses the given item depending on its current state.
     * @param {object} item
     */

  }, {
    key: "toggleItem",
    value: function toggleItem(item) {
      this.state.dataSource.toggleItem(item);

      if (this.props.onToggleItem) {
        var treeItem = this.state.dataSource._getItem(item);

        if (treeItem && treeItem.isToggleable && treeItem.hasChildren) {
          this.props.onToggleItem(treeItem.item, treeItem.isExpanded);
        }
      }
    }
    /**
     * Expands the given item, displaying all of its children.
     * @param {object} item
     */

  }, {
    key: "expandItem",
    value: function expandItem(item) {
      this.state.dataSource.expandItem(item);
    }
    /**
     * Collapses the given item, hiding all of its children.
     * @param {object} item
     */

  }, {
    key: "collapseItem",
    value: function collapseItem(item) {
      this.state.dataSource.collapseItem(item);
    }
  }, {
    key: "selectItem",
    value: function selectItem(item) {
      var indexPath = this.state.dataSource.indexPathForItem(item);

      if (indexPath) {
        this.collection.selectItem(indexPath);
      }
    }
  }, {
    key: "onSelectionChange",
    value: function onSelectionChange() {
      if (this.props.onSelectionChange) {
        this.props.onSelectionChange(this.selectedItems);
      }
    }
  }, {
    key: "dropTargetUpdated",
    value: function dropTargetUpdated(dropTarget) {
      var _this4 = this;

      clearTimeout(this._dragHoverTimer); // Expand tree items when a drag hovers over

      if (dropTarget && dropTarget.dropPosition === _collectionView.DragTarget.DROP_ON) {
        this._dragHoverTimer = setTimeout(function () {
          var item = _this4.collection.getItem(dropTarget.indexPath);

          if (item) {
            _this4.expandItem(item.item);
          }
        }, this.props.dragHoverTimeout);
      }
    }
  }, {
    key: "selectedItems",
    get: function get() {
      var _this5 = this;

      if (!this.collection) {
        return [];
      }

      return Array.from(this.collection.selectedIndexPaths).map(function (indexPath) {
        return _this5.collection.getItem(indexPath).item;
      });
    }
  }, {
    key: "focusedItem",
    get: function get() {
      if (!this.collection || !this.collection.focusedIndexPath) {
        return null;
      }

      return this.collection.getItem(this.collection.focusedIndexPath).item;
    }
  }]);

  return TreeView;
}(_react["default"].Component), _defineProperty(_class2, "propTypes", {
  /** The datasource for the tree view. Should be a subclass of `TreeDataSource`. */
  dataSource: _propTypes["default"].object.isRequired,

  /** A function which renders an item in the tree */
  renderItem: _propTypes["default"].func.isRequired,

  /* A function that is called when the selection changes. Passes a list of all selected items. */
  onSelectionChange: _propTypes["default"].func,

  /**
   * A function that is called when an item is toggled (expanded/collapsed).
   * Will only fire if item is toggleable and has children.
   * Passes the item being toggled and the isExpanded state.
   */
  onToggleItem: _propTypes["default"].func,

  /** Sets the selected items. Optional. */
  selectedItems: _propTypes["default"].arrayOf(_propTypes["default"].object),

  /** Whether to allow the user to select items */
  allowsSelection: _propTypes["default"].bool,

  /** Whether to allow the user to select no items. */
  allowsEmptySelection: _propTypes["default"].bool,

  /** Whether to allow the user to select multiple items */
  allowsMultipleSelection: _propTypes["default"].bool,

  /** An optional delegate for the tree view. */
  delegate: _propTypes["default"].object,

  /** The timeout after which items automatically expand when dragging over them. */
  dragHoverTimeout: _propTypes["default"].number,

  /** Whether the user can drag rows from the table. */
  canDragItems: _propTypes["default"].bool,

  /** A function which renders the view to display under the cursor during drag and drop. */
  renderDragView: _propTypes["default"].func,

  /**
   * Whether the TableView accepts drops.
   * If `true`, the table accepts all types of drops. Alternatively,
   * it can be set to an array of accepted drop types.
   */
  acceptsDrops: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].arrayOf(_propTypes["default"].string)]),

  /** Custom CSS class to add to the tree view */
  className: _propTypes["default"].string
}), _defineProperty(_class2, "defaultProps", {
  allowsSelection: false,
  allowsEmptySelection: true,
  allowsMultipleSelection: false,
  dragHoverTimeout: 800
}), _defineProperty(_class2, "contextTypes", {
  theme: _propTypes["default"].string,
  scale: _propTypes["default"].string,
  locale: _propTypes["default"].string
}), _temp)) || _class) || _class;

exports["default"] = TreeView;