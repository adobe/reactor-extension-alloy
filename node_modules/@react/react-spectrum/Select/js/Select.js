"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectMenu = SelectMenu;
exports["default"] = void 0;

var _Alert = _interopRequireDefault(require("../../Icon/Alert"));

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _Button = _interopRequireDefault(require("../../Button"));

var _ChevronDownMedium = _interopRequireDefault(require("../../Icon/core/ChevronDownMedium"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _Dropdown = _interopRequireDefault(require("../../Dropdown"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _Popover = _interopRequireDefault(require("../../Popover"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _SelectList = _interopRequireDefault(require("../../SelectList"));

var _class, _class2, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/dropdown/index.css");

  require("../../spectrum-css/dropdown/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/dropdown/index-lg.css");
} else {
  require("../../spectrum-css/dropdown/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/dropdown/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/dropdown/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/dropdown/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/dropdown/multiStops/darkest.css");

require('../style/index.css');

var POPOVER_MAX_WIDTH = null;
var QUIET_MARGIN = 24;

var Select = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Select, _React$Component);

  function Select(props) {
    var _this;

    _classCallCheck(this, Select);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Select).call(this, props));
    var value = null;

    if ('value' in props) {
      value = props.value;
    } else if ('defaultValue' in props) {
      value = props.defaultValue;
    } else if (props.multiple) {
      value = [];
    } else {
      var opt = props.options && props.options[0];
      value = opt && !props.placeholder ? opt.value : null;
    }

    _this.state = {
      value: value
    };
    _this.selectId = (0, _createId["default"])();
    return _this;
  }

  _createClass(Select, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      if ('value' in props && props.value !== this.state.value) {
        this.setState({
          value: props.value
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (POPOVER_MAX_WIDTH == null) {
        // Render a fake popover we can measure the styles of, place it inside ourselves
        // so it gets styles dictated by the current scale
        var dummyPopover = document.createElement('div');
        dummyPopover.className = 'spectrum-Dropdown-popover';
        document.body.appendChild(dummyPopover);
        POPOVER_MAX_WIDTH = parseInt(window.getComputedStyle(dummyPopover).maxWidth, 10);
        document.body.removeChild(dummyPopover);
      }

      window.addEventListener('resize', this.updateSize);
      this.updateSize();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.updateSize);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.updateSize();
    }
  }, {
    key: "updateSize",
    value: function updateSize() {
      if (this.button) {
        var width = _reactDom["default"].findDOMNode(this.button).offsetWidth;

        if (width !== this.state.width) {
          this.setState({
            width: width
          });
        }
      }
    }
  }, {
    key: "onSelect",
    value: function onSelect(value) {
      if (!('value' in this.props)) {
        this.setState({
          value: value
        });
      }

      if (this.props.onChange) {
        this.props.onChange(value);
      }
    }
  }, {
    key: "onOpen",
    value: function onOpen(e) {
      this.updateSize();

      if (typeof this.props.onOpen === 'function') {
        this.props.onOpen(e);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          _this$props$options = _this$props.options,
          options = _this$props$options === void 0 ? [] : _this$props$options,
          quiet = _this$props.quiet,
          onClose = _this$props.onClose,
          closeOnSelect = _this$props.closeOnSelect,
          menuClassName = _this$props.menuClassName,
          _this$props$disabled = _this$props.disabled,
          disabled = _this$props$disabled === void 0 ? false : _this$props$disabled,
          _this$props$invalid = _this$props.invalid,
          invalid = _this$props$invalid === void 0 ? false : _this$props$invalid,
          _this$props$multiple = _this$props.multiple,
          multiple = _this$props$multiple === void 0 ? false : _this$props$multiple,
          _this$props$required = _this$props.required,
          required = _this$props$required === void 0 ? false : _this$props$required,
          _this$props$flexible = _this$props.flexible,
          flexible = _this$props$flexible === void 0 ? false : _this$props$flexible,
          _this$props$placehold = _this$props.placeholder,
          placeholder = _this$props$placehold === void 0 ? 'Select an option' : _this$props$placehold,
          className = _this$props.className,
          _this$props$flip = _this$props.flip,
          flip = _this$props$flip === void 0 ? true : _this$props$flip,
          alignRight = _this$props.alignRight,
          labelId = _this$props.labelId,
          _this$props$id = _this$props.id,
          id = _this$props$id === void 0 ? this.selectId : _this$props$id,
          icon = _this$props.icon,
          renderItem = _this$props.renderItem,
          ariaLabel = _this$props['aria-label'],
          ariaLabelledby = _this$props['aria-labelledby'],
          otherProps = _objectWithoutProperties(_this$props, ["options", "quiet", "onClose", "closeOnSelect", "menuClassName", "disabled", "invalid", "multiple", "required", "flexible", "placeholder", "className", "flip", "alignRight", "labelId", "id", "icon", "renderItem", "aria-label", "aria-labelledby"]);

      var value = this.state.value;
      var valueId = "".concat(id, "-value");

      if (ariaLabelledby) {
        ariaLabelledby += " ".concat(valueId);
      } else if (ariaLabel) {
        ariaLabelledby = id + ' ' + valueId;
      } else if (labelId) {
        ariaLabelledby = labelId + ' ' + valueId;
      } else {
        ariaLabelledby = valueId;
      }

      var label = placeholder;

      if (!multiple) {
        var selectedOption = options.find(function (o) {
          return o.value === value;
        });
        label = selectedOption ? selectedOption.label : placeholder;
        icon = selectedOption && selectedOption.icon;
      }

      closeOnSelect = typeof closeOnSelect === 'boolean' ? closeOnSelect : !multiple; // Pass ARIA props to the button, and others to the Dropdown.

      var domProps = Object.entries((0, _filterDOMProps["default"])(otherProps));
      var buttonProps = domProps.filter(function (x) {
        return /^aria-.*$/.test(x[0]);
      }).reduce(function (o, i) {
        return o[i[0]] = i[1], o;
      }, {});
      var dropdownProps = domProps.filter(function (x) {
        return !/^aria-.*$/.test(x[0]);
      }).reduce(function (o, i) {
        return o[i[0]] = i[1], o;
      }, {});
      var minWidth = this.state.width;

      if (quiet) {
        minWidth = this.state.width + QUIET_MARGIN;
      }

      if (quiet && flexible) {
        minWidth = null;
      }

      return _react["default"].createElement(_Dropdown["default"], _extends({
        className: (0, _classnames["default"])('spectrum-Dropdown', {
          'spectrum-Dropdown--quiet': quiet,
          'react-spectrum-Dropdown-fixed': quiet && !flexible,
          'react-spectrum-Dropdown-flexible': flexible,
          'is-disabled': disabled,
          'is-invalid': invalid
        }, className),
        closeOnSelect: closeOnSelect,
        onSelect: this.onSelect,
        onOpen: this.onOpen,
        onClose: onClose,
        "aria-required": required,
        "aria-multiselectable": multiple,
        "aria-disabled": disabled,
        "aria-invalid": invalid,
        alignRight: alignRight,
        flip: flip
      }, dropdownProps), _react["default"].createElement(_Button["default"], _extends({
        className: "spectrum-Dropdown-trigger",
        type: "button",
        variant: "field",
        "aria-haspopup": "listbox",
        quiet: quiet,
        disabled: disabled,
        invalid: invalid,
        ref: function ref(b) {
          return _this2.button = b;
        },
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledby,
        id: id,
        icon: icon
      }, buttonProps), _react["default"].createElement("span", {
        id: valueId,
        className: (0, _classnames["default"])('spectrum-Dropdown-label', {
          'is-placeholder': label === placeholder
        })
      }, label), invalid && _react["default"].createElement(_Alert["default"], {
        size: "S"
      }), _react["default"].createElement(_ChevronDownMedium["default"], {
        size: null,
        className: "spectrum-Dropdown-icon"
      })), _react["default"].createElement(SelectMenu, {
        dropdownMenu: true,
        className: menuClassName,
        options: options,
        value: value,
        multiple: multiple,
        disabled: disabled,
        invalid: invalid,
        required: required,
        quiet: quiet,
        style: {
          overflowY: 'auto',
          minWidth: minWidth,
          maxWidth: this.state.width > POPOVER_MAX_WIDTH ? this.state.width : null,
          marginRight: quiet && alignRight ? -1 * (QUIET_MARGIN / 2) : null
        },
        autoFocus: true,
        renderItem: renderItem
      }));
    }
  }]);

  return Select;
}(_react["default"].Component), _defineProperty(_class2, "propTypes", {
  /**
   * If true, the select list will close on selection of an item
   */
  closeOnSelect: _propTypes["default"].bool,

  /**
   * String for extra class names to add to the select list
   */
  menuClassName: _propTypes["default"].string,

  /**
   * A function that returns a wrapper component to render a list item label.
   * Useful in providing custom html to the rendered label.
   */
  renderItem: _propTypes["default"].func,

  /** Sets the selected item (controlled) for the component. */
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number, _propTypes["default"].arrayOf(_propTypes["default"].string), _propTypes["default"].arrayOf(_propTypes["default"].number)]),

  /** Sets the initial selected item (uncontrolled) for the component. */
  defaultValue: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number, _propTypes["default"].arrayOf(_propTypes["default"].string), _propTypes["default"].arrayOf(_propTypes["default"].number)]),

  /** Whether to allow multiple item selection. */
  multiple: _propTypes["default"].bool,

  /** Array of strings of options in list */
  options: _propTypes["default"].arrayOf(_propTypes["default"].object),

  /** Function to call when the selected value changes. */
  onChange: _propTypes["default"].func,

  /** Function to call when the dropdown menu is opened. */
  onOpen: _propTypes["default"].func,

  /** Function to call when the dropdown menu is closed. */
  onClose: _propTypes["default"].func,

  /** Whether to render the quiet variant of the component. */
  quiet: _propTypes["default"].bool,

  /** Whether to render the invalid appearance of the component. */
  invalid: _propTypes["default"].bool,

  /** Whether to enforce that at least one option from the list is selected by the user. */
  required: _propTypes["default"].bool,

  /** Whether the component width should adjust to match the width of the selected value's text. */
  flexible: _propTypes["default"].bool,

  /** Placeholder text to display if no items have been selected. */
  placeholder: _propTypes["default"].string,

  /** Sets whether the overlay is flippable. Shift the overlay to the opposite position if out of view. */
  flip: _propTypes["default"].bool,

  /** Sets the positioning of the dropdown to align to the right. */
  alignRight: _propTypes["default"].bool,

  /** Sets the icon displayed in the select bar if multiple items are selectable. */
  icon: _propTypes["default"].node
}), _temp)) || _class) || _class;

exports["default"] = Select;

function SelectMenu(_ref) {
  var onClose = _ref.onClose,
      onOpen = _ref.onOpen,
      onSelect = _ref.onSelect,
      className = _ref.className,
      open = _ref.open,
      placement = _ref.placement,
      style = _ref.style,
      closeOnSelect = _ref.closeOnSelect,
      quiet = _ref.quiet,
      props = _objectWithoutProperties(_ref, ["onClose", "onOpen", "onSelect", "className", "open", "placement", "style", "closeOnSelect", "quiet"]);

  return _react["default"].createElement(_Popover["default"], {
    isDialog: false,
    placement: placement,
    open: open,
    onClose: onClose,
    onOpen: onOpen,
    style: style,
    className: (0, _classnames["default"])('spectrum-Dropdown-popover', {
      'spectrum-Dropdown-popover--quiet': quiet
    }),
    closeOnSelect: closeOnSelect
  }, _react["default"].createElement(_SelectList["default"], _extends({}, props, {
    className: className,
    onChange: onSelect
  })));
}