"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _CheckmarkSmall = _interopRequireDefault(require("../../Icon/core/CheckmarkSmall"));

var _classnames = _interopRequireDefault(require("classnames"));

var _DashSmall = _interopRequireDefault(require("../../Icon/core/DashSmall"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _SwitchBase = _interopRequireDefault(require("../../Switch/js/SwitchBase"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/checkbox/index.css");

  require("../../spectrum-css/checkbox/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/checkbox/index-lg.css");
} else {
  require("../../spectrum-css/checkbox/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/checkbox/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/checkbox/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/checkbox/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/checkbox/multiStops/darkest.css");

var Checkbox =
/*#__PURE__*/
function (_Component) {
  _inherits(Checkbox, _Component);

  function Checkbox() {
    _classCallCheck(this, Checkbox);

    return _possibleConstructorReturn(this, _getPrototypeOf(Checkbox).apply(this, arguments));
  }

  _createClass(Checkbox, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setIndeterminate();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.setIndeterminate();
    } // There is no way to set indeterminate through markup such that it will be picked up by a CSS
    // indeterminate pseudo-selector. It can only be done via javascript.

  }, {
    key: "setIndeterminate",
    value: function setIndeterminate() {
      var indeterminate = this.props.indeterminate;
      var input = this.inputRef && this.inputRef.getInput();

      if (indeterminate != null && input) {
        input.indeterminate = indeterminate;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          indeterminate = _this$props.indeterminate,
          quiet = _this$props.quiet,
          className = _this$props.className,
          otherProps = _objectWithoutProperties(_this$props, ["indeterminate", "quiet", "className"]); // override the aria-checked prop of SwitchBase only if it is indeterminate.


      if (indeterminate) {
        otherProps['aria-checked'] = 'mixed';
      }

      var markIcon = indeterminate ? _react["default"].createElement(_DashSmall["default"], {
        size: null,
        className: "spectrum-Checkbox-partialCheckmark"
      }) : _react["default"].createElement(_CheckmarkSmall["default"], {
        size: null,
        className: "spectrum-Checkbox-checkmark"
      });
      return _react["default"].createElement(_SwitchBase["default"], _extends({
        ref: function ref(el) {
          return _this.inputRef = el;
        },
        inputType: "checkbox",
        className: (0, _classnames["default"])('spectrum-Checkbox', {
          'is-indeterminate': indeterminate,
          'spectrum-Checkbox--quiet': quiet
        }, className),
        inputClassName: "spectrum-Checkbox-input",
        markClassName: "spectrum-Checkbox-box",
        markIcon: markIcon,
        labelClassName: "spectrum-Checkbox-label"
      }, otherProps));
    }
  }]);

  return Checkbox;
}(_react.Component);

exports["default"] = Checkbox;

_defineProperty(Checkbox, "propTypes", {
  /**
   * Label for the checkbox
   */
  label: _propTypes["default"].string,

  /**
   * Whether to render the label for the checkbox
   */
  renderLabel: _propTypes["default"].bool,

  /**
   * defaultChecked is undefined by default so we can respect
   * the value that is passed in without erroneously putting
   * both checked and defaultChecked on the input
   */
  defaultChecked: _propTypes["default"].bool,

  /**
   * if the checkbox can't be interacted with, and also greys it out
   */
  disabled: _propTypes["default"].bool,

  /**
   * Uses standard HTML required to make a form invalid, also get a highlight if not filled in
   */
  required: _propTypes["default"].bool,

  /**
   * If the value is invalid
   */
  invalid: _propTypes["default"].bool,

  /**
   * Makes it so the checkbox can't be interacted with
   */
  readOnly: _propTypes["default"].bool,

  /**
   * Callback for when the checkbox value changes
   */
  onChange: _propTypes["default"].func,

  /**
   * Uses a dash instead of a check to indicate an in between or "unknown" state
   */
  indeterminate: _propTypes["default"].bool,

  /**
  * Whether the checkbox is a quiet variation
  */
  quiet: _propTypes["default"].bool
});

_defineProperty(Checkbox, "defaultProps", {
  renderLabel: true,
  defaultChecked: undefined,
  disabled: false,
  required: false,
  invalid: false,
  readOnly: false,
  onChange: function onChange() {},
  indeterminate: false,
  quiet: false
});

Checkbox.displayName = 'Checkbox';