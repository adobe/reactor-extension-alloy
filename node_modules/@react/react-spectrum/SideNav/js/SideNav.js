"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _events = require("../../utils/events");

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _FocusManager = _interopRequireDefault(require("../../utils/FocusManager"));

var _focusRing = _interopRequireDefault(require("../../utils/focusRing"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

require("../style/index.css");

var _class, _class2, _temp;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/sidenav/index.css");

  require("../../spectrum-css/sidenav/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/sidenav/index-lg.css");
} else {
  require("../../spectrum-css/sidenav/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/sidenav/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/sidenav/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/sidenav/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/sidenav/multiStops/darkest.css");
var SIDENAV_ITEM_SELECTOR = '.spectrum-SideNav-itemLink:not(.is-hidden):not(.is-disabled)';
var SELECTED_SIDENAV_ITEM_SELECTOR = SIDENAV_ITEM_SELECTOR + '.is-selected';

var isNestedSelected = function isNestedSelected(props, value) {
  return props.children && props.children.filter(function (c) {
    var children = c.props.children;

    if (children && typeof children !== 'string') {
      return isNestedSelected(c.props, value);
    }

    return c.props.value === value;
  }).length !== 0;
};

var SideNav = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (0, _focusRing["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  _inherits(SideNav, _Component);

  function SideNav(props) {
    var _this;

    _classCallCheck(this, SideNav);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SideNav).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "state", {
      value: _this.props.defaultValue || _this.props.value
    });

    _this.id = (0, _createId["default"])();
    return _this;
  }

  _createClass(SideNav, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var value = nextProps.value;

      if (value !== this.props.value) {
        this.setState({
          value: value
        });
      }
    }
  }, {
    key: "isSelected",
    value: function isSelected(child) {
      return child.props.value === this.state.value;
    }
  }, {
    key: "isDefaultSelected",
    value: function isDefaultSelected(child) {
      return child.props.value === this.props.defaultValue;
    }
  }, {
    key: "onSelect",
    value: function onSelect(value, e) {
      if (this.props.value === undefined) {
        this.setState({
          value: value
        });
      }

      this.props.onSelect(value, e);
    }
  }, {
    key: "isDefaultExpanded",
    value: function isDefaultExpanded(child) {
      if (child.props.defaultExpanded !== undefined) {
        return child.props.defaultExpanded;
      } // Expand nested sidenav if any item is selected


      return Array.isArray(child.props.children) && isNestedSelected(child.props, this.state.value);
    }
  }, {
    key: "getListRole",
    value: function getListRole() {
      var _this$props = this.props,
          variant = _this$props.variant,
          isNested = _this$props.isNested;

      if (variant === 'multiLevel') {
        return isNested ? 'group' : 'tree';
      }

      return undefined;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          className = _this$props2.className,
          children = _this$props2.children,
          hidden = _this$props2.hidden,
          variant = _this$props2.variant,
          _this$props2$id = _this$props2.id,
          id = _this$props2$id === void 0 ? this.id : _this$props2$id,
          role = _this$props2.role,
          manageTabIndex = _this$props2.manageTabIndex,
          typeToSelect = _this$props2.typeToSelect,
          _this$props2$ariaLeve = _this$props2.ariaLevel,
          ariaLevel = _this$props2$ariaLeve === void 0 ? 1 : _this$props2$ariaLeve,
          autoFocus = _this$props2.autoFocus,
          isNested = _this$props2.isNested,
          ariaLabel = _this$props2['aria-label'],
          ariaLabelledby = _this$props2['aria-labelledby'],
          otherProps = _objectWithoutProperties(_this$props2, ["className", "children", "hidden", "variant", "id", "role", "manageTabIndex", "typeToSelect", "ariaLevel", "autoFocus", "isNested", "aria-label", "aria-labelledby"]);

      var isMultiLevel = variant === 'multiLevel';
      var Element = isNested ? 'div' : 'nav';
      delete otherProps.value;
      return _react["default"].createElement(Element, {
        id: id,
        hidden: hidden,
        "aria-hidden": hidden,
        role: isNested ? 'presentation' : role,
        "aria-label": !isNested ? ariaLabel : undefined,
        "aria-labelledby": !isNested ? ariaLabelledby : undefined,
        className: (0, _classnames["default"])(className, 'react-spectrum-SideNav')
      }, _react["default"].createElement(_FocusManager["default"], {
        itemSelector: SIDENAV_ITEM_SELECTOR,
        selectedItemSelector: SELECTED_SIDENAV_ITEM_SELECTOR,
        manageTabIndex: isMultiLevel || manageTabIndex,
        typeToSelect: isMultiLevel || typeToSelect,
        autoFocus: autoFocus
      }, _react["default"].createElement("ul", _extends({
        className: (0, _classnames["default"])('spectrum-SideNav', {
          'spectrum-SideNav--multiLevel': isMultiLevel
        }),
        role: this.getListRole(),
        id: id + '-list'
      }, (0, _filterDOMProps["default"])(otherProps)), _react.Children.map(children, function (child) {
        return (0, _react.cloneElement)(child, {
          role: isMultiLevel ? 'treeitem' : undefined,
          hidden: hidden,
          manageTabIndex: manageTabIndex,
          ariaLevel: isMultiLevel ? ariaLevel : undefined,
          _nestedNavValue: _this2.state.value,
          _isSelected: _this2.isSelected(child),
          onSelect: (0, _events.chain)(child.props.onSelect, _this2.onSelect),
          defaultExpanded: _this2.isDefaultExpanded(child)
        });
      }))));
    }
  }]);

  return SideNav;
}(_react.Component), _defineProperty(_class2, "propTypes", {
  /**
   * The variant of sidenav to display
   */
  variant: _propTypes["default"].oneOf(['default', 'multiLevel']),

  /**
   * Whether SideNav should use roving tabIndex so that only one item can receive focus at a time. With multiLevel, this defaults to true.
   */
  manageTabIndex: _propTypes["default"].bool,

  /**
   * Whether SideNav should use alphanumeric search to locate next item to focus. With multiLevel, this defaults to true.
   */
  typeToSelect: _propTypes["default"].bool,

  /**
   * Custom className of sidenav to apply
   */
  className: _propTypes["default"].string,

  /**
   * Value of selected Sidenav Item (use for controlled selection)
   */
  value: _propTypes["default"].string,

  /**
   * Value of selected Sidenav Item at initialization
   */
  defaultValue: _propTypes["default"].string,

  /**
   * Whether to automatically set focus to the seleted item when the component mounts.
   */
  autoFocus: _propTypes["default"].bool,

  /**
   * Whether the sidenav is a child of a sidenav item
   */
  isNested: _propTypes["default"].bool,

  /**
   * A select handler for the sidenav
   */
  onSelect: _propTypes["default"].func
}), _defineProperty(_class2, "defaultProps", {
  variant: 'default',
  manageTabIndex: false,
  typeToSelect: false,
  autoFocus: false,
  isNested: false,
  onSelect: function onSelect() {}
}), _temp)) || _class) || _class) || _class;

exports["default"] = SideNav;