"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _events = require("../../utils/events");

var _classnames = _interopRequireDefault(require("classnames"));

var _icon = require("../../utils/icon");

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _focusRing = _interopRequireDefault(require("../../utils/focusRing"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _SideNav = _interopRequireDefault(require("./SideNav"));

var _class, _class2, _temp;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NOOP = function NOOP() {};

var FOCUSABLE_SIDENAV_ITEMLINK_SELECTOR = '.spectrum-SideNav-itemLink[tabIndex]';
/**
 * An item in a sidenav
 */

var SideNavItem = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (0, _focusRing["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  _inherits(SideNavItem, _Component);

  function SideNavItem(props) {
    var _this;

    _classCallCheck(this, SideNavItem);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SideNavItem).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "state", {
      expanded: _this.props.defaultExpanded || _this.props.expanded,
      focused: false
    });

    _defineProperty(_assertThisInitialized(_this), "setSideNavItemRef", function (s) {
      return _this.sideNavItemRef = s;
    });

    _this.id = (0, _createId["default"])();
    return _this;
  }

  _createClass(SideNavItem, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var expanded = nextProps.expanded;

      if (expanded !== this.props.expanded) {
        this.setState(function (prevState) {
          return _objectSpread({}, prevState, {
            expanded: expanded
          });
        });
      }
    }
  }, {
    key: "handleClick",
    value: function handleClick(e) {
      this.props.onClick(e);
      this.onSelectFocused(e);
    }
  }, {
    key: "onSelectFocused",
    value: function onSelectFocused(e) {
      var _this$props = this.props,
          onSelect = _this$props.onSelect,
          value = _this$props.value,
          expanded = _this$props.expanded,
          _this$props$href = _this$props.href,
          href = _this$props$href === void 0 ? e.target ? e.target.href : undefined : _this$props$href;
      var isKeyDown = e.type === 'keydown';

      if (!href || isKeyDown) {
        // When there is no href or if triggered from a keyboard event,
        // preventDefault and stopPropagation.
        e.preventDefault();
        e.stopPropagation(); // If Enter of Space key pressed, trigger click event on event target

        if (isKeyDown && (e.key === 'Enter' || e.key === ' ')) {
          e.target.click();
          return;
        }
      }

      if (expanded === undefined) {
        this.setState(function (prevState) {
          return _objectSpread({}, prevState, {
            expanded: !prevState.expanded
          });
        });
      }

      onSelect(value, e);
    }
    /**
     * Keyboard event handler to interperet ArrowLeft/ArrowRight to collapse/expand section in multiLevel variant.
     * @param {KeyboardEvent} e Keyboard event
     */

  }, {
    key: "onKeyDown",
    value: function onKeyDown(e) {
      var expanded = this.state.expanded;
      var isExpandableTreeItem = this.props.role === 'treeitem' && this.hasNestedNav;

      switch (e.key) {
        case 'ArrowLeft':
        case 'Left':
          if (isExpandableTreeItem) {
            if (expanded) {
              this.onSelectFocused(e);
              this.focus();
            }
          }

          break;

        case 'ArrowRight':
        case 'Right':
          if (isExpandableTreeItem) {
            if (!expanded) {
              this.onSelectFocused(e);
            } else if (this.sideNavItemRef) {
              var links = Array.from(_reactDom["default"].findDOMNode(this).querySelectorAll(FOCUSABLE_SIDENAV_ITEMLINK_SELECTOR));

              if (links.indexOf(e.target) === 0) {
                links[1].focus();
              }
            }
          }

          break;
      }
    }
  }, {
    key: "onFocus",
    value: function onFocus() {
      this.setState({
        focused: true
      });
    }
  }, {
    key: "onBlur",
    value: function onBlur() {
      this.setState({
        focused: false
      });
    }
  }, {
    key: "focus",
    value: function focus() {
      if (this.sideNavItemRef) {
        var link = _reactDom["default"].findDOMNode(this.sideNavItemRef).querySelector(FOCUSABLE_SIDENAV_ITEMLINK_SELECTOR);

        link.focus();
      }
    }
  }, {
    key: "getDescendantId",
    value: function getDescendantId(postfix) {
      var _this$props$id = this.props.id,
          id = _this$props$id === void 0 ? this.id : _this$props$id;
      return postfix ? "".concat(id, "-").concat(postfix) : id;
    }
  }, {
    key: "renderLink",
    value: function renderLink(label, tabIndex, isTreeItem) {
      var _this$props2 = this.props,
          ariaLevel = _this$props2.ariaLevel,
          hidden = _this$props2.hidden,
          _this$props2$id = _this$props2.id,
          id = _this$props2$id === void 0 ? this.id : _this$props2$id,
          icon = _this$props2.icon,
          disabled = _this$props2.disabled,
          href = _this$props2.href,
          renderLink = _this$props2.renderLink,
          role = _this$props2.role,
          target = _this$props2.target,
          _isSelected = _this$props2._isSelected,
          ariaCurrent = _this$props2['aria-current'];
      var _this$state = this.state,
          expanded = _this$state.expanded,
          focused = _this$state.focused;
      var props = {
        href: disabled ? undefined : href,
        onClick: disabled ? undefined : this.handleClick,
        onFocus: disabled ? undefined : this.onFocus,
        onBlur: disabled ? undefined : this.onBlur,
        tabIndex: disabled ? undefined : tabIndex,
        className: (0, _classnames["default"])('spectrum-SideNav-itemLink', {
          'is-selected': _isSelected,
          'is-disabled': disabled,
          'is-focused': focused,
          'is-hidden': hidden
        }),
        id: id,
        role: (disabled || !href) && !isTreeItem ? 'link' : role,
        'aria-disabled': disabled || undefined,
        'aria-expanded': this.hasNestedNav && isTreeItem ? expanded : undefined,
        'aria-owns': this.hasNestedNav && isTreeItem && expanded ? this.getDescendantId('child-list') : undefined,
        'aria-selected': isTreeItem ? focused : undefined,
        'aria-current': _isSelected ? ariaCurrent : undefined,
        'aria-level': ariaLevel,
        target: target
      };

      if (renderLink) {
        return renderLink(props);
      }

      return _react["default"].createElement("a", props, (0, _icon.cloneIcon)(icon, {
        className: 'spectrum-SideNav-itemIcon',
        size: 'S'
      }), label);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          header = _this$props3.header,
          className = _this$props3.className,
          children = _this$props3.children,
          disabled = _this$props3.disabled,
          role = _this$props3.role,
          renderLink = _this$props3.renderLink,
          _this$props3$id = _this$props3.id,
          id = _this$props3$id === void 0 ? this.id : _this$props3$id,
          value = _this$props3.value,
          _isSelected = _this$props3._isSelected,
          _nestedNavValue = _this$props3._nestedNavValue,
          manageTabIndex = _this$props3.manageTabIndex,
          onSelect = _this$props3.onSelect,
          ariaLevel = _this$props3.ariaLevel,
          hidden = _this$props3.hidden,
          otherProps = _objectWithoutProperties(_this$props3, ["header", "className", "children", "disabled", "role", "renderLink", "id", "value", "_isSelected", "_nestedNavValue", "manageTabIndex", "onSelect", "ariaLevel", "hidden"]);

      var _this$state2 = this.state,
          expanded = _this$state2.expanded,
          focused = _this$state2.focused;
      var _this$props4 = this.props,
          label = _this$props4.label,
          _this$props4$tabIndex = _this$props4.tabIndex,
          tabIndex = _this$props4$tabIndex === void 0 ? 0 : _this$props4$tabIndex;

      if (!label && !header) {
        label = children;
      }

      var isTreeItem = role === 'treeitem';
      var isCurrent = !!_nestedNavValue && value === _nestedNavValue;

      if (isTreeItem || manageTabIndex) {
        tabIndex = isCurrent ? tabIndex : -1;
      }

      delete otherProps.label;
      delete otherProps.target;
      delete otherProps['aria-current'];
      return _react["default"].createElement("li", _extends({
        className: (0, _classnames["default"])('spectrum-SideNav-item', {
          'is-selected': _isSelected,
          'is-disabled': disabled,
          'is-focused': focused
        }, className),
        onKeyDown: disabled ? undefined : (0, _events.chain)(this.onKeyDown, _events.interpretKeyboardEvent.bind(this)),
        role: isTreeItem ? 'presentation' : undefined,
        ref: this.setSideNavItemRef
      }, (0, _filterDOMProps["default"])(otherProps)), (label || renderLink) && this.renderLink(label, tabIndex, isTreeItem), header && _react["default"].createElement("h2", {
        className: "spectrum-SideNav-heading",
        id: this.getDescendantId('header')
      }, header), this.hasNestedNav && _react["default"].createElement(_SideNav["default"], {
        isNested: true,
        variant: isTreeItem ? 'multiLevel' : undefined,
        id: this.getDescendantId('child'),
        "aria-labelledby": header ? this.getDescendantId('header') : id,
        ariaLevel: ariaLevel + 1,
        hidden: hidden || (isTreeItem ? !expanded : undefined),
        value: _nestedNavValue,
        onSelect: onSelect
      }, children));
    }
  }, {
    key: "hasNestedNav",
    get: function get() {
      var children = this.props.children;
      return children && typeof children !== 'string';
    }
  }]);

  return SideNavItem;
}(_react.Component), _defineProperty(_class2, "propTypes", {
  /**
   * Custom className of sidenav to apply
   */
  className: _propTypes["default"].string,

  /**
   * Whether the item is disabled
   */
  disabled: _propTypes["default"].bool,

  /**
   * The label to display in the item
   */
  label: _propTypes["default"].string,

  /**
   * The value of item
   */
  value: _propTypes["default"].string,

  /**
   * The href of item
   */
  href: _propTypes["default"].string,

  /**
   * The target type for item link
   */
  target: _propTypes["default"].string,

  /**
   * Icon for item
   */
  icon: _propTypes["default"].node,

  /**
   * Whether item should represent the current page within a set of pages or current location within an environment or context when selected.
   * See <a href="https://www.w3.org/TR/wai-aria-1.1/#aria-current" class="spectrum-Link">WAI-ARIA 1.1 definition of `aria-current (state)`</a>
   * attribute.
   */
  'aria-current': _propTypes["default"].oneOf(['page', 'location']),

  /**
   * Whether the item is expanded in case of multi-level sidenav item
   */
  expanded: _propTypes["default"].bool,

  /**
   * Whether the item is expanded at initialization in case of multi-level sidenav item
   */
  defaultExpanded: _propTypes["default"].bool,

  /**
   * A function that returns a href wrapper component.
   * Useful in providing custom href component(eg. Link from react-router-dom).
   *
   * ```js
   *  <SideNavItem renderLink={(props) => <Link {...props} to="/">Foo</Link>}>
   *  </SideNavItem>
   * ```
   */
  renderLink: _propTypes["default"].func,

  /**
   * A click handler for the item
   */
  onClick: _propTypes["default"].func,

  /**
   * A select handler for the item
   */
  onSelect: _propTypes["default"].func
}), _defineProperty(_class2, "defaultProps", {
  'aria-current': 'page',
  disabled: false,
  target: '_self',
  onSelect: NOOP,
  onClick: NOOP
}), _temp)) || _class) || _class) || _class;

exports["default"] = SideNavItem;