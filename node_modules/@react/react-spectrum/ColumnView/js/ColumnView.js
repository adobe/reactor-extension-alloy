"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Column = _interopRequireDefault(require("./Column"));

var _ColumnViewDataSource = _interopRequireDefault(require("./ColumnViewDataSource"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

require("../style/index.css");

var _class, _class2, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/assetlist/index.css");

  require("../../spectrum-css/assetlist/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/assetlist/index-lg.css");
} else {
  require("../../spectrum-css/assetlist/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/assetlist/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/assetlist/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/assetlist/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/assetlist/multiStops/darkest.css");

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/miller/index.css");

  require("../../spectrum-css/miller/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/miller/index-lg.css");
} else {
  require("../../spectrum-css/miller/index.css");
}

var ColumnView =
/**
 * The top-level column view renders a list of columns
 */
(0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ColumnView, _React$Component);

  function ColumnView(props) {
    var _this;

    _classCallCheck(this, ColumnView);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColumnView).call(this, props));
    _this.columnViewId = (0, _createId["default"])();
    _this.columns = [];
    _this.state = {
      focusedColumnIndex: 0
    };
    return _this;
  }

  _createClass(ColumnView, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      this.UNSAFE_componentWillReceiveProps(this.props);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      var dataSource = this.state.dataSource;

      if (!dataSource || props.dataSource !== this.props.dataSource) {
        dataSource = this.updateDataSource(props.dataSource);
      }

      if (props.selectedItems) {
        dataSource.replaceSelection(props.selectedItems);
      }

      if (props.navigatedPath || dataSource.navigationStack.length === 0) {
        dataSource.setNavigatedPath(props.navigatedPath || []);
      }

      return dataSource;
    }
  }, {
    key: "updateDataSource",
    value: function updateDataSource(dataSource) {
      if (this.state.dataSource) {
        this.teardownEvents(this.state.dataSource);
      } // If the data source provided is a ColumnViewDataSource (old API), use it directly,
      // otherwise wrap it.


      if (!(dataSource instanceof _ColumnViewDataSource["default"])) {
        dataSource = new _ColumnViewDataSource["default"](dataSource);
      }

      dataSource.on('navigate', this.onNavigate);
      dataSource.on('selectionChange', this.onSelectionChange);
      this.setState({
        dataSource: dataSource
      });
      return dataSource;
    }
  }, {
    key: "teardownEvents",
    value: function teardownEvents(dataSource) {
      dataSource.teardown();
      dataSource.removeListener('navigate', this.onNavigate);
      dataSource.removeListener('selectionChange', this.onSelectionChange);
    }
  }, {
    key: "onNavigate",
    value: function onNavigate(stack) {
      var _this2 = this;

      this.forceUpdate(function () {
        if (!_this2.mounted) {
          return;
        }

        var dom = _reactDom["default"].findDOMNode(_this2);

        if (dom) {
          dom.scrollLeft = dom.scrollWidth;

          if (dom.childNodes.length > 1) {
            // If there is a detail item highlighted but no detail column displayed,
            // focus the last column, otherwise the second to last.
            var detail = _this2.state.dataSource.getDetailItem();

            var focusedColumnIndex = dom.childNodes.length - (detail && !_this2.props.renderDetail ? 1 : 2);

            _this2.onColumnFocus(focusedColumnIndex, function () {
              _this2.columns[focusedColumnIndex].focus();
            });
          }
        }
      });

      if (this.props.onNavigate) {
        this.props.onNavigate(stack);
      }
    }
  }, {
    key: "onSelectionChange",
    value: function onSelectionChange(selectedItems) {
      if (this.props.onSelectionChange) {
        this.props.onSelectionChange(selectedItems);
      }
    }
  }, {
    key: "onColumnFocus",
    value: function onColumnFocus(focusedColumnIndex, fn) {
      if (focusedColumnIndex === this.state.focusedColumnIndex) {
        return;
      }

      this.setState({
        focusedColumnIndex: focusedColumnIndex
      }, fn);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.mounted = false;
      this.teardownEvents(this.state.dataSource);
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          _this$props$id = _this$props.id,
          id = _this$props$id === void 0 ? this.columnViewId : _this$props$id,
          className = _this$props.className,
          renderItem = _this$props.renderItem,
          allowsSelection = _this$props.allowsSelection,
          allowsBranchSelection = _this$props.allowsBranchSelection,
          renderDetail = _this$props.renderDetail;
      var _this$state = this.state,
          dataSource = _this$state.dataSource,
          focusedColumnIndex = _this$state.focusedColumnIndex;
      var stack = dataSource.navigationStack;
      var detail = dataSource.getDetailItem();
      var detailNode = dataSource.getDetailNode(); // array of refs for columns

      this.columns = [];

      if (detail) {
        stack = stack.slice(0, -1);
      }

      return _react["default"].createElement("div", {
        role: "tree",
        id: id,
        "aria-label": this.props['aria-label'],
        "aria-labelledby": this.props['aria-labelledby'],
        "aria-multiselectable": allowsSelection,
        className: (0, _classnames["default"])('spectrum-MillerColumns react-spectrum-MillerColumns', className)
      }, stack.map(function (node, index) {
        return _react["default"].createElement(_Column["default"], {
          key: index,
          item: node,
          ref: function ref(column) {
            return _this3.columns[index] = column;
          },
          focused: focusedColumnIndex === index,
          level: index,
          "aria-label": index === 0 ? _this3.props['aria-label'] : null,
          "aria-labelledby": index === 0 ? _this3.props['aria-labelledby'] : null,
          renderItem: renderItem,
          dataSource: dataSource,
          detailNode: renderDetail ? detailNode : null,
          allowsSelection: allowsSelection,
          allowsBranchSelection: allowsBranchSelection,
          onFocus: function onFocus(e) {
            return _this3.onColumnFocus(index);
          }
        });
      }), detail && renderDetail && _react["default"].createElement("div", {
        role: "group",
        id: detailNode.getColumnId(),
        "aria-labelledby": detailNode.getItemId(),
        className: "spectrum-MillerColumns-item"
      }, renderDetail(detail)));
    }
  }]);

  return ColumnView;
}(_react["default"].Component), _defineProperty(_class2, "propTypes", {
  /** The datasource for the column view. Should be a subclass of `TreeDataSource`. */
  dataSource: _propTypes["default"].object.isRequired,

  /** A function which renders an item in a column */
  renderItem: _propTypes["default"].func.isRequired,

  /** A function which renders a detail column for the navigated item */
  renderDetail: _propTypes["default"].func,

  /* A function which renders a component when there are no items */
  // renderEmpty: PropTypes.func, // TODO

  /** A function that is called when the selection changes. Passes a list of all selected items. */
  onSelectionChange: _propTypes["default"].func,

  /** A function that is called when the navigation path changes. */
  onNavigate: _propTypes["default"].func,

  /** Sets the navigated path. Optional. */
  navigatedPath: _propTypes["default"].arrayOf(_propTypes["default"].object),

  /** Sets the selected items. Optional. */
  selectedItems: _propTypes["default"].arrayOf(_propTypes["default"].object),

  /** Whether to allow the user to select items */
  allowsSelection: _propTypes["default"].bool,

  /** Whether to allow selecting branches. On by default. If off, only leaf nodes can be selected. */
  allowsBranchSelection: _propTypes["default"].bool,

  /* Whether to allow resizing the columns */
  // allowsColumnResizing: PropTypes.bool, // TODO

  /* Default width of a column */
  // columnWidth: PropTypes.number, // TODO

  /* Min width of a column */
  // minWidth: PropTypes.number, // TODO

  /* Max width of a column */
  // maxWidth: PropTypes.number // TODO

  /* Custom class name to apply */
  className: _propTypes["default"].string
}), _defineProperty(_class2, "defaultProps", {
  allowsSelection: false,
  allowsBranchSelection: false // allowsColumnResizing: false,
  // columnWidth: 272

}), _temp)) || _class) || _class;

exports["default"] = ColumnView;