"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _Button = _interopRequireDefault(require("../../Button"));

var _ChevronLeftMedium = _interopRequireDefault(require("../../Icon/core/ChevronLeftMedium"));

var _ChevronRightMedium = _interopRequireDefault(require("../../Icon/core/ChevronRightMedium"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _LiveRegionAnnouncer = _interopRequireDefault(require("../../utils/LiveRegionAnnouncer"));

var _intl = require("../../utils/intl");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _Textfield = _interopRequireDefault(require("../../Textfield"));

require("../style/index.css");

var _class, _class2, _temp;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var intlMessages = {
  "cs-CZ": _interopRequireDefault(require("./../intl/cs-CZ.json"))["default"],
  "da-DK": _interopRequireDefault(require("./../intl/da-DK.json"))["default"],
  "de-DE": _interopRequireDefault(require("./../intl/de-DE.json"))["default"],
  "en-US": _interopRequireDefault(require("./../intl/en-US.json"))["default"],
  "es-ES": _interopRequireDefault(require("./../intl/es-ES.json"))["default"],
  "fi-FI": _interopRequireDefault(require("./../intl/fi-FI.json"))["default"],
  "fr-FR": _interopRequireDefault(require("./../intl/fr-FR.json"))["default"],
  "hu-HU": _interopRequireDefault(require("./../intl/hu-HU.json"))["default"],
  "it-IT": _interopRequireDefault(require("./../intl/it-IT.json"))["default"],
  "ja-JP": _interopRequireDefault(require("./../intl/ja-JP.json"))["default"],
  "ko-KR": _interopRequireDefault(require("./../intl/ko-KR.json"))["default"],
  "nb-NO": _interopRequireDefault(require("./../intl/nb-NO.json"))["default"],
  "nl-NL": _interopRequireDefault(require("./../intl/nl-NL.json"))["default"],
  "pl-PL": _interopRequireDefault(require("./../intl/pl-PL.json"))["default"],
  "pt-BR": _interopRequireDefault(require("./../intl/pt-BR.json"))["default"],
  "ru-RU": _interopRequireDefault(require("./../intl/ru-RU.json"))["default"],
  "sv-SE": _interopRequireDefault(require("./../intl/sv-SE.json"))["default"],
  "tr-TR": _interopRequireDefault(require("./../intl/tr-TR.json"))["default"],
  "uk-UA": _interopRequireDefault(require("./../intl/uk-UA.json"))["default"],
  "zh-CN": _interopRequireDefault(require("./../intl/zh-CN.json"))["default"],
  "zh-TW": _interopRequireDefault(require("./../intl/zh-TW.json"))["default"]
};

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/pagination/index.css");

  require("../../spectrum-css/pagination/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/pagination/index-lg.css");
} else {
  require("../../spectrum-css/pagination/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/pagination/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/pagination/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/pagination/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/pagination/multiStops/darkest.css");

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/splitbutton/index.css");

  require("../../spectrum-css/splitbutton/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/splitbutton/index-lg.css");
} else {
  require("../../spectrum-css/splitbutton/index.css");
}

var formatMessage = (0, _intl.messageFormatter)(intlMessages);

var Pagination = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  _inherits(Pagination, _Component);

  function Pagination(props) {
    var _this;

    _classCallCheck(this, Pagination);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pagination).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "defaultPage", _this.props.currentPage || _this.props.defaultPage);

    _defineProperty(_assertThisInitialized(_this), "state", {
      currentPage: _this.defaultPage,
      pageInput: _this.defaultPage
    });

    _this.defaultId = (0, _createId["default"])(); // ref for the Textfield element

    _this.textfieldRef;
    return _this;
  }

  _createClass(Pagination, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var currentPage = nextProps.currentPage;

      if ('currentPage' in nextProps && !this.isInvalidPage(currentPage)) {
        this.setState({
          currentPage: currentPage,
          pageInput: currentPage
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this$state = this.state,
          currentPage = _this$state.currentPage,
          pageInput = _this$state.pageInput;

      if (currentPage === pageInput && pageInput !== prevState.pageInput) {
        this.announcePageInputValue(pageInput);
      }
    }
  }, {
    key: "isInvalidPage",
    value: function isInvalidPage(page) {
      var totalPages = this.props.totalPages;
      return isNaN(page) || page < 1 || totalPages && page > totalPages;
    }
  }, {
    key: "changePage",
    value: function changePage(newPage, eventToFire, event) {
      if (this.isInvalidPage(newPage)) {
        return;
      }

      var isControlled = 'currentPage' in this.props;

      if (eventToFire && newPage !== this.state.currentPage) {
        eventToFire(newPage, event);
      }

      if (!isControlled) {
        this.setState({
          currentPage: newPage,
          pageInput: newPage
        });
      } else if (isControlled && this.state.currentPage !== this.state.pageInput) {
        this.setState({
          pageInput: this.state.currentPage
        });
      }
    }
  }, {
    key: "commitPageInput",
    value: function commitPageInput(value, event) {
      this.changePage(value, this.props.onChange, event);
    }
  }, {
    key: "announcePageInputValue",
    value: function announcePageInputValue(pageNumber) {
      if (this.props.variant === 'explicit' && pageNumber !== '') {
        // Announce new value using a live region
        _LiveRegionAnnouncer["default"].announceAssertive(pageNumber.toString());
      }
    }
  }, {
    key: "onPageInputBlur",
    value: function onPageInputBlur() {
      var _this$state2 = this.state,
          currentPage = _this$state2.currentPage,
          pageInput = _this$state2.pageInput;

      if (currentPage !== pageInput) {
        this.setState({
          pageInput: currentPage
        });
      }
    }
  }, {
    key: "onPageInputChange",
    value: function onPageInputChange(value) {
      if (value === '' || !this.isInvalidPage(parseInt(value, 10))) {
        this.setState({
          pageInput: value
        });
      }
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(event) {
      var pageInput = parseInt(this.state.pageInput, 10);
      var currentPage = pageInput;

      switch (event.key) {
        case 'ArrowUp':
        case 'Up':
          this.commitPageInput(this.state.currentPage + 1, event);
          break;

        case 'ArrowDown':
        case 'Down':
          this.commitPageInput(this.state.currentPage - 1, event);
          break;

        case 'Enter':
          if (isNaN(currentPage)) {
            currentPage = this.state.currentPage;
          }

          this.commitPageInput(currentPage, event);
          break;

        case ' ':
          this.commitPageInput(currentPage, event);
          break;

        default:
          this.onPageInputChange(currentPage);
      }
    }
  }, {
    key: "onPrevious",
    value: function onPrevious(e) {
      this.changePage(this.state.currentPage - 1, this.props.onPrevious, e);
    }
  }, {
    key: "onNext",
    value: function onNext(e) {
      this.changePage(this.state.currentPage + 1, this.props.onNext, e);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          mode = _this$props.mode,
          variant = _this$props.variant,
          totalPages = _this$props.totalPages,
          _this$props$id = _this$props.id,
          id = _this$props$id === void 0 ? this.defaultId : _this$props$id,
          _this$props$ariaLabe = _this$props['aria-label'],
          ariaLabel = _this$props$ariaLabe === void 0 ? formatMessage('pagination') : _this$props$ariaLabe,
          ariaLabelledby = _this$props['aria-labelledby'],
          otherProps = _objectWithoutProperties(_this$props, ["mode", "variant", "totalPages", "id", "aria-label", "aria-labelledby"]);

      delete otherProps.onChange;
      var pageInput = this.state.pageInput;
      var isButtonMode = variant === 'button';
      var isExplicitMode = variant === 'explicit';
      var buttonVariant = isButtonMode ? mode : 'action';
      var isFirst = this.isInvalidPage(parseInt(pageInput, 10) - 1);
      var isLast = this.isInvalidPage(parseInt(pageInput, 10) + 1);
      var previousLabel = formatMessage('previous');
      var inputLabel = formatMessage('page');
      var nextLabel = formatMessage('next');
      var counterId = "".concat(id, "-counter");
      return _react["default"].createElement("nav", _extends({
        className: (0, _classnames["default"])({
          'spectrum-SplitButton': isButtonMode,
          'spectrum-SplitButton--left': isButtonMode,
          'spectrum-Pagination': !isButtonMode,
          'spectrum-Pagination--explicit': isExplicitMode
        }, 'react-spectrum-Pagination'),
        id: id,
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledby
      }, (0, _filterDOMProps["default"])(otherProps)), _react["default"].createElement(_Button["default"], {
        ref: function ref(b) {
          return _this2.prevButtonRef = b;
        },
        onClick: this.onPrevious,
        variant: buttonVariant,
        quiet: !isButtonMode,
        "aria-label": isExplicitMode ? "".concat(previousLabel, ", ").concat(pageInput) : previousLabel,
        "aria-describedby": isExplicitMode ? counterId : null,
        disabled: isExplicitMode && isFirst || null,
        "aria-disabled": isButtonMode && isFirst || null,
        tabIndex: isFirst ? -1 : null,
        className: isButtonMode ? 'spectrum-SplitButton-trigger' : 'spectrum-Pagination-prevButton'
      }, _react["default"].createElement(_ChevronLeftMedium["default"], null)), isExplicitMode && [_react["default"].createElement(_Textfield["default"], {
        ref: function ref(t) {
          return _this2.textfieldRef = t;
        },
        key: 1,
        value: pageInput,
        onBlur: this.onPageInputBlur,
        onChange: this.onPageInputChange,
        onKeyDown: this.onKeyDown,
        "aria-label": inputLabel,
        "aria-describedby": counterId,
        className: "spectrum-Pagination-input"
      }), _react["default"].createElement("span", {
        key: 2,
        id: counterId,
        className: "spectrum-Body--secondary spectrum-Pagination-counter"
      }, formatMessage('page_count', {
        n: totalPages
      }))], _react["default"].createElement(_Button["default"], {
        ref: function ref(b) {
          return _this2.nextButtonRef = b;
        },
        onClick: this.onNext,
        variant: buttonVariant,
        quiet: !isButtonMode,
        "aria-label": isExplicitMode ? "".concat(nextLabel, ", ").concat(pageInput) : nextLabel,
        "aria-describedby": isExplicitMode ? counterId : null,
        disabled: isExplicitMode && isLast || null,
        "aria-disabled": isButtonMode && isLast || null,
        tabIndex: isLast ? -1 : null,
        className: isButtonMode ? 'spectrum-SplitButton-action' : 'spectrum-Pagination-nextButton'
      }, _react["default"].createElement("span", {
        className: "spectrum-Button-label"
      }, isButtonMode ? nextLabel : ''), _react["default"].createElement(_ChevronRightMedium["default"], null)));
    }
  }]);

  return Pagination;
}(_react.Component), _defineProperty(_class2, "propTypes", {
  /**
   * Button will give two button controls, one for increment and one for decrement.
   * Explicit will give a text field input that accepts numbers between 1 and totalPages.
   * When a number is typed in explicit mode, an onChange is fired only when enter is pressed.
   * If the user tabs off without hitting enter and then uses the increment button, it will resume
   * from the number it was at before the user typed anything.
   */
  variant: _propTypes["default"].oneOf(['button', 'explicit']),

  /**
   * The mode of pagination. This is purely cosmetic.
   */
  mode: _propTypes["default"].oneOf(['cta', 'primary', 'secondary']),

  /**
   * The current page number.
   */
  currentPage: _propTypes["default"].number,

  /**
   * The default page number.
   */
  defaultPage: _propTypes["default"].number,

  /**
   * The total page number. If user hits the total number, the pagination will be capped and will not
   * progress any higher. It also can't go lower than 1.
   */
  totalPages: _propTypes["default"].number,

  /**
   * The callback function when the pagination is changed. It sends the value of the new current page.
   */
  onChange: _propTypes["default"].func,

  /**
   * The callback function when the pagination is changed to previous page.
   * It sends the value of the new current page.
   */
  onPrevious: _propTypes["default"].func,

  /**
   * The callback function when the pagination is changed to next page.
   * It sends the value of the new current page.
   */
  onNext: _propTypes["default"].func
}), _defineProperty(_class2, "defaultProps", {
  variant: 'button',
  mode: 'primary',
  defaultPage: 1
}), _temp)) || _class) || _class;

exports["default"] = Pagination;
Pagination.displayName = 'Pagination';