"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = StatusLight;

var _classnames = _interopRequireDefault(require("classnames"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/statuslight/index.css");

  require("../../spectrum-css/statuslight/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/statuslight/index-lg.css");
} else {
  require("../../spectrum-css/statuslight/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/statuslight/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/statuslight/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/statuslight/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/statuslight/multiStops/darkest.css");
var VARIANTS = ['celery', 'yellow', 'fuchsia', 'indigo', 'seafoam', 'chartreuse', 'magenta', 'purple', 'neutral', 'positive', 'notice', 'negative', 'info']; // For backward compatibility

var DEPRECATED_VARIANTS = {
  archived: 'neutral',
  active: 'info'
};

function StatusLight(_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? VARIANTS[0] : _ref$variant,
      children = _ref.children,
      disabled = _ref.disabled,
      className = _ref.className,
      otherProps = _objectWithoutProperties(_ref, ["variant", "children", "disabled", "className"]);

  if (DEPRECATED_VARIANTS[variant]) {
    console.warn("The \"".concat(variant, "\" variant of StatusLight is deprecated. Please use \"").concat(DEPRECATED_VARIANTS[variant], "\" instead."));
    variant = DEPRECATED_VARIANTS[variant];
  }

  return _react["default"].createElement("div", _extends({
    className: (0, _classnames["default"])('spectrum-StatusLight', "spectrum-StatusLight--".concat(variant), {
      'is-disabled': disabled
    }, className)
  }, (0, _filterDOMProps["default"])(otherProps)), children);
}

StatusLight.displayName = 'StatusLight';
StatusLight.propTypes = {
  /**
   * The css class for the status light, it's applied to the top level div.
   */
  className: _propTypes["default"].string,

  /**
   * The variant changes the color of the status light.
   */
  variant: _propTypes["default"].oneOf(VARIANTS),

  /**
   * Greys out the light and label
   */
  disabled: _propTypes["default"].bool
};