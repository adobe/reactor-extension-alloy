"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _events = require("../../utils/events");

var _focusRing = _interopRequireDefault(require("../../utils/focusRing"));

var _string = require("../../utils/string");

var _react = _interopRequireWildcard(require("react"));

var _class, _class2, _temp;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SwitchBase = (0, _convertUnsafeMethod["default"])(_class = (0, _focusRing["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  _inherits(SwitchBase, _Component);

  function SwitchBase(props) {
    var _this;

    _classCallCheck(this, SwitchBase);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SwitchBase).call(this, props));
    var checked = props.checked,
        defaultChecked = props.defaultChecked;
    _this.state = {
      checked: checked !== undefined ? checked : defaultChecked || false
    };
    return _this;
  }

  _createClass(SwitchBase, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if ('checked' in nextProps) {
        this.setState({
          checked: nextProps.checked
        });
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      if (this.inputRef && !this.disabled) {
        this.inputRef.focus();
      }
    }
  }, {
    key: "setChecked",
    value: function setChecked(checked) {
      if (!('checked' in this.props)) {
        this.setState({
          checked: checked
        });
      }
    }
  }, {
    key: "getInput",
    value: function getInput() {
      return this.inputRef;
    }
  }, {
    key: "handleChange",
    value: function handleChange(e) {
      var onChange = this.props.onChange;
      var checked = e.target.checked;
      this.setChecked(checked);
      onChange(checked, e);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          label = _this$props.label,
          value = _this$props.value,
          name = _this$props.name,
          disabled = _this$props.disabled,
          required = _this$props.required,
          invalid = _this$props.invalid,
          readOnly = _this$props.readOnly,
          className = _this$props.className,
          style = _this$props.style,
          children = _this$props.children,
          inputType = _this$props.inputType,
          renderLabel = _this$props.renderLabel,
          inputClassName = _this$props.inputClassName,
          markClassName = _this$props.markClassName,
          markIcon = _this$props.markIcon,
          labelClassName = _this$props.labelClassName,
          onMouseDown = _this$props.onMouseDown,
          onMouseUp = _this$props.onMouseUp,
          otherProps = _objectWithoutProperties(_this$props, ["label", "value", "name", "disabled", "required", "invalid", "readOnly", "className", "style", "children", "inputType", "renderLabel", "inputClassName", "markClassName", "markIcon", "labelClassName", "onMouseDown", "onMouseUp"]);

      var checked = this.state.checked;
      var shouldRenderLabel = renderLabel && (label || children);
      var Element = shouldRenderLabel ? 'label' : 'div'; // Don't let native browser change events bubble up to the root div.
      // Otherwise we double dispatch.

      delete otherProps.onChange; // Add aria-label that concatenates label and children
      // when renderLabel is false and no other aria-label is provided.

      var ariaLabel = null;

      if (otherProps['aria-label']) {
        ariaLabel = otherProps['aria-label'];
        delete otherProps['aria-label'];
      } else if (!renderLabel && (label || children)) {
        var labels = [];

        if (label) {
          labels.push(label);
        }

        if (children) {
          var str = (0, _string.getTextFromReact)(children);

          if (str !== label) {
            labels.push(str);
          }
        }

        ariaLabel = labels.join(' ');
      } // Fix for ESLint error: The attribute aria-checked is not supported by the role textbox. This role is implicit on the element input  jsx-a11y/role-supports-aria-props


      if (inputType && !otherProps['aria-checked']) {
        otherProps['aria-checked'] = checked;
      }

      return _react["default"].createElement(Element, {
        className: (0, _classnames["default"])(className, {
          'is-invalid': invalid,
          'is-disabled': disabled
        }),
        style: style
      }, _react["default"].createElement("input", _extends({
        ref: function ref(el) {
          return _this2.inputRef = el;
        },
        type: inputType,
        className: inputClassName,
        checked: checked,
        disabled: disabled,
        name: name,
        value: value,
        required: required ? true : null,
        readOnly: readOnly,
        onChange: this.handleChange,
        onMouseDown: _events.focusAfterMouseEvent.bind(this, onMouseDown),
        onMouseUp: _events.focusAfterMouseEvent.bind(this, onMouseUp),
        "aria-invalid": invalid || null,
        "aria-label": ariaLabel
      }, (0, _filterDOMProps["default"])(otherProps))), _react["default"].createElement("span", {
        className: markClassName
      }, markIcon), shouldRenderLabel && _react["default"].createElement("span", {
        className: labelClassName
      }, label,
      /* When both label and children are present,
       include a space character so that the text
       doesn't get smushed together. */
      label && children && ' ', children));
    }
  }]);

  return SwitchBase;
}(_react.Component), _defineProperty(_class2, "defaultProps", {
  renderLabel: true,
  // defaultChecked is undefined by default so we can repect
  // the value that is passed in without erroneously putting
  // both checked and defaultChecked on the input
  defaultChecked: undefined,
  disabled: false,
  required: false,
  invalid: false,
  readOnly: false,
  onChange: function onChange() {}
}), _temp)) || _class) || _class) || _class;

exports["default"] = SwitchBase;
SwitchBase.displayName = 'SwitchBase';