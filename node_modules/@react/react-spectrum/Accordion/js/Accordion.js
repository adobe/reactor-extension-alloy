"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _FocusManager = _interopRequireDefault(require("../../utils/FocusManager"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _class, _class2, _temp;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/accordion/index.css");

  require("../../spectrum-css/accordion/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/accordion/index-lg.css");
} else {
  require("../../spectrum-css/accordion/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/accordion/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/accordion/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/accordion/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/accordion/multiStops/darkest.css");
var ACCORDION_ITEM_HEADER_SELECTOR = '.spectrum-Accordion-item:not(.is-disabled) > .spectrum-Accordion-itemHeading > .spectrum-Accordion-itemHeader';
/**
 * An accordion is a list of expandable and collapsible sections.
 */

var Accordion = (0, _convertUnsafeMethod["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  _inherits(Accordion, _Component);

  function Accordion(props) {
    var _this;

    _classCallCheck(this, Accordion);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Accordion).call(this, props));
    var selectedIndex = props.selectedIndex,
        defaultSelectedIndex = props.defaultSelectedIndex;
    var currentSelectedIndex = selectedIndex !== undefined ? selectedIndex : defaultSelectedIndex;
    _this.state = {
      selectedIndex: _this.normalizeSelectedIndex(currentSelectedIndex)
    };
    return _this;
  }

  _createClass(Accordion, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if ('selectedIndex' in nextProps) {
        this.setState({
          selectedIndex: this.normalizeSelectedIndex(nextProps.selectedIndex)
        });
      }
    }
  }, {
    key: "onClickItem",
    value: function onClickItem(index) {
      var selectedIndex = this.state.selectedIndex;

      if (this.props.multiselectable) {
        selectedIndex = _toConsumableArray(selectedIndex);
        var i = selectedIndex.indexOf(index);
        var selected = i !== -1;

        if (selected) {
          selectedIndex.splice(i, 1);
        } else {
          selectedIndex.push(index);
        }
      } else {
        selectedIndex = selectedIndex[0] === index ? [] : [index];
      }

      this.setSelectedKey(selectedIndex);
    }
  }, {
    key: "setSelectedKey",
    value: function setSelectedKey(selectedIndex) {
      // If selectedIndex is defined on props then this is a controlled component and we shouldn't
      // change our own state.
      if (!('selectedIndex' in this.props)) {
        this.setState({
          selectedIndex: selectedIndex
        });
      }

      var deliverableSelectedIndex = selectedIndex;

      if (!this.props.multiselectable) {
        deliverableSelectedIndex = selectedIndex.length ? selectedIndex[0] : null;
      }

      this.props.onChange(deliverableSelectedIndex);
    }
  }, {
    key: "getItems",
    value: function getItems() {
      var _this2 = this;

      var selectedIndex = this.state.selectedIndex;
      var _this$props = this.props,
          multiselectable = _this$props.multiselectable,
          ariaLevel = _this$props.ariaLevel,
          children = _this$props.children;
      return _react["default"].Children.map(children, function (child, index) {
        if (!_react["default"].isValidElement(child)) {
          return null;
        }

        var selected = multiselectable ? selectedIndex.indexOf(index) !== -1 : selectedIndex[0] === index;
        var props = {
          selected: selected,
          ariaLevel: ariaLevel,
          onItemClick: _this2.onClickItem.bind(_this2, index)
        };
        return _react["default"].cloneElement(child, props);
      });
    }
  }, {
    key: "normalizeSelectedIndex",
    value: function normalizeSelectedIndex(selectedIndex) {
      if (!Array.isArray(selectedIndex)) {
        selectedIndex = selectedIndex !== undefined ? [selectedIndex] : [];
      }

      return selectedIndex.map(function (index) {
        return parseInt(index, 10);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          otherProps = _objectWithoutProperties(_this$props2, ["className"]); // We don't need/want to add onChange to the div because we call it manually when we hear that
      // an accordion item has been clicked. If we were to add the handler to the div, it would be
      // called every time any input inside the accordion is changed.


      delete otherProps.onChange;
      return _react["default"].createElement(_FocusManager["default"], {
        itemSelector: ACCORDION_ITEM_HEADER_SELECTOR,
        manageTabIndex: false
      }, _react["default"].createElement("div", _extends({}, (0, _filterDOMProps["default"])(otherProps), {
        className: (0, _classnames["default"])('spectrum-Accordion', className),
        role: "region"
      }), this.getItems()));
    }
  }]);

  return Accordion;
}(_react.Component), _defineProperty(_class2, "propTypes", {
  /**
   * The index of the AccordionItem that should be selected (open). If 'multiselectable'
   * is true, selectedIndex can be an array of indices. When selectedIndex is specified, the component
   * is in a controlled state and an AccordionItem can only be selected by changing the selectedIndex
   * prop value. By default, no AccordionItems will be selected.
   */
  selectedIndex: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number, _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]))]),

  /**
   * The same as selectedIndex except that the component is in an uncontrolled
   * state. AccordionItems can be opened or closed without prop values having changed.
   */
  defaultSelectedIndex: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number, _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]))]),

  /**
   * Whether multiple AccordionItems can be selected (open) at the same time.
   */
  multiselectable: _propTypes["default"].bool,

  /**
   * A function that will be called when an AccordionItem is selected (opened) or
   * deselected (closed). It will be passed the updated selected index.
   */
  onChange: _propTypes["default"].func,

  /**
   * The aria heading level of the accordion items
   */
  ariaLevel: _propTypes["default"].number
}), _defineProperty(_class2, "defaultProps", {
  onChange: function onChange() {},
  multiselectable: false,
  ariaLevel: 3
}), _temp)) || _class;

exports["default"] = Accordion;