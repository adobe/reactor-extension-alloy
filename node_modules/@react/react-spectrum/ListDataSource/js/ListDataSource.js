"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _collectionView = require("@react/collection-view");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// symbol + counter for requests
var REQUEST_ID = 1;
var LAST_REQUEST = Symbol('lastRequest');
/**
 * ListDataSource is a common data source used by views that load a list of data.
 * It supports async loading, infinite scrolling, and sorting data.
 * Used by TableView and GridView.
 */

var ListDataSource =
/*#__PURE__*/
function (_ArrayDataSource) {
  _inherits(ListDataSource, _ArrayDataSource);

  function ListDataSource(props) {
    var _this;

    _classCallCheck(this, ListDataSource);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListDataSource).call(this, props));
    _this[LAST_REQUEST] = 0;
    return _this;
  }
  /**
   * Called on initial load to get the initial items to display,
   * which are inserted into a single section. Should be overridden to return an array of items.
   * If you need to load multiple sections of data, override `performLoad` instead.
   * @abstract
   * @param {?object} sortDescriptor - When called by a TableView, contains the sort column and direction
   * @return {Array}
   */


  _createClass(ListDataSource, [{
    key: "load",
    value: function () {
      var _load = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(sortDescriptor) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function load(_x) {
        return _load.apply(this, arguments);
      }

      return load;
    }()
    /**
     * Called when scrolling near the bottom of a list. You can use this
     * opportunity to load more data, e.g. for infinite scrolling. The array of
     * items you return will be appended to the last section.
     * If you need to load multiple sections of data, override `performLoadMore` instead.
     * @abstract
     * @return {Array}
     */

  }, {
    key: "loadMore",
    value: function () {
      var _loadMore = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function loadMore() {
        return _loadMore.apply(this, arguments);
      }

      return loadMore;
    }()
    /**
     * Triggers loading of data. You should call `insertSection` or `insertItems`
     * as needed to add the loaded data into view. By default, calls `load` to get
     * data for a single section.
     * @param {?object} sortDescriptor - When called by a TableView, contains the sort column and direction
     */

  }, {
    key: "performLoad",
    value: function () {
      var _performLoad = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3(sortDescriptor) {
        var requestId, items;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                requestId = REQUEST_ID++;
                this[LAST_REQUEST] = requestId;
                this.clear(false);
                _context3.next = 5;
                return this.load(sortDescriptor);

              case 5:
                items = _context3.sent;

                // insert items only if it's the last request that's been made
                if (this[LAST_REQUEST] === requestId && items) {
                  this.insertSection(0, items.slice(), false);
                }

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function performLoad(_x2) {
        return _performLoad.apply(this, arguments);
      }

      return performLoad;
    }()
    /**
     * Triggers a reload of the data in the attached view. Will cause the contents of the view
     * to be cleared and `performLoad` to be called again. You should not call `performLoad`
     * directly since that will not allow the view an opportunity to display its loading spinner.
     */

  }, {
    key: "reloadData",
    value: function reloadData() {
      this.emit('reloadData');
    }
    /**
     * Triggers loading of more data when when scrolling near the bottom of a list.
     * You should call `insertSection` or `insertItems` as needed to add the loaded data into view.
     * Returns whether more data was successfully inserted. If you return false, the view will
     * assume that all data has already been loaded and will stop calling `performLoadMore`.
     * By default, calls `loadMore` to get data for a single section.
     * @abstract
     * @return {boolean} - Whether more data was inserted.
     */

  }, {
    key: "performLoadMore",
    value: function () {
      var _performLoadMore = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4() {
        var requestId, items;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                requestId = REQUEST_ID++;
                this[LAST_REQUEST] = requestId;
                _context4.next = 4;
                return this.loadMore();

              case 4:
                items = _context4.sent;

                if (!(items && items.length > 0)) {
                  _context4.next = 8;
                  break;
                }

                if (this[LAST_REQUEST] === requestId) {
                  this.insertItems(new _collectionView.IndexPath(0, this.sections[this.sections.length - 1].length), items.slice(), false);
                }

                return _context4.abrupt("return", true);

              case 8:
                return _context4.abrupt("return", false);

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function performLoadMore() {
        return _performLoadMore.apply(this, arguments);
      }

      return performLoadMore;
    }()
    /**
     * Performs sorting of the data. By default, calls `performLoad` to reload the data
     * with the new sort descriptor.
     * @param {object} sortDescriptor - Contains the sort column and direction
     */

  }, {
    key: "performSort",
    value: function () {
      var _performSort = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5(sortDescriptor) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.performLoad(sortDescriptor);

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function performSort(_x3) {
        return _performSort.apply(this, arguments);
      }

      return performSort;
    }()
  }]);

  return ListDataSource;
}(_collectionView.ArrayDataSource);

exports["default"] = ListDataSource;