"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _CollectionView = _interopRequireDefault(require("../../utils/CollectionView"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _GridItem = _interopRequireDefault(require("./GridItem"));

var _collectionView = require("@react/collection-view");

var _ListDataSource = _interopRequireDefault(require("../../ListDataSource"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

require("../style/index.css");

var _class, _class2, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var GridView = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inherits(GridView, _React$Component);

  function GridView(props) {
    var _this;

    _classCallCheck(this, GridView);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(GridView).call(this, props));
    _this.state = {
      layout: _this.getLayout(props.layout, props.cardSize)
    };
    return _this;
  }

  _createClass(GridView, [{
    key: "getLayout",
    value: function getLayout(layout, cardSize) {
      if (typeof layout === 'function') {
        layout = new layout({
          cardSize: cardSize
        });
      }

      if (layout instanceof _collectionView.Layout) {
        return layout;
      }

      throw new Error('Invalid layout prop passed to GridView. Must be a Layout constructor or an instanceof the Layout class.');
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      if (props.layout !== this.props.layout || props.cardSize !== this.props.cardSize) {
        this.setState({
          layout: this.getLayout(props.layout, props.cardSize)
        });
      }
    }
  }, {
    key: "renderItemView",
    value: function renderItemView(type, data) {
      return _react["default"].createElement(_GridItem["default"], {
        size: this.props.cardSize,
        allowsSelection: this.props.allowsSelection
      }, this.props.renderItem(data));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          allowsSelection = _this$props.allowsSelection,
          allowsMultipleSelection = _this$props.allowsMultipleSelection,
          className = _this$props.className,
          dataSource = _this$props.dataSource,
          onSelectionChange = _this$props.onSelectionChange,
          otherProps = _objectWithoutProperties(_this$props, ["allowsSelection", "allowsMultipleSelection", "className", "dataSource", "onSelectionChange"]);

      var rowCount = dataSource && dataSource.getNumberOfSections() > 0 ? dataSource.getSectionLength(0) : 0;
      return _react["default"].createElement(_CollectionView["default"], _extends({}, otherProps, {
        role: "grid",
        "aria-rowcount": rowCount,
        "aria-multiselectable": allowsSelection && allowsMultipleSelection || null,
        className: (0, _classnames["default"])('react-spectrum-GridView', className),
        renderItemView: this.renderItemView,
        layout: this.state.layout,
        dataSource: dataSource,
        canSelectItems: allowsSelection,
        onSelectionChanged: onSelectionChange,
        allowsMultipleSelection: allowsMultipleSelection,
        selectionMode: "toggle",
        keyboardMode: "focus"
      }));
    }
  }]);

  return GridView;
}(_react["default"].Component), _defineProperty(_class2, "propTypes", {
  /** The layout to arrange the items in. */
  layout: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].instanceOf(_collectionView.Layout)]).isRequired,

  /** Whether changes to the `layout` prop should be animated. */
  animateLayoutChanges: _propTypes["default"].bool,

  /** Whether to display large or small size cards */
  cardSize: _propTypes["default"].oneOf(['S', 'L']),

  /** The datasource for the grid view. Should be a subclass of `ListDataSource`. */
  dataSource: _propTypes["default"].instanceOf(_ListDataSource["default"]).isRequired,

  /** A function which renders a cell. Passed a column object and cell data. */
  renderItem: _propTypes["default"].func.isRequired,

  /** An optional function which is called to render the contents of the grid view when there are no items. */
  renderEmptyView: _propTypes["default"].func,

  /** Whether to allow the user to select items */
  allowsSelection: _propTypes["default"].bool,

  /** Whether to allow multiple selection of items */
  allowsMultipleSelection: _propTypes["default"].bool,

  /** A function that is called when the selection changes. Passed an IndexPathSet object. */
  onSelectionChange: _propTypes["default"].func,

  /** Sets the selected items. Should be an IndexPathSet object or an array of IndexPaths. */
  selectedIndexPaths: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].instanceOf(_collectionView.IndexPath)), _propTypes["default"].instanceOf(_collectionView.IndexPathSet)]),

  /** Whether the user can drag items from the grid view. */
  canDragItems: _propTypes["default"].bool,

  /** A function which renders the view to display under the cursor during drag and drop. */
  renderDragView: _propTypes["default"].func,

  /**
   * Whether the GridView accepts drops.
   * If `true`, the grid view accepts all types of drops. Alternatively,
   * it can be set to an array of accepted drop types.
   */
  acceptsDrops: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].arrayOf(_propTypes["default"].string)]),

  /**
   * Whether drops should appear on top of items, or between them. If you want to customize this
   * or mix the modes, you can override `getDropTarget` on the data source.
   */
  dropPosition: _propTypes["default"].oneOf(['on', 'between'])
}), _defineProperty(_class2, "defaultProps", {
  cardSize: 'L',
  animateLayoutChanges: true,
  allowsSelection: true,
  allowsMultipleSelection: true,
  canDragItems: false,
  acceptsDrops: false,
  dropPosition: 'between'
}), _temp)) || _class) || _class;

exports["default"] = GridView;