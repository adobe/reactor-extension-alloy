"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _collectionView = require("@react/collection-view");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var BaseLayout =
/*#__PURE__*/
function (_Layout) {
  _inherits(BaseLayout, _Layout);

  function BaseLayout() {
    _classCallCheck(this, BaseLayout);

    return _possibleConstructorReturn(this, _getPrototypeOf(BaseLayout).apply(this, arguments));
  }

  _createClass(BaseLayout, [{
    key: "shouldShowDropSpacing",
    value: function shouldShowDropSpacing() {
      var dropTarget = this.collectionView._dropTarget;
      var dragTarget = this.collectionView._dragTarget; // If items are being reordered, don't show the drop spacing if the drop target is right next to the drag target.
      // When dropped, the item will not move since the target is the same as the source.

      if (dropTarget && dragTarget && dragTarget.indexPath.section === dropTarget.indexPath.section && (dragTarget.indexPath.index === dropTarget.indexPath.index || dragTarget.indexPath.index + 1 === dropTarget.indexPath.index)) {
        return false;
      } // Only show the drop spacing if dropping between two items.
      // If the default drop position is not "between", then we could be dropping on the entire grid instead of an item.


      return dropTarget && dropTarget.dropPosition === _collectionView.DragTarget.DROP_BETWEEN && this.component.props.dropPosition === 'between';
    }
  }, {
    key: "getInitialLayoutInfo",
    value: function getInitialLayoutInfo(type, section, index) {
      var initial = _get(_getPrototypeOf(BaseLayout.prototype), "getInitialLayoutInfo", this).call(this, type, section, index);

      initial.opacity = 0;
      initial.transform = 'scale3d(0.8, 0.8, 0.8)';
      return initial;
    }
  }, {
    key: "getFinalLayoutInfo",
    value: function getFinalLayoutInfo(type, section, index) {
      var _final = _get(_getPrototypeOf(BaseLayout.prototype), "getFinalLayoutInfo", this).call(this, type, section, index);

      _final.opacity = 0;
      _final.transform = 'scale3d(0.8, 0.8, 0.8)';
      return _final;
    }
  }, {
    key: "_findClosestLayoutInfo",
    value: function _findClosestLayoutInfo(target, rect) {
      var layoutInfos = this.getVisibleLayoutInfos(rect);
      var best = null;
      var bestDistance = Infinity;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = layoutInfos[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var cur = _step.value;

          if (cur.type === 'item') {
            var dist = Math.pow(target.x - cur.rect.x, 2) + Math.pow(target.y - cur.rect.y, 2);

            if (dist < bestDistance) {
              best = cur;
              bestDistance = dist;
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return best;
    }
  }, {
    key: "_findClosest",
    value: function _findClosest(target, rect) {
      var best = this._findClosestLayoutInfo(target, rect);

      if (best) {
        return new _collectionView.IndexPath(best.section, best.index);
      }

      return null;
    }
  }]);

  return BaseLayout;
}(_collectionView.Layout);

exports["default"] = BaseLayout;