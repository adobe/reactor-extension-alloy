"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = DialogButtons;

var _Button = _interopRequireDefault(require("../../Button"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

require("../style/index.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
var BUTTON_VARIANTS = {
  confirmation: 'cta',
  information: 'primary',
  error: 'primary',
  destructive: 'warning'
};

function DialogButtons(_ref) {
  var autoFocusButton = _ref.autoFocusButton,
      confirmLabel = _ref.confirmLabel,
      secondaryLabel = _ref.secondaryLabel,
      cancelLabel = _ref.cancelLabel,
      confirmDisabled = _ref.confirmDisabled,
      onConfirm = _ref.onConfirm,
      onCancel = _ref.onCancel,
      className = _ref.className,
      variant = _ref.variant;
  var confirmVariant = BUTTON_VARIANTS[variant] || 'primary';

  var onKeyDown = function onKeyDown(event) {
    if (event.key === ' ' || event.key === 'Enter') {
      event.stopPropagation();
    }
  };

  return _react["default"].createElement("div", {
    className: (0, _classnames["default"])('react-spectrum-Dialog-buttons', className)
  }, cancelLabel && _react["default"].createElement(_Button["default"], {
    variant: "secondary",
    label: cancelLabel,
    onClick: onCancel,
    autoFocus: autoFocusButton === 'cancel',
    onKeyDown: onKeyDown
  }), secondaryLabel && _react["default"].createElement(_Button["default"], {
    variant: "secondary",
    label: secondaryLabel,
    onClick: onConfirm ? onConfirm.bind(null, 'secondary') : null,
    autoFocus: autoFocusButton === 'secondary',
    disabled: confirmDisabled || null,
    onKeyDown: onKeyDown
  }), confirmLabel && _react["default"].createElement(_Button["default"], {
    variant: confirmVariant,
    label: confirmLabel,
    onClick: onConfirm ? onConfirm.bind(null, 'primary') : null,
    autoFocus: autoFocusButton === 'confirm',
    disabled: confirmDisabled || null,
    onKeyDown: onKeyDown
  }));
}