"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _DialogButtons = _interopRequireDefault(require("./DialogButtons"));

var _DialogHeader = _interopRequireDefault(require("./DialogHeader"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _FocusManager = require("../../utils/FocusManager");

var _class, _class2, _temp;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/dialog/index.css");

  require("../../spectrum-css/dialog/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/dialog/index-lg.css");
} else {
  require("../../spectrum-css/dialog/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/dialog/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/dialog/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/dialog/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/dialog/multiStops/darkest.css");

var Dialog = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  _inherits(Dialog, _Component);

  function Dialog(props) {
    var _this;

    _classCallCheck(this, Dialog);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dialog).call(this, props));
    _this.dialogId = (0, _createId["default"])();
    return _this;
  }
  /*
   * Calls the props.onConfirm() or props.onCancel() asynchronously if present,
   * then props.onClose() on any response except false
   */


  _createClass(Dialog, [{
    key: "_onAction",
    value: function () {
      var _onAction2 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(action) {
        var shouldClose,
            _len,
            args,
            _key,
            _args = arguments;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                shouldClose = true;

                if (!action) {
                  _context.next = 6;
                  break;
                }

                for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = _args[_key];
                }

                _context.next = 5;
                return action.apply(void 0, args);

              case 5:
                shouldClose = _context.sent;

              case 6:
                if (shouldClose !== false) {
                  this.props.onClose();
                }

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _onAction(_x) {
        return _onAction2.apply(this, arguments);
      }

      return _onAction;
    }()
  }, {
    key: "onConfirm",
    value: function onConfirm() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this._onAction.apply(this, [this.props.onConfirm].concat(args));
    }
  }, {
    key: "onCancel",
    value: function onCancel() {
      this._onAction(this.props.onCancel);
    }
  }, {
    key: "onFocus",
    value: function onFocus(e) {
      if (this.props.onFocus) {
        this.props.onFocus(e);
      }
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(e) {
      var _this$props = this.props,
          confirmDisabled = _this$props.confirmDisabled,
          keyboardConfirm = _this$props.keyboardConfirm,
          onKeyDown = _this$props.onKeyDown,
          disableEscKey = _this$props.disableEscKey;

      if (onKeyDown) {
        onKeyDown(e); // Do nothing if stopPropagation has been called on event after onKeyDown prop executes.

        if (e.isPropagationStopped && e.isPropagationStopped()) {
          return;
        }
      }

      switch (e.key) {
        case 'Enter':
          if (!confirmDisabled && keyboardConfirm) {
            this.onConfirm();
          }

          break;

        case 'Esc':
        case 'Escape':
          if (!disableEscKey) {
            this.onCancel();
          }

          break;

        default:
          if (this.props.trapFocus) {
            (0, _FocusManager.trapFocus)(this, e);
          }

          break;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props2 = this.props,
          children = _this$props2.children,
          _this$props2$classNam = _this$props2.className,
          className = _this$props2$classNam === void 0 ? '' : _this$props2$classNam,
          cancelLabel = _this$props2.cancelLabel,
          confirmLabel = _this$props2.confirmLabel,
          secondaryLabel = _this$props2.secondaryLabel,
          open = _this$props2.open,
          title = _this$props2.title,
          variant = _this$props2.variant,
          mode = _this$props2.mode,
          role = _this$props2.role,
          tabIndex = _this$props2.tabIndex,
          trapFocus = _this$props2.trapFocus,
          isDismissible = _this$props2.isDismissible,
          _this$props2$id = _this$props2.id,
          id = _this$props2$id === void 0 ? this.dialogId : _this$props2$id,
          ariaLabel = _this$props2['aria-label'],
          ariaLabelledby = _this$props2['aria-labelledby'],
          ariaDescribedby = _this$props2['aria-describedby'],
          ariaModal = _this$props2['aria-modal'],
          otherProps = _objectWithoutProperties(_this$props2, ["children", "className", "cancelLabel", "confirmLabel", "secondaryLabel", "open", "title", "variant", "mode", "role", "tabIndex", "trapFocus", "isDismissible", "id", "aria-label", "aria-labelledby", "aria-describedby", "aria-modal"]);

      var fullscreen = mode === 'fullscreen' || mode === 'fullscreenTakeover';
      var derivedVariant = variant || (cancelLabel && confirmLabel ? 'confirmation' : 'information');
      delete otherProps.modalContent;
      delete otherProps.disableEscKey;
      return (// eslint-disable-next-line jsx-a11y/no-static-element-interactions
        _react["default"].createElement("div", {
          className: (0, _classnames["default"])('spectrum-Dialog', 'react-spectrum-Dialog', (_classNames = {}, _defineProperty(_classNames, "spectrum-Dialog--".concat(mode), mode), _defineProperty(_classNames, 'spectrum-Dialog--error', variant === 'error'), _defineProperty(_classNames, 'is-open', open), _defineProperty(_classNames, 'spectrum-Dialog--dismissible', isDismissible), _classNames), className),
          role: role
          /* eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex */
          ,
          tabIndex: tabIndex === undefined || trapFocus ? 1 : tabIndex,
          onFocus: this.onFocus,
          onKeyDown: this.onKeyDown,
          id: id,
          "aria-label": ariaLabel,
          "aria-labelledby": ariaLabelledby || (title && !ariaLabel ? "".concat(id, "-heading") : null),
          "aria-describedby": ariaDescribedby || (title && children ? "".concat(id, "-content") : null),
          "aria-modal": ariaModal || trapFocus
        }, title && _react["default"].createElement(_DialogHeader["default"], _extends({
          variant: derivedVariant,
          title: title,
          fullscreen: fullscreen,
          confirmLabel: confirmLabel,
          secondaryLabel: secondaryLabel,
          cancelLabel: cancelLabel,
          isDismissible: isDismissible,
          id: "".concat(id, "-heading")
        }, otherProps, {
          onConfirm: this.onConfirm,
          onCancel: this.onCancel
        })), title ? _react["default"].createElement("div", {
          className: "spectrum-Dialog-content",
          id: "".concat(id, "-content")
        }, children) : children, !isDismissible && !fullscreen && confirmLabel && _react["default"].createElement(_DialogButtons["default"], _extends({}, this.props, {
          variant: derivedVariant,
          className: "spectrum-Dialog-footer",
          onConfirm: this.onConfirm,
          onCancel: this.onCancel
        })))
      );
    }
  }]);

  return Dialog;
}(_react.Component), _defineProperty(_class2, "propTypes", {
  /**
   * Can dismiss by clicking on the backdrop
   */
  backdropClickable: _propTypes["default"].bool,

  /**
   * Label of the cancel button
   */
  cancelLabel: _propTypes["default"].string,

  /**
   * String of custom class names to add to the top level dom element of Dialog
   */
  className: _propTypes["default"].string,

  /**
   * Confirm button is disabled
   */
  confirmDisabled: _propTypes["default"].bool,

  /**
   * Label of the confirm button
   */
  confirmLabel: _propTypes["default"].string,

  /**
   * Label for an additional button
   */
  secondaryLabel: _propTypes["default"].string,

  /**
   * Callback when dialog closes
   */
  onClose: _propTypes["default"].func,

  /**
   * Callback when cancel button clicked
   */
  onCancel: _propTypes["default"].func,

  /**
   * Callback when confim button clicked. Has a paramater specifying which
   * confirm button is clicked, "primary" or "secondary".
   */
  onConfirm: _propTypes["default"].func,

  /**
   * Have dialog opened when mounted to DOM
   */
  open: _propTypes["default"].bool,

  /**
   * Title of the dialog
   */
  title: _propTypes["default"].node,

  /**
   * Affects the style used by the dialog, establishing its type
   */
  variant: _propTypes["default"].oneOf(['confirmation', 'information', 'destructive', 'error']),

  /**
   *  Affects the display size of the dialog
   */
  mode: _propTypes["default"].oneOf(['alert', 'fullscreen', 'fullscreenTakeover']),

  /**
   * For ARIA telling what type of dialog this is
   */
  role: _propTypes["default"].oneOf(['dialog', 'alertdialog']),

  /**
   * Which button should be autoFocused after mounted to DOM
   */
  autoFocusButton: _propTypes["default"].oneOf(['cancel', 'confirm', 'secondary', null]),

  /**
   * When true, allows user to press enter key and trigger confirm event and close dialog.
   * When false, the user can still use keyboard navigation to close via the comfirm button.
   */
  keyboardConfirm: _propTypes["default"].bool,

  /**
   * Keeps focus from escaping dialog
   */
  trapFocus: _propTypes["default"].bool,

  /**
   * When true, the Esc key will not close the Dialog or trigger an onCancel event.
   * Use for rare cases when a Dialog requires confirmation before being dismissed.
   */
  disableEscKey: _propTypes["default"].bool,

  /**
   * Whether it is a dismissible dialogs. Dismissible dialogs should not have buttons.
   */
  isDismissible: _propTypes["default"].bool
}), _defineProperty(_class2, "defaultProps", {
  backdropClickable: false,
  confirmDisabled: false,
  keyboardConfirm: false,
  open: true,
  role: 'dialog',
  autoFocusButton: null,
  onClose: function onClose() {},
  trapFocus: true,
  disableEscKey: false,
  isDismissible: false
}), _temp)) || _class;

exports["default"] = Dialog;