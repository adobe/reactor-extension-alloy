"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _number = require("../../utils/number");

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _class, _class2, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/slider/index.css");

  require("../../spectrum-css/slider/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/slider/index-lg.css");
} else {
  require("../../spectrum-css/slider/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/slider/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/slider/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/slider/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/slider/multiStops/darkest.css");
var LABEL_POSTFIX = '-label';
var DRAGGED_BODY_CLASS_NAME = 'u-isGrabbing';

var Dial = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Dial, _React$Component);

  function Dial(props) {
    var _this;

    _classCallCheck(this, Dial);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dial).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "state", {
      isDragging: false,
      isFocused: false
    });

    _this.dialId = (0, _createId["default"])();
    _this.state.startValue = _this.getStartValueFromProps(props);
    return _this;
  }

  _createClass(Dial, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      var startValue = this.getStartValueFromProps(props);

      if (startValue != null) {
        this.setState({
          startValue: startValue
        });
      }
    }
  }, {
    key: "getStartValueFromProps",
    value: function getStartValueFromProps(props) {
      // For single slider
      var startValue = props.value == null ? props.defaultValue : props.value;

      if (startValue == null && (this.state.startValue == null || this.props.max !== props.max || this.props.min !== props.min)) {
        startValue = props.min + (props.max - props.min) / 2;
      }

      return startValue;
    }
  }, {
    key: "onMouseDown",
    value: function onMouseDown(e) {
      // stop propagation of event up to .spectrum-Dial-controls
      e.stopPropagation();

      if (this.input) {
        this.input.focus();
      }

      this.setState({
        sliderHandle: null,
        isMouseUp: false,
        isDragging: true
      });
      window.addEventListener('mouseup', this.onMouseUp);
      window.addEventListener('mousemove', this.onMouseMove);
      document.body.classList.add(DRAGGED_BODY_CLASS_NAME);
    }
  }, {
    key: "onMouseUp",
    value: function onMouseUp(e) {
      var _this2 = this;

      var isDragging = this.state.isDragging; // Blur the input so that focused styling is removed with mouse/touch interaction.

      if (this.input && isDragging) {
        this.input.blur();
      }

      this.setState({
        isMouseUp: true,
        isDragging: false
      }, function () {
        // Restore focus to the input so that keyboard interaction will continue to work.
        if (_this2.input) {
          _this2.input.focus();
        }
      });

      if (this.props.onChangeEnd) {
        this.props.onChangeEnd(this.state.startValue);
      }

      window.removeEventListener('mouseup', this.onMouseUp);
      window.removeEventListener('mousemove', this.onMouseMove);
      document.body.classList.remove(DRAGGED_BODY_CLASS_NAME);
    }
  }, {
    key: "calculateHandlePosition",
    value: function calculateHandlePosition(e) {
      var _this$props = this.props,
          min = _this$props.min,
          max = _this$props.max,
          step = _this$props.step;
      var rect = this.dom.getBoundingClientRect();
      var minOffset = rect.top;
      var offset = e.clientY;
      var size = rect.height; // Compute percentage

      var percent = (offset - minOffset) / size;
      percent = 1 - (0, _number.clamp)(percent, 0, 1); // Compute real value based in min and max, and snap to nearest step.

      var value = min + (max - min) * percent;

      if (step) {
        value = Math.round(value / step) * step;
      }

      return value;
    }
  }, {
    key: "onMouseMove",
    value: function onMouseMove(e) {
      e.preventDefault();
      var value = this.calculateHandlePosition(e);
      this.updateValues(value);
    }
  }, {
    key: "updateValues",
    value: function updateValues(startValue) {
      var _this$props2 = this.props,
          min = _this$props2.min,
          max = _this$props2.max,
          step = _this$props2.step,
          onChange = _this$props2.onChange;
      startValue = (0, _number.snapValueToStep)(startValue, min, max, step);

      if (onChange && startValue !== this.state.startValue) {
        onChange(startValue);
      } // If value is not set in props (uncontrolled component), set state


      if (this.props.value == null) {
        this.setState({
          startValue: startValue,
          isFocused: !this.state.isMouseUp
        });
      }
    }
  }, {
    key: "onChange",
    value: function onChange(e) {
      var startValue = this.state.startValue;
      var inputValue = +e.target.value;

      if (inputValue !== startValue) {
        this.updateValues(inputValue);
      }
    }
  }, {
    key: "onFocus",
    value: function onFocus() {
      this.setState({
        isFocused: !this.state.isMouseUp,
        isMouseUp: false
      });
    }
  }, {
    key: "onBlur",
    value: function onBlur() {
      this.setState({
        isFocused: false
      });
    }
  }, {
    key: "onClickValue",
    value: function onClickValue() {
      if (this.input) {
        this.input.focus();
      }
    }
  }, {
    key: "getLabelId",
    value: function getLabelId() {
      return this.dialId + LABEL_POSTFIX;
    }
  }, {
    key: "getInputId",
    value: function getInputId() {
      var _this$props$id = this.props.id,
          id = _this$props$id === void 0 ? this.dialId : _this$props$id;
      return id;
    }
  }, {
    key: "getAriaLabelledby",
    value: function getAriaLabelledby() {
      var label = this.props.label;
      var ariaLabelledby = this.props['aria-labelledby'];
      var ariaLabel = this.props['aria-label'];
      var ids = [];

      if (ariaLabelledby) {
        ids.push(ariaLabelledby);
      }

      if (label || ariaLabel) {
        ids.push(this.getLabelId());
      }

      return ids.join(' ');
    }
  }, {
    key: "renderHandle",
    value: function renderHandle() {
      var _this3 = this;

      var _this$props3 = this.props,
          disabled = _this$props3.disabled,
          max = _this$props3.max,
          min = _this$props3.min,
          step = _this$props3.step,
          otherProps = _objectWithoutProperties(_this$props3, ["disabled", "max", "min", "step"]);

      var _this$state = this.state,
          isDragging = _this$state.isDragging,
          isFocused = _this$state.isFocused,
          startValue = _this$state.startValue;
      var value = startValue;
      var percent = (value - min) / (max - min);
      var ariaLabel = otherProps['aria-label'];
      return _react["default"].createElement("div", {
        className: (0, _classnames["default"])('spectrum-Dial-handle', {
          'is-dragged': isDragging,
          'is-focused': isFocused
        }),
        style: {
          'transform': 'rotate(' + (percent * 270 - 45) + 'deg)'
        },
        role: "presentation"
      }, _react["default"].createElement("input", {
        id: this.getInputId(),
        ref: function ref(i) {
          return _this3.input = i;
        },
        type: "range",
        className: "spectrum-Dial-input",
        step: step,
        max: max,
        min: min,
        disabled: disabled,
        "aria-orientation": "vertical",
        "aria-label": ariaLabel || null,
        "aria-labelledby": this.getAriaLabelledby(),
        "aria-describedby": otherProps['aria-describedby'] || null,
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuetext": value,
        value: value,
        onChange: !disabled ? this.onChange : null,
        onFocus: !disabled ? this.onFocus : null,
        onBlur: !disabled ? this.onBlur : null
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var _this$props4 = this.props,
          disabled = _this$props4.disabled,
          _this$props4$id = _this$props4.id,
          id = _this$props4$id === void 0 ? this.dialId : _this$props4$id,
          label = _this$props4.label,
          renderLabel = _this$props4.renderLabel,
          size = _this$props4.size,
          otherProps = _objectWithoutProperties(_this$props4, ["disabled", "id", "label", "renderLabel", "size"]);

      var startValue = this.state.startValue;
      var sliderClasses = (0, _classnames["default"])('spectrum-Dial', this.props.className, {
        'spectrum-Dial--small': size === 'S',
        'is-disabled': disabled
      });
      var shouldRenderLabel = renderLabel && label;
      var ariaLabel = otherProps['aria-label'];
      var ariaLabelledby = this.getAriaLabelledby();
      var labelValue = startValue;
      return _react["default"].createElement("div", {
        className: sliderClasses,
        ref: function ref(d) {
          return _this4.dom = d;
        },
        role: "presentation"
      }, (shouldRenderLabel || label && ariaLabelledby || ariaLabel) && _react["default"].createElement("div", {
        className: "spectrum-Dial-labelContainer"
      }, _react["default"].createElement("label", {
        id: this.getLabelId(),
        className: "spectrum-Dial-label",
        htmlFor: id,
        hidden: !shouldRenderLabel || null,
        "aria-label": !otherProps['aria-labelledby'] ? ariaLabel : null
      }, label), shouldRenderLabel &&
      /* eslint-disable-next-line jsx-a11y/click-events-have-key-events */
      _react["default"].createElement("div", {
        className: "spectrum-Dial-value",
        role: "textbox",
        tabIndex: -1,
        "aria-readonly": "true",
        "aria-labelledby": ariaLabelledby,
        onClick: !disabled ? this.onClickValue : null
      }, labelValue)), _react["default"].createElement("div", {
        className: "spectrum-Dial-controls",
        role: "presentation",
        onMouseDown: !disabled ? this.onMouseDown : null
      }, this.renderHandle()));
    }
  }]);

  return Dial;
}(_react["default"].Component), _defineProperty(_class2, "propTypes", {
  /**
   * Minimum selectable value
   */
  min: _propTypes["default"].number,

  /**
   * Maximum selectable value
   */
  max: _propTypes["default"].number,

  /**
   * Increment interval
   */
  step: _propTypes["default"].number,

  /**
   * Prevent interaction with component
   */
  disabled: _propTypes["default"].bool,

  /**
   * Display label for component
   */
  renderLabel: _propTypes["default"].bool,

  /**
   * Label to be shown with component
   */
  label: _propTypes["default"].node,

  /**
   * Size of the componet
   */
  size: _propTypes["default"].oneOf([null, 'S', 'L']),

  /**
   * Called when dial is adjusted to a new value
   */
  onChange: _propTypes["default"].func
}), _defineProperty(_class2, "defaultProps", {
  min: 0,
  max: 100,
  step: 0,
  disabled: false,
  renderLabel: false,
  label: null,
  size: null,
  onChange: function onChange() {}
}), _temp)) || _class) || _class;

exports["default"] = Dial;