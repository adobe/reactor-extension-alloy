"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = VisuallyHidden;

var _classnames = _interopRequireDefault(require("classnames"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

require("../../utils/style/index.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function VisuallyHidden(_ref) {
  var children = _ref.children,
      className = _ref.className,
      _ref$element = _ref.element,
      Element = _ref$element === void 0 ? 'span' : _ref$element,
      focusable = _ref.focusable,
      otherProps = _objectWithoutProperties(_ref, ["children", "className", "element", "focusable"]);

  return _react["default"].createElement(Element, _extends({
    className: (0, _classnames["default"])('u-react-spectrum-screenReaderOnly', {
      'is-focusable': focusable
    }, className)
  }, (0, _filterDOMProps["default"])(otherProps)), children);
}

VisuallyHidden.displayName = 'VisuallyHidden';
VisuallyHidden.propTypes = {
  /**
   * The css class for the visually hidden element, it's applied to the top level element.
   */
  className: _propTypes["default"].string,

  /**
   * The DOM element to use to render the visually hidden element
   */
  element: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func]),

  /**
   * Whether the visually hidden element can become visible on keyboard focus.
   */
  focusable: _propTypes["default"].bool
};
VisuallyHidden.defaultProps = {
  element: 'span',
  focusable: false
};