"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Button = _interopRequireDefault(require("../../Button"));

var _classnames = _interopRequireDefault(require("classnames"));

var _icon = require("../../utils/icon");

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _VisuallyHidden = _interopRequireDefault(require("../../VisuallyHidden"));

var _class, _class2, _temp;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/cyclebutton/index.css");

  require("../../spectrum-css/cyclebutton/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/cyclebutton/index-lg.css");
} else {
  require("../../spectrum-css/cyclebutton/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/cyclebutton/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/cyclebutton/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/cyclebutton/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/cyclebutton/multiStops/darkest.css");

var CycleButton = (0, _convertUnsafeMethod["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  _inherits(CycleButton, _Component);

  function CycleButton(props) {
    var _this;

    _classCallCheck(this, CycleButton);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CycleButton).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (e) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          onAction = _this$props.onAction,
          action = _this$props.action;

      var newAction = _this.getNextAction();

      if (onAction) {
        onAction(_this.state.action, e);
      }

      if (!action) {
        // Only update state with next action if uncontrolled
        _this.setActionState(newAction);
      }

      if (onChange) {
        // Call onChange only for controlled components to broadcast the next action
        onChange(newAction, e);
      }
    });

    var defaultAction = props.defaultAction,
        actions = props.actions,
        _action = props.action; // if action prop is not passed in, uncontrolled component

    var _newAction = _action;

    if (!_action) {
      if (defaultAction) {
        _newAction = defaultAction;
      } else {
        // assign first element in actions array if no action or defaultAction were passed
        _newAction = actions[0].name;
      }
    }

    _this.state = {
      action: _newAction,
      ariaBusy: false,
      ariaLive: 'off'
    };
    return _this;
  }

  _createClass(CycleButton, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        ariaLive: 'assertive'
      });
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      this.setActionState(props.action);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.setState({
        ariaLive: 'off'
      });
    }
  }, {
    key: "setActionState",
    value: function setActionState(newAction) {
      var _this2 = this;

      if (newAction && newAction !== this.state.action) {
        this.setState({
          ariaBusy: true
        }, function () {
          return _this2.setState({
            action: newAction
          }, function () {
            return _this2.setState({
              ariaBusy: false
            });
          });
        });
      }
    }
  }, {
    key: "getNextAction",
    value: function getNextAction() {
      var _this3 = this;

      var currentActionIndex = this.props.actions.findIndex(function (e) {
        return e.name === _this3.state.action;
      });
      var nextIndex = currentActionIndex + 1;
      var newAction;

      if (nextIndex < this.props.actions.length) {
        // set action to next element in actions array
        newAction = this.props.actions[nextIndex].name;
      } else {
        // circle back to first element in actions array
        newAction = this.props.actions[0].name;
      }

      return newAction;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          actions = _this$props2.actions,
          otherProps = _objectWithoutProperties(_this$props2, ["className", "actions"]);

      var _this$state = this.state,
          action = _this$state.action,
          ariaBusy = _this$state.ariaBusy,
          ariaLive = _this$state.ariaLive;
      var currentActionObj = actions.find(function (e) {
        return e.name === action;
      });
      var icon, label;

      try {
        icon = currentActionObj.icon;
        label = currentActionObj.label;
      } catch (e) {
        throw 'Invalid Props';
      } // Don't let native browser change events bubble up to the root div.
      // Otherwise we double dispatch.


      delete otherProps.onChange;
      delete otherProps.action;
      return _react["default"].createElement(_Button["default"], _extends({}, otherProps, {
        variant: "action",
        quiet: true,
        className: (0, _classnames["default"])('spectrum-CycleButton', className),
        onClick: this.handleChange,
        "aria-live": ariaLive,
        "aria-relevant": "text",
        "aria-atomic": "true",
        "aria-busy": ariaBusy
      }), _react["default"].createElement(_VisuallyHidden["default"], null, label), (0, _icon.cloneIcon)(icon, {
        size: 'S'
      }));
    }
  }]);

  return CycleButton;
}(_react.Component), _defineProperty(_class2, "propTypes", {
  /**
   * Classes to be applied
   */
  className: _propTypes["default"].string,

  /**
   * Contains options for actions
   */
  actions: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    name: _propTypes["default"].string,
    icon: _propTypes["default"].node,
    label: _propTypes["default"].string
  })).isRequired,

  /**
   * Action used for controlled components.
   * This is used to match action.name
   */
  action: _propTypes["default"].string,

  /**
  * Default action for unconrolled components
  */
  defaultAction: _propTypes["default"].string,

  /**
   * Whether the CycleButton is disabled
   */
  disabled: _propTypes["default"].bool,

  /**
   * Function called when CycleButton is clicked
   * Passes next action name from actions list in props
   */
  onChange: _propTypes["default"].func,

  /**
   * Function called when CycleButton is clicked
   * Passes the current action name from actions list in props
   */
  onAction: _propTypes["default"].func
}), _defineProperty(_class2, "defaultProps", {
  onChange: function onChange() {},
  disabled: false
}), _temp)) || _class;

exports["default"] = CycleButton;
CycleButton.displayName = 'CycleButton';