"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _collectionView = require("@react/collection-view");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var TableViewLayout =
/*#__PURE__*/
function (_ListLayout) {
  _inherits(TableViewLayout, _ListLayout);

  function TableViewLayout() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, TableViewLayout);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TableViewLayout).call(this, options));
    _this.insertionIndicator = null;
    return _this;
  }

  _createClass(TableViewLayout, [{
    key: "getLayoutInfo",
    value: function getLayoutInfo(type, section, index) {
      if (type === 'insertion-indicator') {
        return this.insertionIndicator;
      }

      return _get(_getPrototypeOf(TableViewLayout.prototype), "getLayoutInfo", this).call(this, type, section, index);
    }
  }, {
    key: "getVisibleLayoutInfos",
    value: function getVisibleLayoutInfos(rect) {
      var layoutInfos = _get(_getPrototypeOf(TableViewLayout.prototype), "getVisibleLayoutInfos", this).call(this, rect);

      if (this.insertionIndicator) {
        layoutInfos.push(this.insertionIndicator);
      }

      return layoutInfos;
    }
  }, {
    key: "validate",
    value: function validate() {
      _get(_getPrototypeOf(TableViewLayout.prototype), "validate", this).call(this);

      var count = this.collectionView.getSectionLength(0);
      this.contentHeight = count * this.rowHeight - 1; // Show the drop insertion indicator if the default drop position of the table view is "between",
      // the target's drop position is also "between", and the table is not empty.

      var dropTarget = this.collectionView._dropTarget;
      var showInsertionIndicator = dropTarget && this.component.props.dropPosition === 'between' && dropTarget.dropPosition === _collectionView.DragTarget.DROP_BETWEEN && count > 0;

      if (showInsertionIndicator) {
        var l = new _collectionView.LayoutInfo('insertion-indicator');
        l.rect = new _collectionView.Rect(0, Math.max(0, Math.min(this.contentHeight - 3, dropTarget.indexPath.index * this.rowHeight - 1)), this.collectionView.size.width, 2);
        l.zIndex = 10;
        this.insertionIndicator = l;
      } else {
        this.insertionIndicator = null;
      }
    }
  }, {
    key: "getDropTarget",
    value: function getDropTarget(point) {
      var dropPosition = this.component.props.dropPosition === 'on' ? _collectionView.DragTarget.DROP_ON : _collectionView.DragTarget.DROP_BETWEEN; // If we are dropping between rows, the target should move to the
      // next item halfway through a row.

      if (dropPosition === _collectionView.DragTarget.DROP_BETWEEN) {
        point = point.copy();
        point.y += this.rowHeight / 2;
      }

      var indexPath = this.collectionView.indexPathAtPoint(point);

      if (indexPath) {
        return new _collectionView.DragTarget('item', indexPath, dropPosition);
      } else {
        var index = dropPosition === _collectionView.DragTarget.DROP_ON ? 0 : this.collectionView.getSectionLength(0);
        return new _collectionView.DragTarget('item', new _collectionView.IndexPath(0, index), _collectionView.DragTarget.DROP_BETWEEN);
      }
    }
  }]);

  return TableViewLayout;
}(_collectionView.ListLayout);

exports["default"] = TableViewLayout;