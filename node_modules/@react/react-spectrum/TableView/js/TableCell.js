"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ArrowDownSmall = _interopRequireDefault(require("../../Icon/core/ArrowDownSmall"));

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _FocusManager = require("../../utils/FocusManager");

var _focusRing = _interopRequireDefault(require("../../utils/focusRing"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TableCell = (0, _convertUnsafeMethod["default"])(_class = (0, _focusRing["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TableCell, _React$Component);

  function TableCell(props) {
    var _this;

    _classCallCheck(this, TableCell);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TableCell).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "state", {
      focused: false,
      childFocused: false
    });

    _this.cellId = (0, _createId["default"])();
    return _this;
  }

  _createClass(TableCell, [{
    key: "getCellStyle",
    value: function getCellStyle(column) {
      var style = {
        width: column.width,
        minWidth: column.minWidth,
        maxWidth: column.maxWidth
      };

      if (column.width) {
        style.flexShrink = 0;
      } else {
        style.flexGrow = 1;
        style.flexBasis = 0;
      }

      return style;
    }
  }, {
    key: "onKeyPress",
    value: function onKeyPress(e) {
      if (e.key === 'Enter' || e.key === ' ') {
        if (this.props.onClick) {
          e.preventDefault();
          this.props.onClick(e);
        }
      }
    }
  }, {
    key: "onFocus",
    value: function onFocus(e) {
      var cellNode = _reactDom["default"].findDOMNode(this);

      var childFocused = cellNode !== e.target;
      this.setState({
        childFocused: childFocused
      });

      if (!childFocused) {
        // If a child can receive focus, marshall focus to the focusable descendant
        var focusable = cellNode.querySelector(_FocusManager.FOCUSABLE_ELEMENT_SELECTOR);

        if (focusable && focusable !== e.relatedTarget) {
          e.stopPropagation();
          e.preventDefault(); // prevent extra focus events from propagating focusing child

          e.nativeEvent.stopImmediatePropagation();
          focusable.focus();
          return;
        }
      }

      if (this.props.onFocus) {
        this.props.onFocus(e);
      }
    }
  }, {
    key: "onBlur",
    value: function onBlur(e) {
      var cellNode = _reactDom["default"].findDOMNode(this);

      if (cellNode !== e.target && !cellNode.contains(document.activeElement)) {
        this.setState({
          childFocused: false
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          column = _this$props.column,
          _this$props$id = _this$props.id,
          id = _this$props$id === void 0 ? this.cellId : _this$props$id,
          isHeaderRow = _this$props.isHeaderRow,
          sortDir = _this$props.sortDir,
          onClick = _this$props.onClick,
          onDoubleClick = _this$props.onDoubleClick,
          className = _this$props.className,
          children = _this$props.children,
          allowsMultipleSelection = _this$props.allowsMultipleSelection,
          tabIndex = _this$props.tabIndex,
          rowFocused = _this$props.rowFocused;
      var isSortable = isHeaderRow && column && column.sortable;
      className = (0, _classnames["default"])(className, {
        'spectrum-Table-headCell': isHeaderRow,
        'spectrum-Table-cell': !isHeaderRow,
        'react-spectrum-Table-cell': !isHeaderRow,
        'is-sortable': isSortable,
        'is-sorted-desc': isHeaderRow && sortDir === 1,
        'is-sorted-asc': isHeaderRow && sortDir === -1,
        'spectrum-Table-cell--divider': !isHeaderRow && column && column.divider,
        'spectrum-Table-cell--alignCenter': column && column.align === 'center',
        'spectrum-Table-cell--alignRight': column && column.align === 'right'
      });
      var ariaSort = null;

      if (isSortable) {
        switch (sortDir) {
          case 1:
            ariaSort = 'descending';
            break;

          case -1:
            ariaSort = 'ascending';
            break;

          default:
            ariaSort = 'none';
        }
      }

      if (isSortable) {
        tabIndex = rowFocused || !allowsMultipleSelection ? 0 : -1;
      } else if (tabIndex !== null) {
        tabIndex = this.state.childFocused ? null : -1;
      }

      return (// eslint-disable-next-line jsx-a11y/no-static-element-interactions
        _react["default"].createElement("div", {
          className: className,
          style: column && this.getCellStyle(column),
          onClick: onClick,
          onDoubleClick: onDoubleClick,
          onKeyPress: isSortable ? this.onKeyPress : null,
          onFocus: this.onFocus,
          onBlur: this.onBlur,
          id: id,
          role: isHeaderRow ? 'columnheader' : 'gridcell',
          "aria-sort": ariaSort,
          "aria-label": this.props['aria-label'],
          "aria-colindex": this.props['aria-colindex'],
          tabIndex: tabIndex
        }, children, isSortable && _react["default"].createElement(_ArrowDownSmall["default"], {
          className: "spectrum-Table-sortedIcon",
          size: null
        }))
      );
    }
  }]);

  return TableCell;
}(_react["default"].Component), _temp)) || _class) || _class) || _class;

exports["default"] = TableCell;