"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _Checkbox = _interopRequireDefault(require("../../Checkbox"));

var _classnames = _interopRequireDefault(require("classnames"));

var _closest = _interopRequireDefault(require("dom-helpers/query/closest"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _FocusManager = _interopRequireWildcard(require("../../utils/FocusManager"));

var _focusRing = _interopRequireDefault(require("../../utils/focusRing"));

var _intl = require("../../utils/intl");

var _react = _interopRequireDefault(require("react"));

var _TableCell = _interopRequireDefault(require("./TableCell"));

var _class, _temp;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var intlMessages = {
  "cs-CZ": _interopRequireDefault(require("./../intl/cs-CZ.json"))["default"],
  "da-DK": _interopRequireDefault(require("./../intl/da-DK.json"))["default"],
  "de-DE": _interopRequireDefault(require("./../intl/de-DE.json"))["default"],
  "en-US": _interopRequireDefault(require("./../intl/en-US.json"))["default"],
  "es-ES": _interopRequireDefault(require("./../intl/es-ES.json"))["default"],
  "fi-FI": _interopRequireDefault(require("./../intl/fi-FI.json"))["default"],
  "fr-FR": _interopRequireDefault(require("./../intl/fr-FR.json"))["default"],
  "hu-HU": _interopRequireDefault(require("./../intl/hu-HU.json"))["default"],
  "it-IT": _interopRequireDefault(require("./../intl/it-IT.json"))["default"],
  "ja-JP": _interopRequireDefault(require("./../intl/ja-JP.json"))["default"],
  "ko-KR": _interopRequireDefault(require("./../intl/ko-KR.json"))["default"],
  "nb-NO": _interopRequireDefault(require("./../intl/nb-NO.json"))["default"],
  "nl-NL": _interopRequireDefault(require("./../intl/nl-NL.json"))["default"],
  "pl-PL": _interopRequireDefault(require("./../intl/pl-PL.json"))["default"],
  "pt-BR": _interopRequireDefault(require("./../intl/pt-BR.json"))["default"],
  "ru-RU": _interopRequireDefault(require("./../intl/ru-RU.json"))["default"],
  "sv-SE": _interopRequireDefault(require("./../intl/sv-SE.json"))["default"],
  "tr-TR": _interopRequireDefault(require("./../intl/tr-TR.json"))["default"],
  "uk-UA": _interopRequireDefault(require("./../intl/uk-UA.json"))["default"],
  "zh-CN": _interopRequireDefault(require("./../intl/zh-CN.json"))["default"],
  "zh-TW": _interopRequireDefault(require("./../intl/zh-TW.json"))["default"]
};
var formatMessage = (0, _intl.messageFormatter)(intlMessages);
var CELL_SELECTOR = '[role="gridcell"],[role="columnheader"],[role="rowheader"]';

var TableRow = (0, _convertUnsafeMethod["default"])(_class = (0, _focusRing["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TableRow, _React$Component);

  function TableRow(props) {
    var _this;

    _classCallCheck(this, TableRow);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TableRow).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "state", {
      focused: false
    });

    _this.rowId = (0, _createId["default"])();
    return _this;
  }

  _createClass(TableRow, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if ('focused' in nextProps) {
        this.setState({
          focused: nextProps.focused
        });
      }
    }
    /**
     * Sets focus to the table row DOM element or appropriate column.
     */

  }, {
    key: "focus",
    value: function focus() {
      if (this.row) {
        var _this$props = this.props,
            tableView = _this$props.tableView,
            isHeaderRow = _this$props.isHeaderRow; // tableView keeps track of the focusedColumnIndex when a cell receive focus

        if (tableView) {
          // if a focusedColumnIndex is defined, try to set focus to the appropriate cell.
          if (tableView.focusedColumnIndex !== null) {
            this.row.children[tableView.focusedColumnIndex].focus();
          }
        } // If no child of row receives focus:
        // - focus the first focusable descendant of the header row
        // - or focus the row itself.


        if (this.row.contains && !this.row.contains(document.activeElement)) {
          var focusable = isHeaderRow ? this.row.querySelector(_FocusManager.FOCUSABLE_ELEMENT_SELECTOR) : this.row;

          if (focusable) {
            focusable.focus();
          }
        }
      }
    }
  }, {
    key: "onCellClick",
    value: function onCellClick(column, isDoubleClick, e) {
      var rowIndex = null;

      if (this.props.collectionView) {
        var indexPath = this.props.collectionView.indexPathForComponent(this);
        rowIndex = indexPath && indexPath.index;
      }

      if (!isDoubleClick && this.props.onCellClick) {
        this.props.onCellClick(column, rowIndex);
      }

      if (isDoubleClick && this.props.onCellDoubleClick) {
        this.props.onCellDoubleClick(column, rowIndex);
      }

      if (e && e.target.tabIndex === -1) {
        this.focus();
      }
    }
    /**
     * Handle click event on checkbox to toggle selection of row using keyboard.
     * @param {MouseEvent} e Click event
     */

  }, {
    key: "onCheckboxClick",
    value: function onCheckboxClick(e) {
      // force selection of item in the selection view
      var _this$props2 = this.props,
          collectionView = _this$props2.collectionView,
          isHeaderRow = _this$props2.isHeaderRow;

      if (collectionView && !isHeaderRow) {
        var indexPath = collectionView.indexPathForComponent(this);
        collectionView.selectItem(indexPath, true, e.shiftKey, true);
      }
    }
  }, {
    key: "onMouseDown",
    value: function onMouseDown(event) {
      // Stop propagation on mouse down if the target is a focusable child of a cell within the row.
      // Otherwise, collection-view will try to focus the row instead.
      if (event.target.matches(_FocusManager.FOCUSABLE_ELEMENT_SELECTOR) && event.target !== this.row && !event.target.matches(CELL_SELECTOR)) {
        event.stopPropagation();
      }
    }
    /**
     * Handle key down event on a row, to navigate between focusable descendant
     * elements using the left or right arrow keys, or to navigate between the
     * header row and the body using the down or up arrow keys.
     * @param {KeyboardEvent} event A keydown event
     */

  }, {
    key: "onKeyDown",
    value: function onKeyDown(event) {
      var _this$props3 = this.props,
          tableView = _this$props3.tableView,
          _this$props3$collecti = _this$props3.collectionView,
          collectionView = _this$props3$collecti === void 0 ? tableView ? tableView.collection : null : _this$props3$collecti,
          isHeaderRow = _this$props3.isHeaderRow,
          onSelectChange = _this$props3.onSelectChange,
          onCellFocus = _this$props3.onCellFocus;
      var key = event.key;
      var focusable = null;

      switch (key) {
        case 'Tab':
          if (onCellFocus) {
            onCellFocus(null);
          }

          break;

        case 'ArrowUp':
        case 'Up':
          if (!isHeaderRow && collectionView) {
            var indexPath = collectionView.indexPathForComponent(this);

            if (indexPath && indexPath.section === 0 && indexPath.index === 0) {
              if (tableView && tableView.headerRowRef) {
                // try to focus appropriate focusedColumnIndex in the header row
                tableView.headerRowRef.focus();
              }
            }
          }

          break;

        case 'ArrowDown':
        case 'Down':
          if (isHeaderRow) {
            if (onCellFocus && (0, _closest["default"])(event.target, '.spectrum-Table-checkboxCell')) {
              onCellFocus(null);
            }

            if (collectionView) {
              focusable = collectionView.getDOMNode().querySelector(_FocusManager.FOCUSABLE_ELEMENT_SELECTOR);
            }
          } else if (collectionView) {
            var _indexPath = collectionView.indexPathForComponent(this);

            if (_indexPath && _indexPath.section === 0 && _indexPath.index === collectionView.getSectionLength(0) - 1) {
              event.preventDefault();
              event.stopPropagation();
            }
          }

          break;

        case 'a':
          if (isHeaderRow && (event.metaKey || event.ctrlKey) && onSelectChange) {
            onSelectChange(true);
            event.preventDefault();
            event.stopPropagation();
          }

          break;

        case 'Escape':
        case 'Esc':
          if (onSelectChange) {
            onSelectChange(false);
          }

          break;

        case 'Enter':
        case ' ':
          // Stop propagation on enter and space keys if the target is a focusable child of a cell within the row.
          // Otherwise, collection-view will try to focus the row instead.
          if (event.target.matches(_FocusManager.FOCUSABLE_ELEMENT_SELECTOR) && event.target !== this.row && !event.target.matches(CELL_SELECTOR)) {
            event.stopPropagation();
          }

          break;
      }

      if (focusable) {
        event.preventDefault();
        event.stopPropagation();
        focusable.focus();
      }
    }
    /**
     * Handles focus event on row, setting focused state and refreshing visible items in the collection.
     * @param {FocusEvent} event A focus event
     */

  }, {
    key: "onFocus",
    value: function onFocus(e) {
      this.setState({
        focused: true
      });

      if (e && e.target === this.row) {
        if (!this.row.contains(e.relatedTarget)) {
          // If row itself is receiving focus, call focus method to see if focus is being marshalled to a focused column
          this.focus();

          if (this.props.onFocus) {
            this.props.onFocus(e);
          }
        } else if (this.props.onCellFocus) {
          this.props.onCellFocus(null);
        }
      }
    }
    /**
     * Handles blur event on row, setting focused state and refreshing visible items in the collection.
     */

  }, {
    key: "onBlur",
    value: function onBlur() {
      this.setState({
        focused: false
      });
    }
    /**
     * Handles focus event on cell
     * @param {Number} columnIndex Index of column receiving keyboard focus
     */

  }, {
    key: "onCellFocus",
    value: function onCellFocus(columnIndex, e) {
      if (this.props.onCellFocus) {
        this.props.onCellFocus(columnIndex, e);
      }
    }
  }, {
    key: "getAriaLabelledby",
    value: function getAriaLabelledby() {
      var _this$props4 = this.props,
          columns = _this$props4.columns,
          isHeaderRow = _this$props4.isHeaderRow,
          allowsSelection = _this$props4.allowsSelection,
          _this$props4$id = _this$props4.id,
          id = _this$props4$id === void 0 ? this.rowId : _this$props4$id,
          tableId = _this$props4.tableId;
      var ariaLabelledby = null;

      if (isHeaderRow && tableId) {
        id = [tableId, 0].join('-');
      }

      ariaLabelledby = columns.map(function (column, i) {
        if (allowsSelection) {
          i += 1;
        }

        if (column.announce !== false) {
          return [[tableId, 0, i].join('-'), [id, i].join('-')].join(' ');
        }
      }).join(' ');
      return !isHeaderRow ? ariaLabelledby : null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props5 = this.props,
          columns = _this$props5.columns,
          renderCell = _this$props5.renderCell,
          _this$props5$selected = _this$props5.selected,
          selected = _this$props5$selected === void 0 ? false : _this$props5$selected,
          _this$props5$focused = _this$props5.focused,
          focused = _this$props5$focused === void 0 ? false : _this$props5$focused,
          isHeaderRow = _this$props5.isHeaderRow,
          allowsSelection = _this$props5.allowsSelection,
          onSelectChange = _this$props5.onSelectChange,
          _this$props5$id = _this$props5.id,
          id = _this$props5$id === void 0 ? this.rowId : _this$props5$id,
          tableId = _this$props5.tableId,
          _this$props5$layoutIn = _this$props5.layoutInfo,
          layoutInfo = _this$props5$layoutIn === void 0 ? {} : _this$props5$layoutIn,
          collectionView = _this$props5.collectionView,
          allowsMultipleSelection = _this$props5.allowsMultipleSelection,
          otherProps = _objectWithoutProperties(_this$props5, ["columns", "renderCell", "selected", "focused", "isHeaderRow", "allowsSelection", "onSelectChange", "id", "tableId", "layoutInfo", "collectionView", "allowsMultipleSelection"]);

      var index = layoutInfo.index;
      var className = (0, _classnames["default"])('react-spectrum-TableView-row', {
        'spectrum-Table-head': isHeaderRow,
        'spectrum-Table-row': !isHeaderRow,
        'is-selected': selected,
        'is-focused': focused && this.state.focused,
        'is-drop-target': this.props['drop-target']
      });
      var ariaRowIndex = null;
      var tabIndex = null;
      var indeterminate = null;

      if (isHeaderRow && tableId) {
        id = [tableId, 0].join('-');
      }

      if (collectionView) {
        if (!isHeaderRow) {
          ariaRowIndex = index;

          if (ariaRowIndex !== null) {
            ariaRowIndex += 2;
          } // determine appropriate tabIndex for row depending on whether it is focused.


          tabIndex = focused || !collectionView.focusedIndexPath ? 0 : -1;
        } else {
          indeterminate = !selected && collectionView.selectedIndexPaths.length > 0;
        }
      }

      delete otherProps.onFocus;
      var checkboxCellClassNames = (0, _classnames["default"])('spectrum-Table-checkboxCell', 'react-spectrum-TableView-checkboxCell');
      return _react["default"].createElement(_FocusManager["default"], {
        itemSelector: _FocusManager.FOCUSABLE_ELEMENT_SELECTOR,
        orientation: "horizontal",
        manageTabIndex: false,
        includeSelf: true,
        ignorePageUpPageDown: true
      }, _react["default"].createElement("div", _extends({
        className: className,
        ref: function ref(row) {
          return _this2.row = row;
        },
        id: id,
        role: "row",
        tabIndex: tabIndex,
        "aria-selected": allowsSelection ? selected : null,
        "aria-rowindex": isHeaderRow ? 1 : ariaRowIndex,
        "aria-labelledby": this.getAriaLabelledby(),
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onKeyDown: this.onKeyDown,
        onMouseDown: this.onMouseDown
      }, (0, _filterDOMProps["default"])(otherProps)), allowsSelection && _react["default"].createElement(_TableCell["default"], {
        id: [id, 0].join('-'),
        isHeaderRow: isHeaderRow,
        className: checkboxCellClassNames,
        "aria-colindex": "1",
        "aria-label": isHeaderRow && allowsMultipleSelection === false ? formatMessage('Select') : null,
        tabIndex: isHeaderRow ? null : -1,
        onFocus: this.onCellFocus.bind(this, 0),
        focused: focused
      }, _react["default"].createElement(_Checkbox["default"], {
        className: "spectrum-Table-checkbox",
        checked: selected,
        indeterminate: indeterminate,
        onChange: onSelectChange,
        onClick: this.onCheckboxClick,
        onMouseDown: function onMouseDown(e) {
          return e.stopPropagation();
        },
        id: [id, 0, 'checkbox'].join('-'),
        tabIndex: isHeaderRow || focused ? 0 : -1,
        "aria-label": isHeaderRow ? formatMessage('Select All') : formatMessage('Select'),
        "aria-labelledby": !isHeaderRow ? [id, 0, 'checkbox'].join('-') + ' ' + this.getAriaLabelledby() : null,
        title: isHeaderRow ? formatMessage('Select All') : formatMessage('Select'),
        style: isHeaderRow && !allowsMultipleSelection ? {
          visibility: 'hidden'
        } : null
      })), columns.map(function (column, i) {
        return _react["default"].cloneElement(renderCell(column, i, focused), {
          key: i,
          id: [id, allowsSelection ? i + 1 : i].join('-'),
          'aria-colindex': allowsSelection ? i + 2 : i + 1,
          onClick: _this2.onCellClick.bind(_this2, column, false),
          onDoubleClick: _this2.onCellClick.bind(_this2, column, true),
          onFocus: _this2.onCellFocus.bind(_this2, allowsSelection ? i + 1 : i),
          rowFocused: focused
        });
      })));
    }
  }]);

  return TableRow;
}(_react["default"].Component), _temp)) || _class) || _class) || _class;

exports["default"] = TableRow;