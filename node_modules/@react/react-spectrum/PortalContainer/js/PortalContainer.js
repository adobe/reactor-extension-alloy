"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var children = {};
/*
 * A global portal that lives in the document body which can be used to add
 * overlays like modals outside the normal React component tree.
 */

var PortalContainer =
/*#__PURE__*/
function () {
  function PortalContainer() {
    _classCallCheck(this, PortalContainer);
  }

  _createClass(PortalContainer, null, [{
    key: "add",

    /**
     * Renders the child
     * @param child component to be render
     * @param context Parent with the context
     */
    value: function add(child, context) {
      var node = children[child.key] || document.createElement('div');

      if (!context) {
        _reactDom["default"].render(child, node);
      } else {
        _reactDom["default"].unstable_renderSubtreeIntoContainer(context, child, node);
      }

      children[child.key] = node;
    }
    /**
     * Remove child from the dom
     * @param child
     */

  }, {
    key: "remove",
    value: function remove(child) {
      _reactDom["default"].unmountComponentAtNode(children[child.key]);

      delete children[child.key];
    }
    /**
     * Remove all portals from the dom
     */

  }, {
    key: "removeAll",
    value: function removeAll() {
      for (var child in children) {
        // skip loop if the property is from prototype
        if (!children.hasOwnProperty(child)) {
          continue;
        }

        _reactDom["default"].unmountComponentAtNode(children[child]);

        delete children[child];
      }
    }
  }]);

  return PortalContainer;
}();

exports["default"] = PortalContainer;