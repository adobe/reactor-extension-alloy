"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _class, _class2, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/dropzone/index.css");

  require("../../spectrum-css/dropzone/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/dropzone/index-lg.css");
} else {
  require("../../spectrum-css/dropzone/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/dropzone/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/dropzone/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/dropzone/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/dropzone/multiStops/darkest.css");

var DropZone =
/**
 * A DropZone component is an area that accepts drag and drop of files and other objects.
 */
(0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DropZone, _React$Component);

  function DropZone(props) {
    var _this;

    _classCallCheck(this, DropZone);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DropZone).call(this, props));
    _this.state = {
      draggingOver: false
    };
    _this.debouncedDragLeave = null;
    return _this;
  }

  _createClass(DropZone, [{
    key: "clearDebouncedDragLeave",
    value: function clearDebouncedDragLeave() {
      if (this.debouncedDragLeave) {
        clearTimeout(this.debouncedDragLeave);
        this.debouncedDragLeave = null;
      }
    }
  }, {
    key: "onDragOver",
    value: function onDragOver(e) {
      if (this.props.shouldAccept && !this.props.shouldAccept(e)) {
        e.dataTransfer.dropEffect = 'none';
        return;
      }

      e.preventDefault();
      this.clearDebouncedDragLeave();

      if (!this.state.draggingOver) {
        this.setState({
          draggingOver: true
        });
      }

      e.dataTransfer.dropEffect = this.props.dropEffect;

      if (this.props.onDragOver) {
        this.props.onDragOver(e);
      }
    }
  }, {
    key: "onDragLeave",
    value: function onDragLeave(e) {
      var _this2 = this;

      this.clearDebouncedDragLeave();
      this.debouncedDragLeave = setTimeout(function () {
        if (_this2.state.draggingOver) {
          _this2.setState({
            draggingOver: false
          });
        }

        if (_this2.props.onDragLeave) {
          _this2.props.onDragLeave(e);
        }
      }, 100);
    }
  }, {
    key: "onDrop",
    value: function onDrop(e) {
      e.preventDefault();
      this.clearDebouncedDragLeave();

      if (this.state.draggingOver) {
        this.setState({
          draggingOver: false
        });
      }

      if (this.props.onDrop) {
        this.props.onDrop(e);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          otherProps = _objectWithoutProperties(_this$props, ["children", "className"]);

      return _react["default"].createElement("div", _extends({}, (0, _filterDOMProps["default"])(otherProps), {
        className: (0, _classnames["default"])('spectrum-Dropzone', {
          'is-dragged': this.state.draggingOver
        }, className),
        onDrop: this.onDrop,
        onDragOver: this.onDragOver,
        onDragLeave: this.onDragLeave
      }), children);
    }
  }]);

  return DropZone;
}(_react["default"].Component), _defineProperty(_class2, "defaultProps", {
  dropEffect: 'copy'
}), _defineProperty(_class2, "propTypes", {
  /**
   * Controls the cursor displayed when dragging over the drop zone
   * This is the standard DataTransfer.dropEffect https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/dropEffect
   * and also affects what the target will accept.
   */
  dropEffect: _propTypes["default"].oneOf(['copy', 'move', 'link', 'none']),

  /**
   * A function that should return a boolean indicating whether a drop is accepted
   */
  shouldAccept: _propTypes["default"].func,

  /**
   * A callback that is called when dragging leaves the drop zone
   */
  onDragLeave: _propTypes["default"].func,

  /**
   * A callback that is called when dragging over the drop zone
   */
  onDragOver: _propTypes["default"].func,

  /**
   * A callback that is called when a drop occurs
   */
  onDrop: _propTypes["default"].func,

  /**
   * Custom className to apply to this component
   */
  className: _propTypes["default"].string
}), _temp)) || _class;

exports["default"] = DropZone;