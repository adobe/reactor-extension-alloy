"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addToast = addToast;
exports.removeToast = removeToast;
exports.success = success;
exports.warning = warning;
exports.error = error;
exports.info = info;
exports.ToastContainer = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _CSSTransition = _interopRequireDefault(require("react-transition-group/CSSTransition"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _timer = _interopRequireDefault(require("../../utils/timer"));

var _Toast = _interopRequireDefault(require("./Toast"));

var _state = require("./state");

var _TransitionGroup = _interopRequireDefault(require("react-transition-group/TransitionGroup"));

require("../style/index.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TOAST_TIMEOUT = 5000;
var TOAST_ANIMATION_TIME = 200;
/**
 * @type {Map<Toast, {Timer, int}>}
 * Maps allow us to use objects as keys
 * timer - a Timer object
 * id - a unique integer to identify the toast by, used
 *   to keep the key so React doesn't clobber our DOM and
 *   cause use to lose focus while other elements are
 *   being removed around it
 */

var TOAST_DATA = new Map();

var ToastContainer =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ToastContainer, _React$Component);

  function ToastContainer() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ToastContainer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ToastContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      placement: _state.TOAST_PLACEMENT,
      toasts: []
    });

    return _this;
  }

  _createClass(ToastContainer, [{
    key: "timerAction",
    value: function timerAction(toast, action) {
      if (TOAST_DATA.has(toast)) {
        var timer = TOAST_DATA.get(toast).timer;

        if (timer) {
          timer[action]();
        }
      }
    }
  }, {
    key: "add",
    value: function add(toast) {
      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOAST_TIMEOUT;

      if (timeout < 0) {
        timeout = TOAST_TIMEOUT;
      }

      TOAST_DATA.set(toast, {
        timer: timeout === 0 ? null : new _timer["default"](this.remove.bind(this, toast), timeout),
        id: (0, _createId["default"])()
      });
      this.setState({
        toasts: [].concat(_toConsumableArray(this.state.toasts), [toast])
      });
    }
  }, {
    key: "remove",
    value: function remove(toast, e) {
      var currentToasts = this.state.toasts;
      var toasts = currentToasts.filter(function (t) {
        return t !== toast;
      });

      if (toasts.length !== currentToasts.length && toast.props.onClose) {
        toast.props.onClose(e);
      }

      this.setState({
        toasts: toasts
      });
      this.timerAction(toast, 'pause');
      TOAST_DATA["delete"](toast);
    }
  }, {
    key: "onFocus",
    value: function onFocus(toast, e) {
      this.timerAction(toast, 'pause');

      if (toast.props.onFocus) {
        toast.props.onFocus();
      }
    }
  }, {
    key: "onBlur",
    value: function onBlur(toast, e) {
      this.timerAction(toast, 'resume');

      if (toast.props.onBlur) {
        toast.props.onBlur();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state$placement = this.state.placement.split(' '),
          _this$state$placement2 = _slicedToArray(_this$state$placement, 2),
          position = _this$state$placement2[0],
          containerPlacement = _this$state$placement2[1];

      var className = (0, _classnames["default"])('react-spectrum-ToastContainer', "react-spectrum-ToastContainer--".concat(position), containerPlacement && "react-spectrum-ToastContainer--".concat(containerPlacement));
      return _react["default"].createElement(_TransitionGroup["default"], {
        className: className
      }, this.state.toasts.map(function (toast) {
        return _react["default"].createElement(_CSSTransition["default"], {
          key: TOAST_DATA.get(toast).id,
          classNames: "react-spectrum-Toast-slide-".concat(position),
          timeout: TOAST_ANIMATION_TIME
        }, _react["default"].cloneElement(toast, {
          onClose: _this2.remove.bind(_this2, toast),
          onFocus: _this2.onFocus.bind(_this2, toast),
          onBlur: _this2.onBlur.bind(_this2, toast)
        }));
      }));
    }
  }]);

  return ToastContainer;
}(_react["default"].Component);

exports.ToastContainer = ToastContainer;

function createToastNode(container) {
  var parent = container || document.querySelector('.react-spectrum-provider') || document.body;
  var node = document.createElement('div');
  parent.appendChild(node);
  return node;
}

function ensureToastContainer(container, callback) {
  var toastContainer = _state.TOAST_CONTAINERS.get(container); // Make sure that toastContainer is a real DOM node, not only a memory footprint of previously cached node.


  if (toastContainer && document.body.contains(_reactDom["default"].findDOMNode(toastContainer))) {
    callback(toastContainer);
  } else {
    var toastContainerRef;

    _reactDom["default"].render(_react["default"].createElement(ToastContainer, {
      ref: function ref(_ref) {
        return toastContainerRef = _ref;
      }
    }), createToastNode(container), function () {
      _state.TOAST_CONTAINERS.set(container, toastContainerRef);

      callback(toastContainerRef);
    });
  }
}

function addToast(toast, timeout, container) {
  ensureToastContainer(container, function (toastContainer) {
    return toastContainer.add(toast, timeout);
  });
}

function removeToast(toast, container) {
  ensureToastContainer(container, function (toastContainer) {
    return toastContainer.remove(toast);
  });
}

function success(message) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  addToast(_react["default"].createElement(_Toast["default"], _extends({
    closable: true,
    variant: "success"
  }, options), message), options.timeout, options.container);
}

function warning(message) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  addToast(_react["default"].createElement(_Toast["default"], _extends({
    closable: true,
    variant: "warning"
  }, options), message), options.timeout, options.container);
}

function error(message) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  addToast(_react["default"].createElement(_Toast["default"], _extends({
    closable: true,
    variant: "error"
  }, options), message), options.timeout, options.container);
}

function info(message) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  addToast(_react["default"].createElement(_Toast["default"], _extends({
    closable: true,
    variant: "info"
  }, options), message), options.timeout, options.container);
}