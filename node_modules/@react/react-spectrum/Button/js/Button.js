"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _events = require("../../utils/events");

var _classnames = _interopRequireDefault(require("classnames"));

var _icon = require("../../utils/icon");

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _CornerTriangle = _interopRequireDefault(require("../../Icon/core/CornerTriangle"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _focusRing = _interopRequireWildcard(require("../../utils/focusRing"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

require("../style/index.css");

var _class, _class2, _temp;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/button/index.css");

  require("../../spectrum-css/button/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/button/index-lg.css");
} else {
  require("../../spectrum-css/button/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/button/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/button/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/button/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/button/multiStops/darkest.css");
// For backward compatibility with coral
var VARIANTS = {
  quiet: {
    variant: 'primary',
    quiet: true
  },
  minimal: {
    variant: 'secondary',
    quiet: true
  },
  icon: {
    variant: 'action',
    quiet: true
  }
};
/**
 * A **button** represents an action a user can take. Buttons can be clicked or tapped to
 * perform an action or to navigate to another page. Buttons in Spectrum have several variations
 * for different uses and multiple levels of loudness for various attention-getting needs.
 */

var Button = (0, _convertUnsafeMethod["default"])(_class = (0, _focusRing["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  _inherits(Button, _Component);

  function Button() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Button);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Button)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "onClick", function (event) {
      // This is needed when `element` is an anchor or something similar.
      // When `element` is a button, we won't even get here if it's disabled and clicked.
      if (_this.props.disabled) {
        // If the element is an anchor with an href, we need to preventDefault() or the browser
        // will follow the link.
        event.preventDefault();
      } else if (_this.props.onClick) {
        var _this$props;

        for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          rest[_key2 - 1] = arguments[_key2];
        }

        (_this$props = _this.props).onClick.apply(_this$props, [event].concat(rest));
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onKeyDownSpace", function (event) {
      if (event.key === ' ' || event.key === 'Enter') {
        event.preventDefault();

        _this.buttonRef.click();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "setButtonRef", function (b) {
      return _this.buttonRef = b;
    });

    return _this;
  }

  _createClass(Button, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.autoFocus) {
        // wait a frame to make sure the button in the DOM and focusable
        requestAnimationFrame(function () {
          return _this2.focus();
        });
      }
    }
    /**
     * Focus the button
     */

  }, {
    key: "focus",
    value: function focus() {
      if (this.buttonRef && !this.props.disabled && this.buttonRef.focus) {
        this.buttonRef.focus();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          _this$props2$element = _this$props2.element,
          Element = _this$props2$element === void 0 ? 'button' : _this$props2$element,
          label = _this$props2.label,
          children = _this$props2.children,
          _this$props2$variant = _this$props2.variant,
          variant = _this$props2$variant === void 0 ? 'secondary' : _this$props2$variant,
          logic = _this$props2.logic,
          quiet = _this$props2.quiet,
          icon = _this$props2.icon,
          selected = _this$props2.selected,
          block = _this$props2.block,
          className = _this$props2.className,
          disabled = _this$props2.disabled,
          invalid = _this$props2.invalid,
          onMouseDown = _this$props2.onMouseDown,
          onMouseUp = _this$props2.onMouseUp,
          autoFocus = _this$props2.autoFocus,
          holdAffordance = _this$props2.holdAffordance,
          otherProps = _objectWithoutProperties(_this$props2, ["element", "label", "children", "variant", "logic", "quiet", "icon", "selected", "block", "className", "disabled", "invalid", "onMouseDown", "onMouseUp", "autoFocus", "holdAffordance"]); // Map variants for backwards compatibility


      if (VARIANTS[variant]) {
        var mappedVariant = VARIANTS[variant];
        var variantName = (mappedVariant.quiet ? 'quiet ' : '') + "\"".concat(mappedVariant.variant, "\"");
        console.warn("The \"".concat(variant, "\" variant of Button is deprecated. Please use the ").concat(variantName, " variant instead."));
        variant = mappedVariant.variant;
        quiet = mappedVariant.quiet;
      }

      var shouldRenderHoldAffordance = false; // Some button variants were broken out into their own components, map them appropriately

      var baseButtonClass = 'spectrum-Button';

      if (variant === 'action' || variant === 'toggle') {
        baseButtonClass = 'spectrum-ActionButton';
        shouldRenderHoldAffordance = holdAffordance;

        if (variant === 'toggle') {
          quiet = true;
        }

        variant = '';
      } else if (logic) {
        baseButtonClass = 'spectrum-LogicButton';
      } else if (variant === 'clear') {
        baseButtonClass = 'spectrum-ClearButton';
        variant = '';
      } else if (variant === 'field') {
        baseButtonClass = 'spectrum-FieldButton';
        variant = '';
      } else if (variant === 'tool') {
        baseButtonClass = 'spectrum-Tool'; // hold affordance is really only a part of tool.

        shouldRenderHoldAffordance = holdAffordance;
        variant = '';
      }

      if (Element !== 'button') {
        otherProps.role = 'button';
        otherProps.tabIndex = disabled ? null : otherProps.tabIndex || 0;
        otherProps['aria-disabled'] = disabled || null;

        if (Element === 'a' && disabled && otherProps.href) {
          otherProps.href = null;
        }

        otherProps.onKeyDown = disabled ? null : this.onKeyDownSpace;
      }

      var labelContents = label || (typeof children === 'string' ? children : null);
      var ariaExpanded = null;

      if (otherProps['aria-expanded'] !== undefined) {
        ariaExpanded = otherProps['aria-expanded'];
      } else if (otherProps['aria-haspopup']) {
        ariaExpanded = selected || null;
      }

      var filteredProps = typeof Element === 'string' ? (0, _filterDOMProps["default"])(otherProps) : otherProps;
      return _react["default"].createElement(Element, _extends({}, filteredProps, {
        className: (0, _classnames["default"])(baseButtonClass, quiet ? "".concat(baseButtonClass, "--quiet") : '', variant ? "".concat(baseButtonClass, "--").concat(variant) : '', _defineProperty({
          'is-selected': selected,
          'is-disabled': disabled,
          'is-invalid': invalid,
          'spectrum-Button--block': block
        }, _focusRing.FOCUS_RING_CLASSNAME, autoFocus), className),
        disabled: disabled,
        "aria-invalid": invalid || null,
        "aria-expanded": ariaExpanded,
        onClick: this.onClick,
        onMouseDown: (0, _events.chain)(this.onMouseDown, _events.focusAfterMouseEvent.bind(this, onMouseDown)),
        onMouseUp: (0, _events.chain)(this.onMouseUp, _events.focusAfterMouseEvent.bind(this, onMouseUp)),
        ref: this.setButtonRef
      }), (0, _icon.cloneIcon)(icon, {
        size: 'S'
      }), labelContents && _react["default"].createElement("span", {
        className: baseButtonClass + '-label'
      }, labelContents), shouldRenderHoldAffordance && _react["default"].createElement(_CornerTriangle["default"], {
        role: "presentation",
        size: null,
        className: "spectrum-Tool-hold"
      }), typeof children !== 'string' && children);
    }
  }]);

  return Button;
}(_react.Component), _defineProperty(_class2, "propTypes", {
  /**
   * The variant of button to display
   */
  variant: _propTypes["default"].oneOf(['cta', 'primary', 'secondary', 'warning', 'action', 'toggle', 'and', 'or', 'icon', 'quiet', 'minimal', 'dropdown', 'clear', 'field', 'tool', 'overBackground']),

  /**
   * Whether the button should render using a quiet variant
   */
  quiet: _propTypes["default"].bool,

  /**
   * Whether the button is a logic button variant
   */
  logic: _propTypes["default"].bool,

  /**
   * Whether the button is disabled
   */
  disabled: _propTypes["default"].bool,

  /**
   * Whether the button represents a selected state
   */
  selected: _propTypes["default"].bool,

  /**
   * Whether the button represents an invalid state
   */
  invalid: _propTypes["default"].bool,

  /**
   * An icon to render in the button.
   */
  icon: _propTypes["default"].element,

  /**
   * The label to display in the button
   */
  label: _propTypes["default"].string,

  /**
   * Whether the button is a block element
   */
  block: _propTypes["default"].bool,

  /**
   * The DOM element to use to render the button
   */
  element: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func]),

  /**
   * Whether the button should be auto focused on mount
   */
  autoFocus: _propTypes["default"].bool,

  /**
   * A click handler for the button
   */
  onClick: _propTypes["default"].func,

  /**
   * A visual variation that puts a small triangle in the lower right
   */
  holdAffordance: _propTypes["default"].bool
}), _defineProperty(_class2, "defaultProps", {
  autoFocus: false,
  block: false,
  disabled: false,
  element: 'button',
  invalid: false,
  label: '',
  logic: false,
  quiet: false,
  selected: false,
  variant: 'secondary',
  holdAffordance: false
}), _temp)) || _class) || _class;

exports["default"] = Button;