"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _Autocomplete = _interopRequireDefault(require("../../Autocomplete"));

var _Button = _interopRequireDefault(require("../../Button"));

var _events = require("../../utils/events");

var _ChevronDownMedium = _interopRequireDefault(require("../../Icon/core/ChevronDownMedium"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _intl = require("../../utils/intl");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Textfield = _interopRequireDefault(require("../../Textfield"));

var _class, _class2, _temp;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var intlMessages = {
  "cs-CZ": _interopRequireDefault(require("./../intl/cs-CZ.json"))["default"],
  "da-DK": _interopRequireDefault(require("./../intl/da-DK.json"))["default"],
  "de-DE": _interopRequireDefault(require("./../intl/de-DE.json"))["default"],
  "en-US": _interopRequireDefault(require("./../intl/en-US.json"))["default"],
  "es-ES": _interopRequireDefault(require("./../intl/es-ES.json"))["default"],
  "fi-FI": _interopRequireDefault(require("./../intl/fi-FI.json"))["default"],
  "fr-FR": _interopRequireDefault(require("./../intl/fr-FR.json"))["default"],
  "hu-HU": _interopRequireDefault(require("./../intl/hu-HU.json"))["default"],
  "it-IT": _interopRequireDefault(require("./../intl/it-IT.json"))["default"],
  "ja-JP": _interopRequireDefault(require("./../intl/ja-JP.json"))["default"],
  "ko-KR": _interopRequireDefault(require("./../intl/ko-KR.json"))["default"],
  "nb-NO": _interopRequireDefault(require("./../intl/nb-NO.json"))["default"],
  "nl-NL": _interopRequireDefault(require("./../intl/nl-NL.json"))["default"],
  "pl-PL": _interopRequireDefault(require("./../intl/pl-PL.json"))["default"],
  "pt-BR": _interopRequireDefault(require("./../intl/pt-BR.json"))["default"],
  "ru-RU": _interopRequireDefault(require("./../intl/ru-RU.json"))["default"],
  "sv-SE": _interopRequireDefault(require("./../intl/sv-SE.json"))["default"],
  "tr-TR": _interopRequireDefault(require("./../intl/tr-TR.json"))["default"],
  "uk-UA": _interopRequireDefault(require("./../intl/uk-UA.json"))["default"],
  "zh-CN": _interopRequireDefault(require("./../intl/zh-CN.json"))["default"],
  "zh-TW": _interopRequireDefault(require("./../intl/zh-TW.json"))["default"]
};

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/inputgroup/index.css");

  require("../../spectrum-css/inputgroup/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/inputgroup/index-lg.css");
} else {
  require("../../spectrum-css/inputgroup/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/inputgroup/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/inputgroup/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/inputgroup/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/inputgroup/multiStops/darkest.css");

var getLabel = function getLabel(o) {
  return typeof o === 'string' ? o : o.label;
};

var formatMessage = (0, _intl.messageFormatter)(intlMessages);

var ComboBox = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ComboBox, _React$Component);

  function ComboBox(props) {
    var _this;

    _classCallCheck(this, ComboBox);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ComboBox).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "state", {
      open: false,
      count: null
    });

    _defineProperty(_assertThisInitialized(_this), "setAutocompleteRef", function (a) {
      return _this.autocomplete = a;
    });

    _defineProperty(_assertThisInitialized(_this), "setTextFieldRef", function (t) {
      return _this.textfield = t;
    });

    _this.comboBoxId = (0, _createId["default"])();
    return _this;
  }

  _createClass(ComboBox, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      if (props.showMenu != null && props.showMenu !== this.props.showMenu) {
        this.setState({
          open: props.showMenu
        });
      }
    }
  }, {
    key: "onButtonClick",
    value: function onButtonClick() {
      this.textfield.focus();
      this.autocomplete.toggleMenu();
    }
  }, {
    key: "getCompletions",
    value: function getCompletions(text) {
      if (this.shouldFilter(text)) {
        // show options that start with the text first, then
        // show other options containing the text
        return this.props.options.filter(function (option) {
          return getLabel(option).toLowerCase().includes(text.toLowerCase());
        }).sort(function (a, b) {
          var aStartsWithText = getLabel(a).toLowerCase().startsWith(text.toLowerCase());
          var bStartsWithText = getLabel(b).toLowerCase().startsWith(text.toLowerCase());

          if (aStartsWithText && !bStartsWithText) {
            return -1;
          }

          if (!aStartsWithText && bStartsWithText) {
            return 1;
          }

          return 0;
        });
      }

      return this.props.options;
    }
  }, {
    key: "shouldFilter",
    value: function shouldFilter(text) {
      // if any input has been made since we opened the menu, let's filter
      if (this.changeSinceOpen) {
        return true;
      } // if the current value isn't in the list, let's filter


      return !this.props.options.some(function (o) {
        return getLabel(o) === text;
      });
    }
  }, {
    key: "onMenuShow",
    value: function onMenuShow() {
      if (this.props.showMenu !== null) {
        this.setState({
          open: true
        });
      }
    }
  }, {
    key: "onMenuHide",
    value: function onMenuHide() {
      this.changeSinceOpen = false;

      if (this.props.showMenu !== null) {
        this.setState({
          open: false
        });
      }
    }
  }, {
    key: "onChange",
    value: function onChange(value) {
      this.changeSinceOpen = true;
      var count = value ? this.getCompletions(value).length : null;
      this.setState({
        count: count
      });
    }
  }, {
    key: "getButtonLabel",
    value: function getButtonLabel() {
      var options = this.props.options;
      var count = this.state.count;
      var key = 'Show suggestions';

      if (count === null && options.length > 0) {
        count = options.length;
      }

      if (count === 0) {
        key = 'No matching results';
      } else if (count > 1) {
        key = 'Show {0} suggestions';
      } else if (count === 1) {
        key = 'Show suggestion';
      }

      return formatMessage(key, [count]);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          _this$props$id = _this$props.id,
          id = _this$props$id === void 0 ? this.comboBoxId : _this$props$id,
          className = _this$props.className,
          value = _this$props.value,
          disabled = _this$props.disabled,
          required = _this$props.required,
          invalid = _this$props.invalid,
          quiet = _this$props.quiet,
          onChange = _this$props.onChange,
          onSelect = _this$props.onSelect,
          renderItem = _this$props.renderItem,
          onMenuToggle = _this$props.onMenuToggle,
          showMenu = _this$props.showMenu,
          props = _objectWithoutProperties(_this$props, ["id", "className", "value", "disabled", "required", "invalid", "quiet", "onChange", "onSelect", "renderItem", "onMenuToggle", "showMenu"]);

      return _react["default"].createElement(_Autocomplete["default"], {
        className: (0, _classnames["default"])('spectrum-InputGroup', {
          'spectrum-InputGroup--quiet': quiet
        }, className),
        ref: this.setAutocompleteRef,
        getCompletions: this.getCompletions,
        value: value,
        onChange: (0, _events.chain)(onChange, this.onChange),
        onSelect: onSelect,
        onMenuShow: this.onMenuShow,
        onMenuHide: this.onMenuHide,
        showMenu: showMenu,
        onMenuToggle: onMenuToggle,
        renderItem: renderItem
      }, _react["default"].createElement(_Textfield["default"], _extends({
        className: (0, _classnames["default"])('spectrum-InputGroup-field')
      }, props, {
        id: id,
        ref: this.setTextFieldRef,
        disabled: disabled,
        required: required,
        invalid: invalid,
        autocompleteInput: true,
        quiet: quiet
      })), _react["default"].createElement(_Button["default"], {
        id: "".concat(id, "-button"),
        type: "button",
        variant: "field",
        onClick: this.onButtonClick,
        onMouseDown: function onMouseDown(e) {
          return e.preventDefault();
        },
        onMouseUp: function onMouseUp(e) {
          return e.preventDefault();
        },
        disabled: disabled,
        required: required,
        invalid: invalid,
        quiet: quiet,
        selected: showMenu !== undefined ? showMenu : this.state.open,
        "aria-label": this.getButtonLabel(),
        "aria-labelledby": "".concat(id, " ").concat(id, "-button"),
        tabIndex: "-1"
      }, _react["default"].createElement(_ChevronDownMedium["default"], {
        size: null,
        className: "spectrum-InputGroup-icon"
      })));
    }
  }]);

  return ComboBox;
}(_react["default"].Component), _defineProperty(_class2, "propTypes", {
  /**
   * Value of the input
   */
  value: _propTypes["default"].string,

  /**
   * List of options for the combobox menu
   */
  options: _propTypes["default"].array,

  /**
   * Greys out the control
   */
  disabled: _propTypes["default"].bool,

  /**
   * Marks it as required
   */
  required: _propTypes["default"].bool,

  /**
   * Marks the input as invalid
   */
  invalid: _propTypes["default"].bool,

  /**
   * Variant that changes the look, removes some borders
   */
  quiet: _propTypes["default"].bool,

  /**
   * A callback for both show and hide, event is false if hiding, true if showing.
   * Reason for this was to add a controlled state in a backwards compatible way,
   * we couldn't use show/hide props for that, so we needed a new one.
   */
  onMenuToggle: _propTypes["default"].func,

  /**
   * Controlled state for showing/hiding menu.
   */
  showMenu: _propTypes["default"].bool,

  /**
   * A function that returns a wrapper component to render a list item label.
   * Useful in providing custom html to the rendered label.
   */
  renderItem: _propTypes["default"].func
}), _defineProperty(_class2, "defaultProps", {
  options: [],
  disabled: false,
  required: false,
  invalid: false,
  quiet: false
}), _temp)) || _class) || _class;

exports["default"] = ComboBox;