"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _number = require("../../utils/number");

var _classnames = _interopRequireDefault(require("classnames"));

var _Image = _interopRequireDefault(require("../../Image/js/Image"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PERCENTAGE_CACHE = new Map();
/*
 * An AssetImage displays an image preview within an Asset component
 */

var AssetImage =
/*#__PURE__*/
function (_Component) {
  _inherits(AssetImage, _Component);

  function AssetImage() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, AssetImage);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AssetImage)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      previewPercentage: PERCENTAGE_CACHE.get(_this.props.src) || 0
    });

    return _this;
  }

  _createClass(AssetImage, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      PERCENTAGE_CACHE["delete"](this.props.src);
    }
  }, {
    key: "calculateSize",
    value: function calculateSize(width, height) {
      if (width === 0 || height === 0) {
        return 0;
      } // smartness should be a value between 0 and 1


      var smartness = (0, _number.clamp)(this.props.smartness, 0, 1); // Any asset with an aspect ratio smaller than "smallestAspectRatio" would fit the space fully (on one side).
      // Any asset with an aspect ratio bigger than "smallestAspectRatio" would fit a percentage of the space.

      var smallestAspectRatio = 0.25; // An asset with an aspect ratio of 1 (a square) would be displayed at the "minimumPercentage" of the space.

      var minimumPercentage = 1 - smartness * 0.25; // Aspect ratio of the asset (from 0 to 1) if longest side is 1.

      var aspectRatio = width / Math.max(width, height) * height / Math.max(width, height); // Ratio (from 0 to 1) between "smallestAspectRatio" and 1 (a square).

      var ratio = Math.max(0, aspectRatio - smallestAspectRatio) / (1 - smallestAspectRatio); // Percentage of the space that the asset will fit in.

      return (1 - ratio * (1 - minimumPercentage)) * 100;
    }
  }, {
    key: "onLoad",
    value: function onLoad(img) {
      var percentage = this.calculateSize(img.naturalWidth, img.naturalHeight);
      PERCENTAGE_CACHE.set(this.props.src, percentage);

      if (percentage !== this.state.previewPercentage) {
        this.setState({
          previewPercentage: percentage
        });
      }

      if (this.props.onLoad) {
        this.props.onLoad();
      }
    }
  }, {
    key: "render",
    value: function render(props) {
      var _this$props = this.props,
          src = _this$props.src,
          className = _this$props.className,
          otherProps = _objectWithoutProperties(_this$props, ["src", "className"]);

      var percentage = this.state.previewPercentage;
      var style = {
        maxWidth: percentage + '%',
        maxHeight: percentage + '%'
      };
      return _react["default"].createElement(_Image["default"], _extends({}, otherProps, {
        className: (0, _classnames["default"])('spectrum-Asset-image', className),
        onLoad: this.onLoad.bind(this),
        src: src,
        style: style
      }));
    }
  }]);

  return AssetImage;
}(_react.Component);

exports["default"] = AssetImage;

_defineProperty(AssetImage, "propTypes", {
  /** The image url */
  src: _propTypes["default"].string.isRequired,

  /** A factor between 0 and 1 that controls how the preview is scaled. When 0 ("dumb") the assets fits all the space available. */
  smartness: _propTypes["default"].number
});

_defineProperty(AssetImage, "defaultProps", {
  smartness: 1
});