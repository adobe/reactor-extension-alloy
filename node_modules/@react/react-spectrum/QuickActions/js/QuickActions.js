"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QuickActions = QuickActions;

var _ButtonGroup = _interopRequireDefault(require("../../ButtonGroup"));

var _classnames = _interopRequireDefault(require("classnames"));

var _DropdownButton = _interopRequireDefault(require("../../DropdownButton"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _QuickActionsItem = require("./QuickActionsItem");

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/quickaction/index.css");

  require("../../spectrum-css/quickaction/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/quickaction/index-lg.css");
} else {
  require("../../spectrum-css/quickaction/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/quickaction/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/quickaction/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/quickaction/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/quickaction/multiStops/darkest.css");

function cloneItem(item, variant, isMenuItem) {
  var props = _objectSpread({
    key: item.props.label
  }, item.props, {
    label: variant === 'icon' ? undefined : item.props.label,
    icon: variant === 'text' ? undefined : item.props.icon,
    isMenuItem: isMenuItem
  });

  return (0, _react.cloneElement)(item, props);
}

function QuickActions(_ref) {
  var className = _ref.className,
      maxVisibleItems = _ref.maxVisibleItems,
      onMenuOpen = _ref.onMenuOpen,
      onMenuClose = _ref.onMenuClose,
      isOpen = _ref.isOpen,
      style = _ref.style,
      variant = _ref.variant,
      orientation = _ref.orientation,
      manageTabIndex = _ref.manageTabIndex,
      readOnly = _ref.readOnly,
      otherProps = _objectWithoutProperties(_ref, ["className", "maxVisibleItems", "onMenuOpen", "onMenuClose", "isOpen", "style", "variant", "orientation", "manageTabIndex", "readOnly"]);

  var cssClasses = (0, _classnames["default"])('spectrum-QuickActions', {
    'is-open': isOpen
  }, {
    'spectrum-QuickActions--textOnly': variant === 'text'
  }, className);

  var quickActions = _react["default"].Children.toArray(otherProps.children);

  var hasDropdown = quickActions.length > maxVisibleItems;
  return _react["default"].createElement(_ButtonGroup["default"], _extends({}, (0, _filterDOMProps["default"])(otherProps), {
    role: "menu",
    className: cssClasses,
    orientation: orientation,
    manageTabIndex: manageTabIndex,
    readOnly: readOnly,
    "aria-hidden": !isOpen || null
  }), hasDropdown && quickActions.slice(0, maxVisibleItems).map(function (item) {
    return cloneItem(item, variant, false);
  }), hasDropdown && _react["default"].createElement(_DropdownButton["default"], {
    className: "spectrum-".concat(_QuickActionsItem.QuickActionsItem.displayName),
    onOpen: onMenuOpen,
    onClose: onMenuClose,
    alignRight: true
  }, quickActions.slice(maxVisibleItems, quickActions.length).map(function (item) {
    return cloneItem(item, variant, true);
  })), !hasDropdown && quickActions.map(function (item) {
    return cloneItem(item, variant, false);
  }));
}

QuickActions.displayName = 'QuickActions';

var quickActionsItemType = _propTypes["default"].shape({
  type: _propTypes["default"].oneOf([_QuickActionsItem.QuickActionsItem])
});

QuickActions.propTypes = {
  /**
   * One or more QuickActionsItem elements.
   */
  children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(quickActionsItemType), quickActionsItemType]).isRequired,

  /**
   * Custom className to apply to this component.
   */
  className: _propTypes["default"].string,

  /**
   * Number of quickaction buttons that can be visible before wrapping inside a dropdown.
   */
  maxVisibleItems: _propTypes["default"].number,

  /**
   * Whether the quickactions are displayed or not.
   */
  isOpen: _propTypes["default"].bool,

  /**
   * Specifies whether to show icon only or text only quickaction buttons.
   */
  variant: _propTypes["default"].oneOf(['icon', 'text']),

  /**
   * Renders the button group as a row or a column.
   */
  orientation: _propTypes["default"].oneOf(['horizontal', 'vertical', 'both']),

  /**
   * Whether to use roving tabIndex so that only one element within the quickaction can receive focus with tab key at a time.
   */
  manageTabIndex: _propTypes["default"].bool,

  /**
   * Won't allow a permanent selection.
   */
  readOnly: _propTypes["default"].bool,

  /**
   * Triggers when the ... menu opens.
   */
  onMenuOpen: _propTypes["default"].func,

  /**
   * Triggers when the ... menu closes.
   */
  onMenuClose: _propTypes["default"].func
};
QuickActions.defaultProps = {
  manageTabIndex: false,
  maxVisibleItems: 2,
  orientation: 'horizontal',
  readOnly: true
};