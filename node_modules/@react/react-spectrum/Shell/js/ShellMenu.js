"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _transition = require("../../utils/transition");

var _Portal = _interopRequireDefault(require("react-overlays/lib/Portal"));

var _react = _interopRequireWildcard(require("react"));

var _RootCloseWrapper = _interopRequireDefault(require("react-overlays/lib/RootCloseWrapper"));

require("../style/ShellMenu.css");

var _class, _class2, _temp;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ShellMenu = (0, _convertUnsafeMethod["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  _inherits(ShellMenu, _Component);

  function ShellMenu(props) {
    var _this;

    _classCallCheck(this, ShellMenu);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ShellMenu).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "handleTransitionEnd", function (e) {
      if (e.propertyName !== 'transform') {
        return;
      }

      var _this$props = _this.props,
          onVisible = _this$props.onVisible,
          onHidden = _this$props.onHidden;
      var open = _this.state.open;

      if (open) {
        onVisible();
      } else {
        onHidden();
      }

      _this.setState({
        visible: open
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleMenuToggle", function (e) {
      var open = _this.state.open;

      if (open) {
        _this.handleMenuClose(e);
      } else {
        _this.handleMenuOpen(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleTargetClick", function (e) {
      var open = _this.state.open; // If it's already open, close it.

      if (open) {
        _this.handleMenuClose();
      } else {
        _this.handleMenuOpen();
      }

      e.preventDefault();
    });

    _defineProperty(_assertThisInitialized(_this), "handleMenuOpen", function () {
      var _this$props2 = _this.props,
          onOpen = _this$props2.onOpen,
          index = _this$props2.index;

      _this.setOpen(true);

      onOpen(index);
    });

    _defineProperty(_assertThisInitialized(_this), "handleMenuClose", function () {
      var _this$props3 = _this.props,
          onClose = _this$props3.onClose,
          index = _this$props3.index;

      _this.setOpen(false);

      onClose(index);
    });

    var _open = props.open,
        defaultOpen = props.defaultOpen;
    _this.state = {
      open: _open !== undefined ? _open : defaultOpen,
      visible: false
    };
    return _this;
  }

  _createClass(ShellMenu, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if ('open' in nextProps) {
        this.setState({
          open: nextProps.open
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.menuRef) {
        this.menuRef.removeEventListener((0, _transition.getTransitionEvent)(), this.handleTransitionEnd);
      }
    }
  }, {
    key: "bindMenuRef",
    value: function bindMenuRef(ref) {
      if (this.menuRef) {
        this.menuRef.removeEventListener((0, _transition.getTransitionEvent)(), this.handleTransitionEnd);
      }

      this.menuRef = ref;

      if (this.menuRef) {
        this.menuRef.addEventListener((0, _transition.getTransitionEvent)(), this.handleTransitionEnd);
      }
    }
  }, {
    key: "setOpen",
    value: function setOpen(open) {
      if (!('open' in this.props)) {
        this.setState({
          open: open
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props4 = this.props,
          placement = _this$props4.placement,
          animateFrom = _this$props4.animateFrom,
          full = _this$props4.full,
          dark = _this$props4.dark,
          top = _this$props4.top,
          target = _this$props4.target,
          children = _this$props4.children;
      var _this$state = this.state,
          open = _this$state.open,
          visible = _this$state.visible;
      var zIndex;

      if (open) {
        zIndex = top ? 10018 : 10015;
      } else {
        zIndex = top ? 10017 : 10010;
      }

      return _react["default"].createElement("span", null, _react["default"].createElement("span", {
        ref: function ref(el) {
          _this2.targetRef = el;
        }
      }, _react["default"].cloneElement(target, {
        onClick: this.handleTargetClick
      })), _react["default"].createElement(_Portal["default"], null, _react["default"].createElement(_RootCloseWrapper["default"], {
        onRootClose: this.handleMenuClose,
        disabled: !open
      }, _react["default"].createElement("div", {
        ref: function ref(el) {
          _this2.bindMenuRef(el);
        },
        style: {
          zIndex: zIndex
        },
        className: (0, _classnames["default"])('coral3-Shell-menu', "coral3-Shell-menu--placement-".concat(placement), "coral3-Shell-menu--from-".concat(animateFrom), {
          'coral3-Shell-menu--full': full,
          'is-open': open,
          'coral--dark': dark,
          'is-visible': open || visible
        })
      }, children))));
    }
  }]);

  return ShellMenu;
}(_react.Component), _defineProperty(_class2, "defaultProps", {
  defaultOpen: false,
  placement: 'right',
  // top, right
  animateFrom: 'right',
  // top, right
  full: false,
  dark: false,
  top: false,
  // if true, appears on top of the other menus
  onOpen: function onOpen() {},
  onClose: function onClose() {},
  onVisible: function onVisible() {},
  onHidden: function onHidden() {}
}), _temp)) || _class;

exports["default"] = ShellMenu;
ShellMenu.displayName = 'ShellMenu';