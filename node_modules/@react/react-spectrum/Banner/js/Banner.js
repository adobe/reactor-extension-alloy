"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Banner;

var _classnames = _interopRequireDefault(require("classnames"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/banner/index.css");

  require("../../spectrum-css/banner/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/banner/index-lg.css");
} else {
  require("../../spectrum-css/banner/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/banner/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/banner/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/banner/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/banner/multiStops/darkest.css");
var variants = ['info', 'warning', 'error'];
/**
 * A banner is a label with a few specific states that optionally allows for corner placement.
 */

function Banner(_ref) {
  var header = _ref.header,
      content = _ref.content,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? variants[0] : _ref$variant,
      corner = _ref.corner,
      className = _ref.className,
      otherProps = _objectWithoutProperties(_ref, ["header", "content", "variant", "corner", "className"]);

  return _react["default"].createElement("div", _extends({
    className: (0, _classnames["default"])('spectrum-Banner', "spectrum-Banner--".concat(variant), _defineProperty({}, 'spectrum-Banner--corner', !!corner), className)
  }, (0, _filterDOMProps["default"])(otherProps)), _react["default"].createElement("div", {
    className: "spectrum-Banner-header"
  }, header), _react["default"].createElement("div", {
    className: "spectrum-Banner-content"
  }, content));
}

Banner.displayName = 'Banner';
Banner.propTypes = {
  /** Content to show in the larger header portion of the Banner */
  header: _propTypes["default"].string,

  /** Content to show below the header portion of the Banner */
  content: _propTypes["default"].string,

  /** Variant of Banner to render */
  variant: _propTypes["default"].oneOf(variants),

  /** Whether to absolutely place the Banner in the top-right corner of the containing element */
  corner: _propTypes["default"].bool
};