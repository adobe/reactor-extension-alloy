"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RowWrapper = exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("./convertUnsafeMethod"));

var _collectionView = require("@react/collection-view");

var _loadingLayout = _interopRequireDefault(require("./loadingLayout"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Provider = _interopRequireDefault(require("../Provider"));

var _proxyObject = _interopRequireDefault(require("./proxyObject"));

var _react = _interopRequireDefault(require("react"));

var _Wait = _interopRequireDefault(require("../Wait"));

require("./style/CollectionView/index.css");

var _class, _class2, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// symbol + counter for requests
var REQUEST_ID = 1;
var LAST_REQUEST = Symbol('lastRequest');

var CollectionView = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(CollectionView, _React$Component2);

  // These come from the parent Provider. Used to set the correct props
  // to the provider that wraps the drag view.
  function CollectionView(props) {
    var _this;

    _classCallCheck(this, CollectionView);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CollectionView).call(this, props));
    _this.isLoading = false;
    _this.hasMore = true;
    _this[LAST_REQUEST] = 0;
    _this.state = {
      delegate: Object.assign({}, (0, _proxyObject["default"])(_assertThisInitialized(_this)), (0, _proxyObject["default"])(props.dataSource)),
      isDropTarget: false
    };
    return _this;
  }

  _createClass(CollectionView, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.layout.component = this;

      if (this.collection) {
        this.collection.setLayout((0, _loadingLayout["default"])(this.props.layout));
      }

      this.setupDataSource(this.props.dataSource);
      this.reloadData();
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      if (props.layout !== this.props.layout) {
        props.layout.component = this;

        if (this.collection) {
          this.collection.setLayout((0, _loadingLayout["default"])(props.layout), props.animateLayoutChanges);
        }
      }

      if (props.dataSource !== this.props.dataSource) {
        this.setState({
          delegate: Object.assign({}, (0, _proxyObject["default"])(this), (0, _proxyObject["default"])(props.dataSource))
        });
        this.teardownDataSource(this.props.dataSource);
        this.setupDataSource(props.dataSource);
        this.reloadData(props);
      } else if ('sortDescriptor' in props && !this.isEqualSortDescriptor(props.sortDescriptor, this.props.sortDescriptor)) {
        // TODO: should this actually update here or is it up to the user to call performSort themselves.
        this.updateSort(props.sortDescriptor);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      // Re-render empty views on prop update in case renderEmptyView would change.
      if (this.collection) {
        this.collection.reloadSupplementaryViewsOfType('empty-view');
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.teardownDataSource(this.props.dataSource);
    }
  }, {
    key: "setupDataSource",
    value: function setupDataSource(dataSource) {
      dataSource.on('reloadData', this.reloadData);
    }
  }, {
    key: "teardownDataSource",
    value: function teardownDataSource(dataSource) {
      dataSource.removeListener('reloadData', this.reloadData);
    }
  }, {
    key: "isEqualSortDescriptor",
    value: function isEqualSortDescriptor(a, b) {
      if (!a || !b) {
        return !a === !b;
      }

      return a.column === b.column && a.direction === b.direction;
    }
  }, {
    key: "reloadData",
    value: function () {
      var _reloadData = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var props,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                props = _args.length > 0 && _args[0] !== undefined ? _args[0] : this.props;
                // reset hasMore when reloading
                this.hasMore = true;
                _context.next = 4;
                return this.performLoad(function () {
                  return props.dataSource.performLoad(props.sortDescriptor);
                });

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function reloadData() {
        return _reloadData.apply(this, arguments);
      }

      return reloadData;
    }()
  }, {
    key: "updateSort",
    value: function () {
      var _updateSort = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2(sortDescriptor) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.performLoad(function () {
                  return _this2.props.dataSource.performSort(sortDescriptor);
                });

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function updateSort(_x) {
        return _updateSort.apply(this, arguments);
      }

      return updateSort;
    }()
  }, {
    key: "performLoad",
    value: function () {
      var _performLoad = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3(fn) {
        var requestId;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                requestId = REQUEST_ID++;
                _context3.prev = 1;
                this.isLoading = true;

                if (this.collection) {
                  this.collection.relayout();
                }

                this[LAST_REQUEST] = requestId;
                _context3.next = 7;
                return fn();

              case 7:
                _context3.prev = 7;

                // only relayout if the completed request is the last request made
                if (this[LAST_REQUEST] === requestId) {
                  this.isLoading = false;

                  if (this.collection) {
                    this.collection.relayout();
                  }
                }

                return _context3.finish(7);

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[1,, 7, 10]]);
      }));

      function performLoad(_x2) {
        return _performLoad.apply(this, arguments);
      }

      return performLoad;
    }()
  }, {
    key: "onScroll",
    value: function onScroll(offset) {
      var _this3 = this;

      if (this.props.onScroll) {
        this.props.onScroll(offset);
      }

      if (!this.collection || this.isLoading) {
        return;
      }

      var scrollOffset = this.collection.contentSize.height - this.collection.size.height * 2;

      if (this.hasMore && this.collection.contentOffset.y > scrollOffset) {
        this.performLoad(
        /*#__PURE__*/
        _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee4() {
          var res;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return _this3.props.dataSource.performLoadMore();

                case 2:
                  res = _context4.sent;

                  if (typeof res === 'boolean') {
                    _this3.hasMore = res;
                  }

                case 4:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        })));
      }
    }
  }, {
    key: "dropTargetUpdated",
    value: function dropTargetUpdated(target) {
      // Highlight the entire collection view if the drop position is between, but the default
      // drop position from props is "on". This means the drop was over a non-target item.
      // Also do this if the drop position is "between" and the collection view is empty.
      var isDropTarget = target && target.type === 'item' && target.indexPath.section === 0 && target.indexPath.index === 0 && target.dropPosition === _collectionView.DragTarget.DROP_BETWEEN && (this.props.dropPosition === 'on' || this.collection.getSectionLength(0) === 0);

      if (isDropTarget && !this.state.isDropTarget) {
        this.setState({
          isDropTarget: true
        });
      } else if (this.state.isDropTarget) {
        this.setState({
          isDropTarget: false
        });
      }
    }
  }, {
    key: "renderItemView",
    value: function renderItemView(type, data) {
      return this.props.renderItemView(type, data);
    }
  }, {
    key: "renderDragView",
    value: function renderDragView(target) {
      var dragView;
      var style = {
        background: 'transparent'
      }; // Use custom drag renderer if provided,
      // otherwise just get the existing item view.

      if (this.props.renderDragView) {
        dragView = this.props.renderDragView(target, this.collection.selectedIndexPaths);
      } else {
        // Get the item wrapper view from collection-view. The first child is the actual item component.
        var view = this.collection.getItemView(target.indexPath);
        dragView = _toConsumableArray(view.children)[0];
        style.width = view.layoutInfo.rect.width;
        style.height = view.layoutInfo.rect.height;
      } // Wrap in a spectrum provider so spectrum components are themed correctly.


      return _react["default"].createElement(_Provider["default"], _extends({}, this.context, {
        style: style
      }), dragView);
    }
  }, {
    key: "renderSupplementaryView",
    value: function renderSupplementaryView(type) {
      var _this$props2 = this.props,
          renderEmptyView = _this$props2.renderEmptyView,
          renderSupplementaryView = _this$props2.renderSupplementaryView,
          role = _this$props2.role,
          colCount = _this$props2.colCount;
      var supplementaryView;

      if (renderSupplementaryView) {
        supplementaryView = renderSupplementaryView(type);
      }

      if (!supplementaryView) {
        var wrapInRow = role === 'grid' || role === 'rowgroup';

        if (type === 'loading-indicator') {
          supplementaryView = _react["default"].createElement(_Wait["default"], {
            centered: true,
            size: "M"
          });
        }

        if (type === 'empty-view' && renderEmptyView) {
          supplementaryView = renderEmptyView();
        }

        if (supplementaryView && wrapInRow) {
          supplementaryView = _react["default"].createElement(RowWrapper, {
            colCount: colCount
          }, supplementaryView);
        }
      }

      return supplementaryView || _react["default"].createElement("div", {
        role: "presentation"
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var _this$props3 = this.props,
          className = _this$props3.className,
          otherProps = _objectWithoutProperties(_this$props3, ["className"]);

      delete otherProps.layout;
      return _react["default"].createElement(_collectionView.EditableCollectionView, _extends({}, otherProps, {
        ref: function ref(c) {
          return _this4.collection = c;
        },
        className: (0, _classnames["default"])(className, {
          'is-drop-target': this.state.isDropTarget
        }),
        delegate: this.state.delegate,
        onScroll: this.onScroll
      }));
    }
  }]);

  return CollectionView;
}(_react["default"].Component), _defineProperty(_class2, "contextTypes", {
  theme: _propTypes["default"].string,
  scale: _propTypes["default"].string,
  locale: _propTypes["default"].string
}), _temp)) || _class) || _class;

exports["default"] = CollectionView;

var RowWrapper =
/*#__PURE__*/
function (_React$Component) {
  _inherits(RowWrapper, _React$Component);

  function RowWrapper() {
    _classCallCheck(this, RowWrapper);

    return _possibleConstructorReturn(this, _getPrototypeOf(RowWrapper).apply(this, arguments));
  }

  _createClass(RowWrapper, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          colCount = _this$props.colCount,
          className = _this$props.className;
      return _react["default"].createElement("div", {
        role: "row",
        className: (0, _classnames["default"])('react-spectrum-CollectionView-rowWrapper', className)
      }, _react["default"].createElement("div", {
        role: "rowheader",
        "aria-colspan": colCount
      }, children));
    }
  }]);

  return RowWrapper;
}(_react["default"].Component);

exports.RowWrapper = RowWrapper;