"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = OpenTransition;

var _react = _interopRequireDefault(require("react"));

var _Transition = _interopRequireDefault(require("react-transition-group/Transition"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var OPEN_STATES = {
  entering: false,
  entered: true
};
/**
 * timeout issues adding css animations to enter may be related to
 * https://github.com/reactjs/react-transition-group/issues/189 or
 * https://github.com/reactjs/react-transition-group/issues/22
 * my VM isn't good enough to debug accurately and get a better answer
 *
 * as a result, use enter 0 so that is-open is applied once entered
 * it doesn't matter if we know when the css-animation is done on entering
 * for exiting though, give time for the css-animation to play
 * before removing from the DOM
 * **note** hitting esc bypasses exit animation for anyone testing
 */

function OpenTransition(props) {
  return _react["default"].createElement(_Transition["default"], _extends({
    timeout: {
      enter: 0,
      exit: 125
    }
  }, props), function (state) {
    return _react["default"].cloneElement(props.children, {
      open: !!OPEN_STATES[state]
    });
  });
}