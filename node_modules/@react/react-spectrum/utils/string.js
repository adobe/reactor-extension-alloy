"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isUrl = isUrl;
exports.normalize = normalize;
exports.removeDiacritics = removeDiacritics;
exports.getTextFromReact = getTextFromReact;

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
function isUrl(string) {
  return string && !!string.match(/\/|:|\./g);
}

function normalize() {
  var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var normalizationForm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'NFC';

  if ('normalize' in String.prototype) {
    string = string.normalize(normalizationForm);
  }

  return string;
}

function removeDiacritics() {
  var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var normalizationForm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'NFD';
  return normalize(string, normalizationForm.replace('C', 'D')).replace(/[\u0300-\u036f]/g, '');
}
/** adapted from https://github.com/rwu823/react-addons-text-content */


function getTextFromReact(reactChild) {
  var result = '';

  var addChildTextToResult = function addChildTextToResult(child) {
    if (typeof child === 'string' || typeof child === 'number') {
      result = "".concat(result, " ").concat(child);
    } else if (Array.isArray(child)) {
      child.forEach(function (c) {
        return addChildTextToResult(c);
      });
    } else if (child && child.props) {
      var children = child.props.children;

      if (Array.isArray(children)) {
        children.forEach(function (c) {
          return addChildTextToResult(c);
        });
      } else {
        addChildTextToResult(children);
      }
    }
  };

  addChildTextToResult(reactChild); // clean up adjacent whitespace in result

  var adjacentWhitespaceRegex = /(\s)(?:\s+)/g;
  return result.trim().replace(adjacentWhitespaceRegex, '$1');
}