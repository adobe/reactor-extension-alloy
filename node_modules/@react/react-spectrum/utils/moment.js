"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatMoment = exports.isDateInRange = exports.toMoment = void 0;

var _momentRange = require("moment-range");

var _moment = _interopRequireDefault(require("moment"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2019 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.
**************************************************************************/
var toMoment = function toMoment(value, format) {
  if (!value) {
    return null;
  } // if 'today'


  if (value === 'today') {
    return (0, _moment["default"])();
  }

  if (value instanceof _momentRange.DateRange) {
    return value;
  }

  if (Array.isArray(value)) {
    return new _momentRange.DateRange(value.map(function (v) {
      return toMoment(v, format);
    }));
  } // If it's a moment object


  if (_moment["default"].isMoment(value)) {
    return value.isValid() ? value.clone() : null;
  } // Anything else


  var result = (0, _moment["default"])(value, value instanceof Date ? null : format, true);
  return result.isValid() ? result : null;
};

exports.toMoment = toMoment;

var isDateInRange = function isDateInRange(date, min, max) {
  if (!min && !max) {
    return true;
  }

  if (!min) {
    return date <= max;
  }

  if (!max) {
    return date >= min;
  }

  return min <= date && date <= max;
};

exports.isDateInRange = isDateInRange;

var formatMoment = function formatMoment(date, valueFormat) {
  if (!date) {
    return '';
  }

  if (valueFormat === _moment["default"].ISO_8601) {
    return date.format();
  }

  if (typeof valueFormat === 'string') {
    return date.format(valueFormat);
  }

  throw new Error("".concat(valueFormat, " is not valid, 'valueFormat' should be a moment format string ") + 'or the moment.ISO_8601 constant.');
};

exports.formatMoment = formatMoment;