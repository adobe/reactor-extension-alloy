"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _filterDOMProps = _interopRequireDefault(require("../../utils/filterDOMProps"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _class, _class2, _temp;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (process.env.SCALE_MEDIUM && process.env.SCALE_LARGE) {
  require("../../spectrum-css/textfield/index.css");

  require("../../spectrum-css/textfield/index-diff.css");
} else if (process.env.SCALE_LARGE) {
  require("../../spectrum-css/textfield/index-lg.css");
} else {
  require("../../spectrum-css/textfield/index.css");
}

if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHT) require("../../spectrum-css/textfield/multiStops/light.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARK) require("../../spectrum-css/textfield/multiStops/dark.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_LIGHTEST) require("../../spectrum-css/textfield/multiStops/lightest.css");
if (!process.env.THEME_LIGHT && !process.env.THEME_DARK && !process.env.THEME_LIGHTEST && !process.env.THEME_DARKEST || process.env.THEME_DARKEST) require("../../spectrum-css/textfield/multiStops/darkest.css");

var Textfield = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_Component) {
  _inherits(Textfield, _Component);

  function Textfield() {
    _classCallCheck(this, Textfield);

    return _possibleConstructorReturn(this, _getPrototypeOf(Textfield).apply(this, arguments));
  }

  _createClass(Textfield, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this = this;

      if (this.props.autoFocus) {
        // wait a frame to make sure the textfield in the DOM and focusable
        requestAnimationFrame(function () {
          return _this.focus();
        });
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      if (!this.props.disabled) {
        _reactDom["default"].findDOMNode(this).focus();
      }
    }
  }, {
    key: "onChange",
    value: function onChange(e) {
      if (this.props.onChange) {
        this.props.onChange(e.target.value, e);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          quiet = _this$props.quiet,
          disabled = _this$props.disabled,
          required = _this$props.required,
          invalid = _this$props.invalid,
          readOnly = _this$props.readOnly,
          multiLine = _this$props.multiLine,
          validationState = _this$props.validationState,
          otherProps = _objectWithoutProperties(_this$props, ["className", "quiet", "disabled", "required", "invalid", "readOnly", "multiLine", "validationState"]);

      var Tag = multiLine ? 'textarea' : 'input';
      var isInvalid = invalid || validationState === 'invalid';
      delete otherProps.autoFocus;
      delete otherProps.autocompleteInput;

      if (invalid) {
        console.warn('The "invalid" prop of Textfield is deprecated. Please use validationState="invalid" instead.');
      }

      return _react["default"].createElement(Tag, _extends({
        type: "text",
        className: (0, _classnames["default"])('spectrum-Textfield', {
          'spectrum-Textfield--multiline': multiLine,
          'is-invalid': isInvalid,
          'is-valid': validationState === 'valid',
          'spectrum-Textfield--quiet': quiet
        }, className),
        disabled: disabled,
        required: required,
        readOnly: readOnly,
        "aria-invalid": isInvalid || null,
        defaultValue: otherProps.defaultValue
      }, (0, _filterDOMProps["default"])(otherProps), {
        onChange: this.onChange,
        rows: multiLine ? 1 : undefined
      }));
    }
  }]);

  return Textfield;
}(_react.Component), _defineProperty(_class2, "propTypes", {
  /** Whether to automatically focus this text field */
  autoFocus: _propTypes["default"].bool,

  /** Custom CSS class to add to the text field */
  className: _propTypes["default"].string,

  /** Whether to disable the text field */
  disabled: _propTypes["default"].bool,

  /** Whether to show the warning icon and red border. DEPRECATED: use validationState instead */
  invalid: _propTypes["default"].bool,

  /** Whether to render a textfield that accepts multiple lines of text */
  multiLine: _propTypes["default"].bool,

  /** Function called when focus is taken away from the text field */
  onBlur: _propTypes["default"].func,

  /** Function called when the text field value is changed */
  onChange: _propTypes["default"].func,

  /** Function called when focus is put on the text field */
  onFocus: _propTypes["default"].func,

  /** String to show in the text field when nothing has been input */
  placeholder: _propTypes["default"].string,

  /** Whether the text field should render using a quiet variant */
  quiet: _propTypes["default"].bool,

  /** Whether the text field can only be read */
  readOnly: _propTypes["default"].bool,

  /** Whether the text field requires user input (shows warning if empty) */
  required: _propTypes["default"].bool,

  /** Show either checkmark or warning icons */
  validationState: _propTypes["default"].oneOf(['valid', 'invalid'])
}), _defineProperty(_class2, "defaultProps", {
  autoFocus: false,
  disabled: false,
  quiet: false,
  required: false,
  invalid: false,
  readOnly: false
}), _temp)) || _class;

exports["default"] = Textfield;
Textfield.displayName = 'Textfield';