"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _array = require("../../utils/array");

var _autobindDecorator = _interopRequireDefault(require("autobind-decorator"));

var _classnames = _interopRequireDefault(require("classnames"));

var _convertUnsafeMethod = _interopRequireDefault(require("../../utils/convertUnsafeMethod"));

var _createId = _interopRequireDefault(require("../../utils/createId"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _TabList = require("../../TabList");

var _TabListBase = _interopRequireDefault(require("../../TabList/js/TabListBase"));

require("../style/index.css");

var _class, _class2, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TabView = (0, _convertUnsafeMethod["default"])(_class = (0, _autobindDecorator["default"])(_class = (_temp = _class2 =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TabView, _React$Component);

  function TabView(props) {
    var _this;

    _classCallCheck(this, TabView);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TabView).call(this, props));
    _this.tabViewId = (0, _createId["default"])();
    _this.state = {
      selectedIndex: _TabListBase["default"].getDefaultSelectedIndex(props)
    };
    return _this;
  }

  _createClass(TabView, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props) {
      // Reset selected index when children change
      var oldChildren = _react["default"].Children.toArray(this.props.children).map(function (child) {
        return child.key;
      });

      var newChildren = _react["default"].Children.toArray(props.children).map(function (child) {
        return child.key;
      });

      if (props.selectedIndex !== this.props.selectedIndex || !(0, _array.arraysEqual)(oldChildren, newChildren)) {
        this.setState({
          selectedIndex: props.selectedIndex || 0
        });
      }
    }
  }, {
    key: "onChange",
    value: function onChange(selectedIndex) {
      if (this.props.selectedIndex == null) {
        this.setState({
          selectedIndex: selectedIndex
        });
      }

      if (this.props.onSelect) {
        this.props.onSelect(selectedIndex);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          _this$props$id = _this$props.id,
          id = _this$props$id === void 0 ? this.tabViewId : _this$props$id,
          orientation = _this$props.orientation,
          props = _objectWithoutProperties(_this$props, ["className", "id", "orientation"]);

      var tabId = id + '-tab';
      var tabPanelId = id + '-tabpanel';

      var children = _react["default"].Children.map(this.props.children, function (c, i) {
        return _typeof(c) === 'object' && c ? _react["default"].cloneElement(c, {
          'aria-controls': tabPanelId,
          id: tabId + '-' + i,
          renderChildren: false
        }) : c;
      }); // Clone children so that they get componentWillReceiveProps when clicking on the same tab


      var selected = children[this.state.selectedIndex];

      var body = _react["default"].Children.map(selected.props.children, function (c) {
        return _typeof(c) === 'object' && c ? _react["default"].cloneElement(c) : c;
      });

      return _react["default"].createElement("div", {
        className: (0, _classnames["default"])('react-spectrum-TabView', 'react-spectrum-TabView--' + orientation, className)
      }, _react["default"].createElement(_TabList.TabList, _extends({}, props, {
        orientation: orientation,
        selectedIndex: this.state.selectedIndex,
        onChange: this.onChange
      }), children), _react["default"].createElement("div", {
        className: "react-spectrum-TabView-body",
        role: "tabpanel",
        id: tabPanelId,
        "aria-labelledby": selected.props.id
      }, body));
    }
  }]);

  return TabView;
}(_react["default"].Component), _defineProperty(_class2, "propTypes", {
  /** Class to add to the tab view */
  className: _propTypes["default"].string,

  /** Id for tab view */
  id: _propTypes["default"].string,

  /** Function called when a tab is selected */
  onSelect: _propTypes["default"].func,

  /** Tab orientation */
  orientation: _propTypes["default"].oneOf(['vertical', 'horizontal']),

  /**
   * The index of the Tab that should be selected (open). When selectedIndex is
   * specified, the component is in a controlled state and a Tab can only be selected by changing the
   * selectedIndex prop value. By default, the first Tab will be selected.
   */
  selectedIndex: _propTypes["default"].number,

  /**
   * The same as selectedIndex except that the component is in an uncontrolled state.
   */
  defaultSelectedIndex: _propTypes["default"].number,

  /** Children are required */
  children: _propTypes["default"].node.isRequired
}), _defineProperty(_class2, "defaultProps", {
  id: (0, _createId["default"])(),
  orientation: 'horizontal'
}), _temp)) || _class) || _class;

exports["default"] = TabView;